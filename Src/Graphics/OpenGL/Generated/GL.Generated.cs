//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Dissonance.Framework.Graphics.OpenGL
{
    public static partial class GL
    {
        public static unsafe delegate*<AccumOp, float, void> _glAccum;
        
        public static unsafe void glAccum(AccumOp op, float value)
        {
            _glAccum(op, value);
        }
        
        public static unsafe delegate*<uint, int, void> _glAccumxOES;
        
        public static unsafe void glAccumxOES(uint op, int value)
        {
            _glAccumxOES(op, value);
        }
        
        public static unsafe delegate*<uint, void> _glActiveProgramEXT;
        
        public static unsafe void glActiveProgramEXT(uint program)
        {
            _glActiveProgramEXT(program);
        }
        
        public static unsafe delegate*<uint, uint, void> _glActiveShaderProgram;
        
        public static unsafe void glActiveShaderProgram(uint pipeline, uint program)
        {
            _glActiveShaderProgram(pipeline, program);
        }
        
        public static unsafe delegate*<uint, uint, void> _glActiveShaderProgramEXT;
        
        public static unsafe void glActiveShaderProgramEXT(uint pipeline, uint program)
        {
            _glActiveShaderProgramEXT(pipeline, program);
        }
        
        public static unsafe delegate*<StencilFaceDirection, void> _glActiveStencilFaceEXT;
        
        public static unsafe void glActiveStencilFaceEXT(StencilFaceDirection face)
        {
            _glActiveStencilFaceEXT(face);
        }
        
        public static unsafe delegate*<TextureUnit, void> _glActiveTexture;
        
        public static unsafe void glActiveTexture(TextureUnit texture)
        {
            _glActiveTexture(texture);
        }
        
        public static unsafe delegate*<TextureUnit, void> _glActiveTextureARB;
        
        public static unsafe void glActiveTextureARB(TextureUnit texture)
        {
            _glActiveTextureARB(texture);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glActiveVaryingNV;
        
        public static unsafe void glActiveVaryingNV(uint program, ref sbyte name)
        {
            _glActiveVaryingNV(program, (IntPtr)name);
        }
        
        public static unsafe delegate*<FragmentOpATI, uint, uint, uint, uint, uint, void> _glAlphaFragmentOp1ATI;
        
        public static unsafe void glAlphaFragmentOp1ATI(FragmentOpATI op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod)
        {
            _glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
        }
        
        public static unsafe delegate*<FragmentOpATI, uint, uint, uint, uint, uint, uint, uint, uint, void> _glAlphaFragmentOp2ATI;
        
        public static unsafe void glAlphaFragmentOp2ATI(FragmentOpATI op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod)
        {
            _glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        }
        
        public static unsafe delegate*<FragmentOpATI, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _glAlphaFragmentOp3ATI;
        
        public static unsafe void glAlphaFragmentOp3ATI(FragmentOpATI op, uint dst, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod)
        {
            _glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        }
        
        public static unsafe delegate*<AlphaFunction, float, void> _glAlphaFunc;
        
        public static unsafe void glAlphaFunc(AlphaFunction func, float @ref)
        {
            _glAlphaFunc(func, @ref);
        }
        
        public static unsafe delegate*<uint, float, void> _glAlphaFuncQCOM;
        
        public static unsafe void glAlphaFuncQCOM(uint func, float @ref)
        {
            _glAlphaFuncQCOM(func, @ref);
        }
        
        public static unsafe delegate*<AlphaFunction, int, void> _glAlphaFuncx;
        
        public static unsafe void glAlphaFuncx(AlphaFunction func, int @ref)
        {
            _glAlphaFuncx(func, @ref);
        }
        
        public static unsafe delegate*<AlphaFunction, int, void> _glAlphaFuncxOES;
        
        public static unsafe void glAlphaFuncxOES(AlphaFunction func, int @ref)
        {
            _glAlphaFuncxOES(func, @ref);
        }
        
        public static unsafe delegate*<uint, void> _glAlphaToCoverageDitherControlNV;
        
        public static unsafe void glAlphaToCoverageDitherControlNV(uint mode)
        {
            _glAlphaToCoverageDitherControlNV(mode);
        }
        
        public static unsafe delegate*<void> _glApplyFramebufferAttachmentCMAAINTEL;
        
        public static unsafe void glApplyFramebufferAttachmentCMAAINTEL()
        {
            _glApplyFramebufferAttachmentCMAAINTEL();
        }
        
        public static unsafe delegate*<LightTextureModeEXT, void> _glApplyTextureEXT;
        
        public static unsafe void glApplyTextureEXT(LightTextureModeEXT mode)
        {
            _glApplyTextureEXT(mode);
        }
        
        public static unsafe delegate*<uint, ulong, uint, byte> _glAcquireKeyedMutexWin32EXT;
        
        public static unsafe byte glAcquireKeyedMutexWin32EXT(uint memory, ulong key, uint timeout)
        {
            return _glAcquireKeyedMutexWin32EXT(memory, key, timeout);
        }
        
        public static unsafe delegate*<int, IntPtr, IntPtr, byte> _glAreProgramsResidentNV;
        
        public static unsafe byte glAreProgramsResidentNV(int n, ref uint programs, ref byte residences)
        {
            return _glAreProgramsResidentNV(n, (IntPtr)programs, (IntPtr)residences);
        }
        
        public static unsafe delegate*<int, IntPtr, IntPtr, byte> _glAreTexturesResident;
        
        public static unsafe byte glAreTexturesResident(int n, ref uint textures, ref byte residences)
        {
            return _glAreTexturesResident(n, (IntPtr)textures, (IntPtr)residences);
        }
        
        public static unsafe delegate*<int, IntPtr, IntPtr, byte> _glAreTexturesResidentEXT;
        
        public static unsafe byte glAreTexturesResidentEXT(int n, ref uint textures, ref byte residences)
        {
            return _glAreTexturesResidentEXT(n, (IntPtr)textures, (IntPtr)residences);
        }
        
        public static unsafe delegate*<int, void> _glArrayElement;
        
        public static unsafe void glArrayElement(int i)
        {
            _glArrayElement(i);
        }
        
        public static unsafe delegate*<int, void> _glArrayElementEXT;
        
        public static unsafe void glArrayElementEXT(int i)
        {
            _glArrayElementEXT(i);
        }
        
        public static unsafe delegate*<EnableCap, int, ScalarType, int, uint, uint, void> _glArrayObjectATI;
        
        public static unsafe void glArrayObjectATI(EnableCap array, int size, ScalarType type, int stride, uint buffer, uint offset)
        {
            _glArrayObjectATI(array, size, type, stride, buffer, offset);
        }
        
        public static unsafe delegate*<int, IntPtr, IntPtr, uint, uint, uint, uint, long, long, long, int, IntPtr, IntPtr, uint> _glAsyncCopyBufferSubDataNVX;
        
        public static unsafe uint glAsyncCopyBufferSubDataNVX(int waitSemaphoreCount, ref uint waitSemaphoreArray, ref ulong fenceValueArray, uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, long readOffset, long writeOffset, long size, int signalSemaphoreCount, ref uint signalSemaphoreArray, ref ulong signalValueArray)
        {
            return _glAsyncCopyBufferSubDataNVX(waitSemaphoreCount, (IntPtr)waitSemaphoreArray, (IntPtr)fenceValueArray, readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size, signalSemaphoreCount, (IntPtr)signalSemaphoreArray, (IntPtr)signalValueArray);
        }
        
        public static unsafe delegate*<int, IntPtr, IntPtr, uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, int, IntPtr, IntPtr, uint> _glAsyncCopyImageSubDataNVX;
        
        public static unsafe uint glAsyncCopyImageSubDataNVX(int waitSemaphoreCount, ref uint waitSemaphoreArray, ref ulong waitValueArray, uint srcGpu, uint dstGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth, int signalSemaphoreCount, ref uint signalSemaphoreArray, ref ulong signalValueArray)
        {
            return _glAsyncCopyImageSubDataNVX(waitSemaphoreCount, (IntPtr)waitSemaphoreArray, (IntPtr)waitValueArray, srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth, signalSemaphoreCount, (IntPtr)signalSemaphoreArray, (IntPtr)signalValueArray);
        }
        
        public static unsafe delegate*<uint, void> _glAsyncMarkerSGIX;
        
        public static unsafe void glAsyncMarkerSGIX(uint marker)
        {
            _glAsyncMarkerSGIX(marker);
        }
        
        public static unsafe delegate*<uint, uint, void> _glAttachObjectARB;
        
        public static unsafe void glAttachObjectARB(uint containerObj, uint obj)
        {
            _glAttachObjectARB(containerObj, obj);
        }
        
        public static unsafe delegate*<uint, uint, void> _glAttachShader;
        
        public static unsafe void glAttachShader(uint program, uint shader)
        {
            _glAttachShader(program, shader);
        }
        
        public static unsafe delegate*<PrimitiveType, void> _glBegin;
        
        public static unsafe void glBegin(PrimitiveType mode)
        {
            _glBegin(mode);
        }
        
        public static unsafe delegate*<uint, ConditionalRenderMode, void> _glBeginConditionalRender;
        
        public static unsafe void glBeginConditionalRender(uint id, ConditionalRenderMode mode)
        {
            _glBeginConditionalRender(id, mode);
        }
        
        public static unsafe delegate*<uint, ConditionalRenderMode, void> _glBeginConditionalRenderNV;
        
        public static unsafe void glBeginConditionalRenderNV(uint id, ConditionalRenderMode mode)
        {
            _glBeginConditionalRenderNV(id, mode);
        }
        
        public static unsafe delegate*<uint, void> _glBeginConditionalRenderNVX;
        
        public static unsafe void glBeginConditionalRenderNVX(uint id)
        {
            _glBeginConditionalRenderNVX(id);
        }
        
        public static unsafe delegate*<void> _glBeginFragmentShaderATI;
        
        public static unsafe void glBeginFragmentShaderATI()
        {
            _glBeginFragmentShaderATI();
        }
        
        public static unsafe delegate*<uint, void> _glBeginOcclusionQueryNV;
        
        public static unsafe void glBeginOcclusionQueryNV(uint id)
        {
            _glBeginOcclusionQueryNV(id);
        }
        
        public static unsafe delegate*<uint, void> _glBeginPerfMonitorAMD;
        
        public static unsafe void glBeginPerfMonitorAMD(uint monitor)
        {
            _glBeginPerfMonitorAMD(monitor);
        }
        
        public static unsafe delegate*<uint, void> _glBeginPerfQueryINTEL;
        
        public static unsafe void glBeginPerfQueryINTEL(uint queryHandle)
        {
            _glBeginPerfQueryINTEL(queryHandle);
        }
        
        public static unsafe delegate*<QueryTarget, uint, void> _glBeginQuery;
        
        public static unsafe void glBeginQuery(QueryTarget target, uint id)
        {
            _glBeginQuery(target, id);
        }
        
        public static unsafe delegate*<QueryTarget, uint, void> _glBeginQueryARB;
        
        public static unsafe void glBeginQueryARB(QueryTarget target, uint id)
        {
            _glBeginQueryARB(target, id);
        }
        
        public static unsafe delegate*<QueryTarget, uint, void> _glBeginQueryEXT;
        
        public static unsafe void glBeginQueryEXT(QueryTarget target, uint id)
        {
            _glBeginQueryEXT(target, id);
        }
        
        public static unsafe delegate*<QueryTarget, uint, uint, void> _glBeginQueryIndexed;
        
        public static unsafe void glBeginQueryIndexed(QueryTarget target, uint index, uint id)
        {
            _glBeginQueryIndexed(target, index, id);
        }
        
        public static unsafe delegate*<PrimitiveType, void> _glBeginTransformFeedback;
        
        public static unsafe void glBeginTransformFeedback(PrimitiveType primitiveMode)
        {
            _glBeginTransformFeedback(primitiveMode);
        }
        
        public static unsafe delegate*<PrimitiveType, void> _glBeginTransformFeedbackEXT;
        
        public static unsafe void glBeginTransformFeedbackEXT(PrimitiveType primitiveMode)
        {
            _glBeginTransformFeedbackEXT(primitiveMode);
        }
        
        public static unsafe delegate*<PrimitiveType, void> _glBeginTransformFeedbackNV;
        
        public static unsafe void glBeginTransformFeedbackNV(PrimitiveType primitiveMode)
        {
            _glBeginTransformFeedbackNV(primitiveMode);
        }
        
        public static unsafe delegate*<void> _glBeginVertexShaderEXT;
        
        public static unsafe void glBeginVertexShaderEXT()
        {
            _glBeginVertexShaderEXT();
        }
        
        public static unsafe delegate*<uint, void> _glBeginVideoCaptureNV;
        
        public static unsafe void glBeginVideoCaptureNV(uint video_capture_slot)
        {
            _glBeginVideoCaptureNV(video_capture_slot);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glBindAttribLocation;
        
        public static unsafe void glBindAttribLocation(uint program, uint index, ref sbyte name)
        {
            _glBindAttribLocation(program, index, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glBindAttribLocationARB;
        
        public static unsafe void glBindAttribLocationARB(uint programObj, uint index, ref sbyte name)
        {
            _glBindAttribLocationARB(programObj, index, (IntPtr)name);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, void> _glBindBuffer;
        
        public static unsafe void glBindBuffer(BufferTargetARB target, uint buffer)
        {
            _glBindBuffer(target, buffer);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, void> _glBindBufferARB;
        
        public static unsafe void glBindBufferARB(BufferTargetARB target, uint buffer)
        {
            _glBindBufferARB(target, buffer);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, uint, void> _glBindBufferBase;
        
        public static unsafe void glBindBufferBase(BufferTargetARB target, uint index, uint buffer)
        {
            _glBindBufferBase(target, index, buffer);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, uint, void> _glBindBufferBaseEXT;
        
        public static unsafe void glBindBufferBaseEXT(BufferTargetARB target, uint index, uint buffer)
        {
            _glBindBufferBaseEXT(target, index, buffer);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, uint, void> _glBindBufferBaseNV;
        
        public static unsafe void glBindBufferBaseNV(BufferTargetARB target, uint index, uint buffer)
        {
            _glBindBufferBaseNV(target, index, buffer);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, uint, long, void> _glBindBufferOffsetEXT;
        
        public static unsafe void glBindBufferOffsetEXT(BufferTargetARB target, uint index, uint buffer, long offset)
        {
            _glBindBufferOffsetEXT(target, index, buffer, offset);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, uint, long, void> _glBindBufferOffsetNV;
        
        public static unsafe void glBindBufferOffsetNV(BufferTargetARB target, uint index, uint buffer, long offset)
        {
            _glBindBufferOffsetNV(target, index, buffer, offset);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, uint, long, long, void> _glBindBufferRange;
        
        public static unsafe void glBindBufferRange(BufferTargetARB target, uint index, uint buffer, long offset, long size)
        {
            _glBindBufferRange(target, index, buffer, offset, size);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, uint, long, long, void> _glBindBufferRangeEXT;
        
        public static unsafe void glBindBufferRangeEXT(BufferTargetARB target, uint index, uint buffer, long offset, long size)
        {
            _glBindBufferRangeEXT(target, index, buffer, offset, size);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, uint, long, long, void> _glBindBufferRangeNV;
        
        public static unsafe void glBindBufferRangeNV(BufferTargetARB target, uint index, uint buffer, long offset, long size)
        {
            _glBindBufferRangeNV(target, index, buffer, offset, size);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, int, IntPtr, void> _glBindBuffersBase;
        
        public static unsafe void glBindBuffersBase(BufferTargetARB target, uint first, int count, ref uint buffers)
        {
            _glBindBuffersBase(target, first, count, (IntPtr)buffers);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, int, IntPtr, IntPtr, IntPtr, void> _glBindBuffersRange;
        
        public static unsafe void glBindBuffersRange(BufferTargetARB target, uint first, int count, ref uint buffers, ref long offsets, ref long sizes)
        {
            _glBindBuffersRange(target, first, count, (IntPtr)buffers, (IntPtr)offsets, (IntPtr)sizes);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glBindFragDataLocation;
        
        public static unsafe void glBindFragDataLocation(uint program, uint color, ref sbyte name)
        {
            _glBindFragDataLocation(program, color, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glBindFragDataLocationEXT;
        
        public static unsafe void glBindFragDataLocationEXT(uint program, uint color, ref sbyte name)
        {
            _glBindFragDataLocationEXT(program, color, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glBindFragDataLocationIndexed;
        
        public static unsafe void glBindFragDataLocationIndexed(uint program, uint colorNumber, uint index, ref sbyte name)
        {
            _glBindFragDataLocationIndexed(program, colorNumber, index, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glBindFragDataLocationIndexedEXT;
        
        public static unsafe void glBindFragDataLocationIndexedEXT(uint program, uint colorNumber, uint index, ref sbyte name)
        {
            _glBindFragDataLocationIndexedEXT(program, colorNumber, index, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, void> _glBindFragmentShaderATI;
        
        public static unsafe void glBindFragmentShaderATI(uint id)
        {
            _glBindFragmentShaderATI(id);
        }
        
        public static unsafe delegate*<FramebufferTarget, uint, void> _glBindFramebuffer;
        
        public static unsafe void glBindFramebuffer(FramebufferTarget target, uint framebuffer)
        {
            _glBindFramebuffer(target, framebuffer);
        }
        
        public static unsafe delegate*<FramebufferTarget, uint, void> _glBindFramebufferEXT;
        
        public static unsafe void glBindFramebufferEXT(FramebufferTarget target, uint framebuffer)
        {
            _glBindFramebufferEXT(target, framebuffer);
        }
        
        public static unsafe delegate*<FramebufferTarget, uint, void> _glBindFramebufferOES;
        
        public static unsafe void glBindFramebufferOES(FramebufferTarget target, uint framebuffer)
        {
            _glBindFramebufferOES(target, framebuffer);
        }
        
        public static unsafe delegate*<uint, uint, int, byte, int, BufferAccessARB, InternalFormat, void> _glBindImageTexture;
        
        public static unsafe void glBindImageTexture(uint unit, uint texture, int level, byte layered, int layer, BufferAccessARB access, InternalFormat format)
        {
            _glBindImageTexture(unit, texture, level, layered, layer, access, format);
        }
        
        public static unsafe delegate*<uint, uint, int, byte, int, BufferAccessARB, int, void> _glBindImageTextureEXT;
        
        public static unsafe void glBindImageTextureEXT(uint index, uint texture, int level, byte layered, int layer, BufferAccessARB access, int format)
        {
            _glBindImageTextureEXT(index, texture, level, layered, layer, access, format);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glBindImageTextures;
        
        public static unsafe void glBindImageTextures(uint first, int count, ref uint textures)
        {
            _glBindImageTextures(first, count, (IntPtr)textures);
        }
        
        public static unsafe delegate*<LightName, LightParameter, uint> _glBindLightParameterEXT;
        
        public static unsafe uint glBindLightParameterEXT(LightName light, LightParameter value)
        {
            return _glBindLightParameterEXT(light, value);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, uint> _glBindMaterialParameterEXT;
        
        public static unsafe uint glBindMaterialParameterEXT(MaterialFace face, MaterialParameter value)
        {
            return _glBindMaterialParameterEXT(face, value);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, uint, void> _glBindMultiTextureEXT;
        
        public static unsafe void glBindMultiTextureEXT(TextureUnit texunit, TextureTarget target, uint texture)
        {
            _glBindMultiTextureEXT(texunit, target, texture);
        }
        
        public static unsafe delegate*<VertexShaderParameterEXT, uint> _glBindParameterEXT;
        
        public static unsafe uint glBindParameterEXT(VertexShaderParameterEXT value)
        {
            return _glBindParameterEXT(value);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, void> _glBindProgramARB;
        
        public static unsafe void glBindProgramARB(ProgramTarget target, uint program)
        {
            _glBindProgramARB(target, program);
        }
        
        public static unsafe delegate*<VertexAttribEnumNV, uint, void> _glBindProgramNV;
        
        public static unsafe void glBindProgramNV(VertexAttribEnumNV target, uint id)
        {
            _glBindProgramNV(target, id);
        }
        
        public static unsafe delegate*<uint, void> _glBindProgramPipeline;
        
        public static unsafe void glBindProgramPipeline(uint pipeline)
        {
            _glBindProgramPipeline(pipeline);
        }
        
        public static unsafe delegate*<uint, void> _glBindProgramPipelineEXT;
        
        public static unsafe void glBindProgramPipelineEXT(uint pipeline)
        {
            _glBindProgramPipelineEXT(pipeline);
        }
        
        public static unsafe delegate*<RenderbufferTarget, uint, void> _glBindRenderbuffer;
        
        public static unsafe void glBindRenderbuffer(RenderbufferTarget target, uint renderbuffer)
        {
            _glBindRenderbuffer(target, renderbuffer);
        }
        
        public static unsafe delegate*<RenderbufferTarget, uint, void> _glBindRenderbufferEXT;
        
        public static unsafe void glBindRenderbufferEXT(RenderbufferTarget target, uint renderbuffer)
        {
            _glBindRenderbufferEXT(target, renderbuffer);
        }
        
        public static unsafe delegate*<RenderbufferTarget, uint, void> _glBindRenderbufferOES;
        
        public static unsafe void glBindRenderbufferOES(RenderbufferTarget target, uint renderbuffer)
        {
            _glBindRenderbufferOES(target, renderbuffer);
        }
        
        public static unsafe delegate*<uint, uint, void> _glBindSampler;
        
        public static unsafe void glBindSampler(uint unit, uint sampler)
        {
            _glBindSampler(unit, sampler);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glBindSamplers;
        
        public static unsafe void glBindSamplers(uint first, int count, ref uint samplers)
        {
            _glBindSamplers(first, count, (IntPtr)samplers);
        }
        
        public static unsafe delegate*<uint, void> _glBindShadingRateImageNV;
        
        public static unsafe void glBindShadingRateImageNV(uint texture)
        {
            _glBindShadingRateImageNV(texture);
        }
        
        public static unsafe delegate*<TextureUnit, TextureCoordName, TextureGenParameter, uint> _glBindTexGenParameterEXT;
        
        public static unsafe uint glBindTexGenParameterEXT(TextureUnit unit, TextureCoordName coord, TextureGenParameter value)
        {
            return _glBindTexGenParameterEXT(unit, coord, value);
        }
        
        public static unsafe delegate*<TextureTarget, uint, void> _glBindTexture;
        
        public static unsafe void glBindTexture(TextureTarget target, uint texture)
        {
            _glBindTexture(target, texture);
        }
        
        public static unsafe delegate*<TextureTarget, uint, void> _glBindTextureEXT;
        
        public static unsafe void glBindTextureEXT(TextureTarget target, uint texture)
        {
            _glBindTextureEXT(target, texture);
        }
        
        public static unsafe delegate*<uint, uint, void> _glBindTextureUnit;
        
        public static unsafe void glBindTextureUnit(uint unit, uint texture)
        {
            _glBindTextureUnit(unit, texture);
        }
        
        public static unsafe delegate*<TextureUnit, VertexShaderTextureUnitParameter, uint> _glBindTextureUnitParameterEXT;
        
        public static unsafe uint glBindTextureUnitParameterEXT(TextureUnit unit, VertexShaderTextureUnitParameter value)
        {
            return _glBindTextureUnitParameterEXT(unit, value);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glBindTextures;
        
        public static unsafe void glBindTextures(uint first, int count, ref uint textures)
        {
            _glBindTextures(first, count, (IntPtr)textures);
        }
        
        public static unsafe delegate*<BindTransformFeedbackTarget, uint, void> _glBindTransformFeedback;
        
        public static unsafe void glBindTransformFeedback(BindTransformFeedbackTarget target, uint id)
        {
            _glBindTransformFeedback(target, id);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, void> _glBindTransformFeedbackNV;
        
        public static unsafe void glBindTransformFeedbackNV(BufferTargetARB target, uint id)
        {
            _glBindTransformFeedbackNV(target, id);
        }
        
        public static unsafe delegate*<uint, void> _glBindVertexArray;
        
        public static unsafe void glBindVertexArray(uint array)
        {
            _glBindVertexArray(array);
        }
        
        public static unsafe delegate*<uint, void> _glBindVertexArrayAPPLE;
        
        public static unsafe void glBindVertexArrayAPPLE(uint array)
        {
            _glBindVertexArrayAPPLE(array);
        }
        
        public static unsafe delegate*<uint, void> _glBindVertexArrayOES;
        
        public static unsafe void glBindVertexArrayOES(uint array)
        {
            _glBindVertexArrayOES(array);
        }
        
        public static unsafe delegate*<uint, uint, long, int, void> _glBindVertexBuffer;
        
        public static unsafe void glBindVertexBuffer(uint bindingindex, uint buffer, long offset, int stride)
        {
            _glBindVertexBuffer(bindingindex, buffer, offset, stride);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, IntPtr, void> _glBindVertexBuffers;
        
        public static unsafe void glBindVertexBuffers(uint first, int count, ref uint buffers, ref long offsets, ref int strides)
        {
            _glBindVertexBuffers(first, count, (IntPtr)buffers, (IntPtr)offsets, (IntPtr)strides);
        }
        
        public static unsafe delegate*<uint, void> _glBindVertexShaderEXT;
        
        public static unsafe void glBindVertexShaderEXT(uint id)
        {
            _glBindVertexShaderEXT(id);
        }
        
        public static unsafe delegate*<uint, uint, uint, long, void> _glBindVideoCaptureStreamBufferNV;
        
        public static unsafe void glBindVideoCaptureStreamBufferNV(uint video_capture_slot, uint stream, uint frame_region, long offset)
        {
            _glBindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, uint, void> _glBindVideoCaptureStreamTextureNV;
        
        public static unsafe void glBindVideoCaptureStreamTextureNV(uint video_capture_slot, uint stream, uint frame_region, uint target, uint texture)
        {
            _glBindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture);
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, void> _glBinormal3bEXT;
        
        public static unsafe void glBinormal3bEXT(sbyte bx, sbyte by, sbyte bz)
        {
            _glBinormal3bEXT(bx, by, bz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glBinormal3bvEXT;
        
        public static unsafe void glBinormal3bvEXT(ref sbyte v)
        {
            _glBinormal3bvEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, void> _glBinormal3dEXT;
        
        public static unsafe void glBinormal3dEXT(double bx, double by, double bz)
        {
            _glBinormal3dEXT(bx, by, bz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glBinormal3dvEXT;
        
        public static unsafe void glBinormal3dvEXT(ref double v)
        {
            _glBinormal3dvEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glBinormal3fEXT;
        
        public static unsafe void glBinormal3fEXT(float bx, float by, float bz)
        {
            _glBinormal3fEXT(bx, by, bz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glBinormal3fvEXT;
        
        public static unsafe void glBinormal3fvEXT(ref float v)
        {
            _glBinormal3fvEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glBinormal3iEXT;
        
        public static unsafe void glBinormal3iEXT(int bx, int by, int bz)
        {
            _glBinormal3iEXT(bx, by, bz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glBinormal3ivEXT;
        
        public static unsafe void glBinormal3ivEXT(ref int v)
        {
            _glBinormal3ivEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glBinormal3sEXT;
        
        public static unsafe void glBinormal3sEXT(short bx, short by, short bz)
        {
            _glBinormal3sEXT(bx, by, bz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glBinormal3svEXT;
        
        public static unsafe void glBinormal3svEXT(ref short v)
        {
            _glBinormal3svEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<BinormalPointerTypeEXT, int, IntPtr, void> _glBinormalPointerEXT;
        
        public static unsafe void glBinormalPointerEXT(BinormalPointerTypeEXT type, int stride, IntPtr pointer)
        {
            _glBinormalPointerEXT(type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, int, float, float, float, float, IntPtr, void> _glBitmap;
        
        public static unsafe void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, ref byte bitmap)
        {
            _glBitmap(width, height, xorig, yorig, xmove, ymove, (IntPtr)bitmap);
        }
        
        public static unsafe delegate*<int, int, int, int, int, int, IntPtr, void> _glBitmapxOES;
        
        public static unsafe void glBitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, ref byte bitmap)
        {
            _glBitmapxOES(width, height, xorig, yorig, xmove, ymove, (IntPtr)bitmap);
        }
        
        public static unsafe delegate*<void> _glBlendBarrier;
        
        public static unsafe void glBlendBarrier()
        {
            _glBlendBarrier();
        }
        
        public static unsafe delegate*<void> _glBlendBarrierKHR;
        
        public static unsafe void glBlendBarrierKHR()
        {
            _glBlendBarrierKHR();
        }
        
        public static unsafe delegate*<void> _glBlendBarrierNV;
        
        public static unsafe void glBlendBarrierNV()
        {
            _glBlendBarrierNV();
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glBlendColor;
        
        public static unsafe void glBlendColor(float red, float green, float blue, float alpha)
        {
            _glBlendColor(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glBlendColorEXT;
        
        public static unsafe void glBlendColorEXT(float red, float green, float blue, float alpha)
        {
            _glBlendColorEXT(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glBlendColorxOES;
        
        public static unsafe void glBlendColorxOES(int red, int green, int blue, int alpha)
        {
            _glBlendColorxOES(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<BlendEquationModeEXT, void> _glBlendEquation;
        
        public static unsafe void glBlendEquation(BlendEquationModeEXT mode)
        {
            _glBlendEquation(mode);
        }
        
        public static unsafe delegate*<BlendEquationModeEXT, void> _glBlendEquationEXT;
        
        public static unsafe void glBlendEquationEXT(BlendEquationModeEXT mode)
        {
            _glBlendEquationEXT(mode);
        }
        
        public static unsafe delegate*<uint, BlendEquationModeEXT, void> _glBlendEquationIndexedAMD;
        
        public static unsafe void glBlendEquationIndexedAMD(uint buf, BlendEquationModeEXT mode)
        {
            _glBlendEquationIndexedAMD(buf, mode);
        }
        
        public static unsafe delegate*<BlendEquationModeEXT, void> _glBlendEquationOES;
        
        public static unsafe void glBlendEquationOES(BlendEquationModeEXT mode)
        {
            _glBlendEquationOES(mode);
        }
        
        public static unsafe delegate*<BlendEquationModeEXT, BlendEquationModeEXT, void> _glBlendEquationSeparate;
        
        public static unsafe void glBlendEquationSeparate(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha)
        {
            _glBlendEquationSeparate(modeRGB, modeAlpha);
        }
        
        public static unsafe delegate*<BlendEquationModeEXT, BlendEquationModeEXT, void> _glBlendEquationSeparateEXT;
        
        public static unsafe void glBlendEquationSeparateEXT(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha)
        {
            _glBlendEquationSeparateEXT(modeRGB, modeAlpha);
        }
        
        public static unsafe delegate*<uint, BlendEquationModeEXT, BlendEquationModeEXT, void> _glBlendEquationSeparateIndexedAMD;
        
        public static unsafe void glBlendEquationSeparateIndexedAMD(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha)
        {
            _glBlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha);
        }
        
        public static unsafe delegate*<BlendEquationModeEXT, BlendEquationModeEXT, void> _glBlendEquationSeparateOES;
        
        public static unsafe void glBlendEquationSeparateOES(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha)
        {
            _glBlendEquationSeparateOES(modeRGB, modeAlpha);
        }
        
        public static unsafe delegate*<uint, BlendEquationModeEXT, BlendEquationModeEXT, void> _glBlendEquationSeparatei;
        
        public static unsafe void glBlendEquationSeparatei(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha)
        {
            _glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
        }
        
        public static unsafe delegate*<uint, BlendEquationModeEXT, BlendEquationModeEXT, void> _glBlendEquationSeparateiARB;
        
        public static unsafe void glBlendEquationSeparateiARB(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha)
        {
            _glBlendEquationSeparateiARB(buf, modeRGB, modeAlpha);
        }
        
        public static unsafe delegate*<uint, BlendEquationModeEXT, BlendEquationModeEXT, void> _glBlendEquationSeparateiEXT;
        
        public static unsafe void glBlendEquationSeparateiEXT(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha)
        {
            _glBlendEquationSeparateiEXT(buf, modeRGB, modeAlpha);
        }
        
        public static unsafe delegate*<uint, BlendEquationModeEXT, BlendEquationModeEXT, void> _glBlendEquationSeparateiOES;
        
        public static unsafe void glBlendEquationSeparateiOES(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha)
        {
            _glBlendEquationSeparateiOES(buf, modeRGB, modeAlpha);
        }
        
        public static unsafe delegate*<uint, BlendEquationModeEXT, void> _glBlendEquationi;
        
        public static unsafe void glBlendEquationi(uint buf, BlendEquationModeEXT mode)
        {
            _glBlendEquationi(buf, mode);
        }
        
        public static unsafe delegate*<uint, BlendEquationModeEXT, void> _glBlendEquationiARB;
        
        public static unsafe void glBlendEquationiARB(uint buf, BlendEquationModeEXT mode)
        {
            _glBlendEquationiARB(buf, mode);
        }
        
        public static unsafe delegate*<uint, BlendEquationModeEXT, void> _glBlendEquationiEXT;
        
        public static unsafe void glBlendEquationiEXT(uint buf, BlendEquationModeEXT mode)
        {
            _glBlendEquationiEXT(buf, mode);
        }
        
        public static unsafe delegate*<uint, BlendEquationModeEXT, void> _glBlendEquationiOES;
        
        public static unsafe void glBlendEquationiOES(uint buf, BlendEquationModeEXT mode)
        {
            _glBlendEquationiOES(buf, mode);
        }
        
        public static unsafe delegate*<BlendingFactor, BlendingFactor, void> _glBlendFunc;
        
        public static unsafe void glBlendFunc(BlendingFactor sfactor, BlendingFactor dfactor)
        {
            _glBlendFunc(sfactor, dfactor);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glBlendFuncIndexedAMD;
        
        public static unsafe void glBlendFuncIndexedAMD(uint buf, uint src, uint dst)
        {
            _glBlendFuncIndexedAMD(buf, src, dst);
        }
        
        public static unsafe delegate*<BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> _glBlendFuncSeparate;
        
        public static unsafe void glBlendFuncSeparate(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha)
        {
            _glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        
        public static unsafe delegate*<BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> _glBlendFuncSeparateEXT;
        
        public static unsafe void glBlendFuncSeparateEXT(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha)
        {
            _glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        
        public static unsafe delegate*<BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> _glBlendFuncSeparateINGR;
        
        public static unsafe void glBlendFuncSeparateINGR(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha)
        {
            _glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        
        public static unsafe delegate*<uint, BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> _glBlendFuncSeparateIndexedAMD;
        
        public static unsafe void glBlendFuncSeparateIndexedAMD(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha)
        {
            _glBlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        public static unsafe delegate*<BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> _glBlendFuncSeparateOES;
        
        public static unsafe void glBlendFuncSeparateOES(BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha)
        {
            _glBlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        public static unsafe delegate*<uint, BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> _glBlendFuncSeparatei;
        
        public static unsafe void glBlendFuncSeparatei(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha)
        {
            _glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        public static unsafe delegate*<uint, BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> _glBlendFuncSeparateiARB;
        
        public static unsafe void glBlendFuncSeparateiARB(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha)
        {
            _glBlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        public static unsafe delegate*<uint, BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> _glBlendFuncSeparateiEXT;
        
        public static unsafe void glBlendFuncSeparateiEXT(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha)
        {
            _glBlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        public static unsafe delegate*<uint, BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> _glBlendFuncSeparateiOES;
        
        public static unsafe void glBlendFuncSeparateiOES(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha)
        {
            _glBlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        public static unsafe delegate*<uint, BlendingFactor, BlendingFactor, void> _glBlendFunci;
        
        public static unsafe void glBlendFunci(uint buf, BlendingFactor src, BlendingFactor dst)
        {
            _glBlendFunci(buf, src, dst);
        }
        
        public static unsafe delegate*<uint, BlendingFactor, BlendingFactor, void> _glBlendFunciARB;
        
        public static unsafe void glBlendFunciARB(uint buf, BlendingFactor src, BlendingFactor dst)
        {
            _glBlendFunciARB(buf, src, dst);
        }
        
        public static unsafe delegate*<uint, BlendingFactor, BlendingFactor, void> _glBlendFunciEXT;
        
        public static unsafe void glBlendFunciEXT(uint buf, BlendingFactor src, BlendingFactor dst)
        {
            _glBlendFunciEXT(buf, src, dst);
        }
        
        public static unsafe delegate*<uint, BlendingFactor, BlendingFactor, void> _glBlendFunciOES;
        
        public static unsafe void glBlendFunciOES(uint buf, BlendingFactor src, BlendingFactor dst)
        {
            _glBlendFunciOES(buf, src, dst);
        }
        
        public static unsafe delegate*<uint, int, void> _glBlendParameteriNV;
        
        public static unsafe void glBlendParameteriNV(uint pname, int value)
        {
            _glBlendParameteriNV(pname, value);
        }
        
        public static unsafe delegate*<int, int, int, int, int, int, int, int, uint, BlitFramebufferFilter, void> _glBlitFramebuffer;
        
        public static unsafe void glBlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, BlitFramebufferFilter filter)
        {
            _glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        public static unsafe delegate*<int, int, int, int, int, int, int, int, uint, BlitFramebufferFilter, void> _glBlitFramebufferANGLE;
        
        public static unsafe void glBlitFramebufferANGLE(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, BlitFramebufferFilter filter)
        {
            _glBlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        public static unsafe delegate*<int, int, int, int, int, int, int, int, uint, BlitFramebufferFilter, void> _glBlitFramebufferEXT;
        
        public static unsafe void glBlitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, BlitFramebufferFilter filter)
        {
            _glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        public static unsafe delegate*<int, int, int, int, int, int, int, int, uint, BlitFramebufferFilter, void> _glBlitFramebufferNV;
        
        public static unsafe void glBlitFramebufferNV(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, BlitFramebufferFilter filter)
        {
            _glBlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        public static unsafe delegate*<uint, uint, int, int, int, int, int, int, int, int, uint, BlitFramebufferFilter, void> _glBlitNamedFramebuffer;
        
        public static unsafe void glBlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, BlitFramebufferFilter filter)
        {
            _glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        public static unsafe delegate*<uint, uint, ulong, long, void> _glBufferAddressRangeNV;
        
        public static unsafe void glBufferAddressRangeNV(uint pname, uint index, ulong address, long length)
        {
            _glBufferAddressRangeNV(pname, index, address, length);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, ulong, void> _glBufferAttachMemoryNV;
        
        public static unsafe void glBufferAttachMemoryNV(BufferTargetARB target, uint memory, ulong offset)
        {
            _glBufferAttachMemoryNV(target, memory, offset);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, IntPtr, BufferUsageARB, void> _glBufferData;
        
        public static unsafe void glBufferData(BufferTargetARB target, long size, IntPtr data, BufferUsageARB usage)
        {
            _glBufferData(target, size, (IntPtr)data, usage);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, IntPtr, BufferUsageARB, void> _glBufferDataARB;
        
        public static unsafe void glBufferDataARB(BufferTargetARB target, long size, IntPtr data, BufferUsageARB usage)
        {
            _glBufferDataARB(target, size, (IntPtr)data, usage);
        }
        
        public static unsafe delegate*<uint, long, long, byte, void> _glBufferPageCommitmentARB;
        
        public static unsafe void glBufferPageCommitmentARB(uint target, long offset, long size, byte commit)
        {
            _glBufferPageCommitmentARB(target, offset, size, commit);
        }
        
        public static unsafe delegate*<BufferStorageTarget, long, long, uint, ulong, byte, void> _glBufferPageCommitmentMemNV;
        
        public static unsafe void glBufferPageCommitmentMemNV(BufferStorageTarget target, long offset, long size, uint memory, ulong memOffset, byte commit)
        {
            _glBufferPageCommitmentMemNV(target, offset, size, memory, memOffset, commit);
        }
        
        public static unsafe delegate*<uint, uint, int, void> _glBufferParameteriAPPLE;
        
        public static unsafe void glBufferParameteriAPPLE(uint target, uint pname, int param)
        {
            _glBufferParameteriAPPLE(target, pname, param);
        }
        
        public static unsafe delegate*<BufferStorageTarget, long, IntPtr, uint, void> _glBufferStorage;
        
        public static unsafe void glBufferStorage(BufferStorageTarget target, long size, IntPtr data, uint flags)
        {
            _glBufferStorage(target, size, (IntPtr)data, flags);
        }
        
        public static unsafe delegate*<BufferStorageTarget, long, IntPtr, uint, void> _glBufferStorageEXT;
        
        public static unsafe void glBufferStorageEXT(BufferStorageTarget target, long size, IntPtr data, uint flags)
        {
            _glBufferStorageEXT(target, size, (IntPtr)data, flags);
        }
        
        public static unsafe delegate*<uint, long, long, IntPtr, uint, void> _glBufferStorageExternalEXT;
        
        public static unsafe void glBufferStorageExternalEXT(uint target, long offset, long size, IntPtr clientBuffer, uint flags)
        {
            _glBufferStorageExternalEXT(target, offset, size, clientBuffer, flags);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, uint, ulong, void> _glBufferStorageMemEXT;
        
        public static unsafe void glBufferStorageMemEXT(BufferTargetARB target, long size, uint memory, ulong offset)
        {
            _glBufferStorageMemEXT(target, size, memory, offset);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, long, IntPtr, void> _glBufferSubData;
        
        public static unsafe void glBufferSubData(BufferTargetARB target, long offset, long size, IntPtr data)
        {
            _glBufferSubData(target, offset, size, (IntPtr)data);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, long, IntPtr, void> _glBufferSubDataARB;
        
        public static unsafe void glBufferSubDataARB(BufferTargetARB target, long offset, long size, IntPtr data)
        {
            _glBufferSubDataARB(target, offset, size, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, void> _glCallCommandListNV;
        
        public static unsafe void glCallCommandListNV(uint list)
        {
            _glCallCommandListNV(list);
        }
        
        public static unsafe delegate*<uint, void> _glCallList;
        
        public static unsafe void glCallList(uint list)
        {
            _glCallList(list);
        }
        
        public static unsafe delegate*<int, ListNameType, IntPtr, void> _glCallLists;
        
        public static unsafe void glCallLists(int n, ListNameType type, IntPtr lists)
        {
            _glCallLists(n, type, (IntPtr)lists);
        }
        
        public static unsafe delegate*<FramebufferTarget, uint> _glCheckFramebufferStatus;
        
        public static unsafe uint glCheckFramebufferStatus(FramebufferTarget target)
        {
            return _glCheckFramebufferStatus(target);
        }
        
        public static unsafe delegate*<FramebufferTarget, uint> _glCheckFramebufferStatusEXT;
        
        public static unsafe uint glCheckFramebufferStatusEXT(FramebufferTarget target)
        {
            return _glCheckFramebufferStatusEXT(target);
        }
        
        public static unsafe delegate*<FramebufferTarget, uint> _glCheckFramebufferStatusOES;
        
        public static unsafe uint glCheckFramebufferStatusOES(FramebufferTarget target)
        {
            return _glCheckFramebufferStatusOES(target);
        }
        
        public static unsafe delegate*<uint, FramebufferTarget, uint> _glCheckNamedFramebufferStatus;
        
        public static unsafe uint glCheckNamedFramebufferStatus(uint framebuffer, FramebufferTarget target)
        {
            return _glCheckNamedFramebufferStatus(framebuffer, target);
        }
        
        public static unsafe delegate*<uint, FramebufferTarget, uint> _glCheckNamedFramebufferStatusEXT;
        
        public static unsafe uint glCheckNamedFramebufferStatusEXT(uint framebuffer, FramebufferTarget target)
        {
            return _glCheckNamedFramebufferStatusEXT(framebuffer, target);
        }
        
        public static unsafe delegate*<ClampColorTargetARB, ClampColorModeARB, void> _glClampColor;
        
        public static unsafe void glClampColor(ClampColorTargetARB target, ClampColorModeARB clamp)
        {
            _glClampColor(target, clamp);
        }
        
        public static unsafe delegate*<ClampColorTargetARB, ClampColorModeARB, void> _glClampColorARB;
        
        public static unsafe void glClampColorARB(ClampColorTargetARB target, ClampColorModeARB clamp)
        {
            _glClampColorARB(target, clamp);
        }
        
        public static unsafe delegate*<uint, void> _glClear;
        
        public static unsafe void glClear(uint mask)
        {
            _glClear(mask);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glClearAccum;
        
        public static unsafe void glClearAccum(float red, float green, float blue, float alpha)
        {
            _glClearAccum(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glClearAccumxOES;
        
        public static unsafe void glClearAccumxOES(int red, int green, int blue, int alpha)
        {
            _glClearAccumxOES(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, IntPtr, void> _glClearBufferData;
        
        public static unsafe void glClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearBufferData(target, internalformat, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<BufferTargetARB, SizedInternalFormat, long, long, PixelFormat, PixelType, IntPtr, void> _glClearBufferSubData;
        
        public static unsafe void glClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, long offset, long size, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearBufferSubData(target, internalformat, offset, size, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<Buffer, int, float, int, void> _glClearBufferfi;
        
        public static unsafe void glClearBufferfi(Buffer buffer, int drawbuffer, float depth, int stencil)
        {
            _glClearBufferfi(buffer, drawbuffer, depth, stencil);
        }
        
        public static unsafe delegate*<Buffer, int, IntPtr, void> _glClearBufferfv;
        
        public static unsafe void glClearBufferfv(Buffer buffer, int drawbuffer, ref float value)
        {
            _glClearBufferfv(buffer, drawbuffer, (IntPtr)value);
        }
        
        public static unsafe delegate*<Buffer, int, IntPtr, void> _glClearBufferiv;
        
        public static unsafe void glClearBufferiv(Buffer buffer, int drawbuffer, ref int value)
        {
            _glClearBufferiv(buffer, drawbuffer, (IntPtr)value);
        }
        
        public static unsafe delegate*<Buffer, int, IntPtr, void> _glClearBufferuiv;
        
        public static unsafe void glClearBufferuiv(Buffer buffer, int drawbuffer, ref uint value)
        {
            _glClearBufferuiv(buffer, drawbuffer, (IntPtr)value);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glClearColor;
        
        public static unsafe void glClearColor(float red, float green, float blue, float alpha)
        {
            _glClearColor(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glClearColorIiEXT;
        
        public static unsafe void glClearColorIiEXT(int red, int green, int blue, int alpha)
        {
            _glClearColorIiEXT(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, void> _glClearColorIuiEXT;
        
        public static unsafe void glClearColorIuiEXT(uint red, uint green, uint blue, uint alpha)
        {
            _glClearColorIuiEXT(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glClearColorx;
        
        public static unsafe void glClearColorx(int red, int green, int blue, int alpha)
        {
            _glClearColorx(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glClearColorxOES;
        
        public static unsafe void glClearColorxOES(int red, int green, int blue, int alpha)
        {
            _glClearColorxOES(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<double, void> _glClearDepth;
        
        public static unsafe void glClearDepth(double depth)
        {
            _glClearDepth(depth);
        }
        
        public static unsafe delegate*<double, void> _glClearDepthdNV;
        
        public static unsafe void glClearDepthdNV(double depth)
        {
            _glClearDepthdNV(depth);
        }
        
        public static unsafe delegate*<float, void> _glClearDepthf;
        
        public static unsafe void glClearDepthf(float d)
        {
            _glClearDepthf(d);
        }
        
        public static unsafe delegate*<float, void> _glClearDepthfOES;
        
        public static unsafe void glClearDepthfOES(float depth)
        {
            _glClearDepthfOES(depth);
        }
        
        public static unsafe delegate*<int, void> _glClearDepthx;
        
        public static unsafe void glClearDepthx(int depth)
        {
            _glClearDepthx(depth);
        }
        
        public static unsafe delegate*<int, void> _glClearDepthxOES;
        
        public static unsafe void glClearDepthxOES(int depth)
        {
            _glClearDepthxOES(depth);
        }
        
        public static unsafe delegate*<float, void> _glClearIndex;
        
        public static unsafe void glClearIndex(float c)
        {
            _glClearIndex(c);
        }
        
        public static unsafe delegate*<uint, SizedInternalFormat, PixelFormat, PixelType, IntPtr, void> _glClearNamedBufferData;
        
        public static unsafe void glClearNamedBufferData(uint buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearNamedBufferData(buffer, internalformat, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, SizedInternalFormat, PixelFormat, PixelType, IntPtr, void> _glClearNamedBufferDataEXT;
        
        public static unsafe void glClearNamedBufferDataEXT(uint buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearNamedBufferDataEXT(buffer, internalformat, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, SizedInternalFormat, long, long, PixelFormat, PixelType, IntPtr, void> _glClearNamedBufferSubData;
        
        public static unsafe void glClearNamedBufferSubData(uint buffer, SizedInternalFormat internalformat, long offset, long size, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, SizedInternalFormat, long, long, PixelFormat, PixelType, IntPtr, void> _glClearNamedBufferSubDataEXT;
        
        public static unsafe void glClearNamedBufferSubDataEXT(uint buffer, SizedInternalFormat internalformat, long offset, long size, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, Buffer, int, float, int, void> _glClearNamedFramebufferfi;
        
        public static unsafe void glClearNamedFramebufferfi(uint framebuffer, Buffer buffer, int drawbuffer, float depth, int stencil)
        {
            _glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
        }
        
        public static unsafe delegate*<uint, Buffer, int, IntPtr, void> _glClearNamedFramebufferfv;
        
        public static unsafe void glClearNamedFramebufferfv(uint framebuffer, Buffer buffer, int drawbuffer, ref float value)
        {
            _glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, Buffer, int, IntPtr, void> _glClearNamedFramebufferiv;
        
        public static unsafe void glClearNamedFramebufferiv(uint framebuffer, Buffer buffer, int drawbuffer, ref int value)
        {
            _glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, Buffer, int, IntPtr, void> _glClearNamedFramebufferuiv;
        
        public static unsafe void glClearNamedFramebufferuiv(uint framebuffer, Buffer buffer, int drawbuffer, ref uint value)
        {
            _glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glClearPixelLocalStorageuiEXT;
        
        public static unsafe void glClearPixelLocalStorageuiEXT(int offset, int n, ref uint values)
        {
            _glClearPixelLocalStorageuiEXT(offset, n, (IntPtr)values);
        }
        
        public static unsafe delegate*<int, void> _glClearStencil;
        
        public static unsafe void glClearStencil(int s)
        {
            _glClearStencil(s);
        }
        
        public static unsafe delegate*<uint, int, PixelFormat, PixelType, IntPtr, void> _glClearTexImage;
        
        public static unsafe void glClearTexImage(uint texture, int level, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearTexImage(texture, level, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, int, PixelFormat, PixelType, IntPtr, void> _glClearTexImageEXT;
        
        public static unsafe void glClearTexImageEXT(uint texture, int level, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearTexImageEXT(texture, level, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glClearTexSubImage;
        
        public static unsafe void glClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glClearTexSubImageEXT;
        
        public static unsafe void glClearTexSubImageEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureUnit, void> _glClientActiveTexture;
        
        public static unsafe void glClientActiveTexture(TextureUnit texture)
        {
            _glClientActiveTexture(texture);
        }
        
        public static unsafe delegate*<TextureUnit, void> _glClientActiveTextureARB;
        
        public static unsafe void glClientActiveTextureARB(TextureUnit texture)
        {
            _glClientActiveTextureARB(texture);
        }
        
        public static unsafe delegate*<VertexStreamATI, void> _glClientActiveVertexStreamATI;
        
        public static unsafe void glClientActiveVertexStreamATI(VertexStreamATI stream)
        {
            _glClientActiveVertexStreamATI(stream);
        }
        
        public static unsafe delegate*<uint, void> _glClientAttribDefaultEXT;
        
        public static unsafe void glClientAttribDefaultEXT(uint mask)
        {
            _glClientAttribDefaultEXT(mask);
        }
        
        public static unsafe delegate*<int, IntPtr, IntPtr, void> _glClientWaitSemaphoreui64NVX;
        
        public static unsafe void glClientWaitSemaphoreui64NVX(int fenceObjectCount, ref uint semaphoreArray, ref ulong fenceValueArray)
        {
            _glClientWaitSemaphoreui64NVX(fenceObjectCount, (IntPtr)semaphoreArray, (IntPtr)fenceValueArray);
        }
        
        public static unsafe delegate*<IntPtr, uint, ulong, uint> _glClientWaitSync;
        
        public static unsafe uint glClientWaitSync(IntPtr sync, uint flags, ulong timeout)
        {
            return _glClientWaitSync(sync, flags, timeout);
        }
        
        public static unsafe delegate*<IntPtr, uint, ulong, uint> _glClientWaitSyncAPPLE;
        
        public static unsafe uint glClientWaitSyncAPPLE(IntPtr sync, uint flags, ulong timeout)
        {
            return _glClientWaitSyncAPPLE(sync, flags, timeout);
        }
        
        public static unsafe delegate*<ClipControlOrigin, ClipControlDepth, void> _glClipControl;
        
        public static unsafe void glClipControl(ClipControlOrigin origin, ClipControlDepth depth)
        {
            _glClipControl(origin, depth);
        }
        
        public static unsafe delegate*<uint, uint, void> _glClipControlEXT;
        
        public static unsafe void glClipControlEXT(uint origin, uint depth)
        {
            _glClipControlEXT(origin, depth);
        }
        
        public static unsafe delegate*<ClipPlaneName, IntPtr, void> _glClipPlane;
        
        public static unsafe void glClipPlane(ClipPlaneName plane, ref double equation)
        {
            _glClipPlane(plane, (IntPtr)equation);
        }
        
        public static unsafe delegate*<ClipPlaneName, IntPtr, void> _glClipPlanef;
        
        public static unsafe void glClipPlanef(ClipPlaneName p, ref float eqn)
        {
            _glClipPlanef(p, (IntPtr)eqn);
        }
        
        public static unsafe delegate*<ClipPlaneName, IntPtr, void> _glClipPlanefIMG;
        
        public static unsafe void glClipPlanefIMG(ClipPlaneName p, ref float eqn)
        {
            _glClipPlanefIMG(p, (IntPtr)eqn);
        }
        
        public static unsafe delegate*<ClipPlaneName, IntPtr, void> _glClipPlanefOES;
        
        public static unsafe void glClipPlanefOES(ClipPlaneName plane, ref float equation)
        {
            _glClipPlanefOES(plane, (IntPtr)equation);
        }
        
        public static unsafe delegate*<ClipPlaneName, IntPtr, void> _glClipPlanex;
        
        public static unsafe void glClipPlanex(ClipPlaneName plane, ref int equation)
        {
            _glClipPlanex(plane, (IntPtr)equation);
        }
        
        public static unsafe delegate*<ClipPlaneName, IntPtr, void> _glClipPlanexIMG;
        
        public static unsafe void glClipPlanexIMG(ClipPlaneName p, ref int eqn)
        {
            _glClipPlanexIMG(p, (IntPtr)eqn);
        }
        
        public static unsafe delegate*<ClipPlaneName, IntPtr, void> _glClipPlanexOES;
        
        public static unsafe void glClipPlanexOES(ClipPlaneName plane, ref int equation)
        {
            _glClipPlanexOES(plane, (IntPtr)equation);
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, void> _glColor3b;
        
        public static unsafe void glColor3b(sbyte red, sbyte green, sbyte blue)
        {
            _glColor3b(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3bv;
        
        public static unsafe void glColor3bv(ref sbyte v)
        {
            _glColor3bv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, void> _glColor3d;
        
        public static unsafe void glColor3d(double red, double green, double blue)
        {
            _glColor3d(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3dv;
        
        public static unsafe void glColor3dv(ref double v)
        {
            _glColor3dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glColor3f;
        
        public static unsafe void glColor3f(float red, float green, float blue)
        {
            _glColor3f(red, green, blue);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, void> _glColor3fVertex3fSUN;
        
        public static unsafe void glColor3fVertex3fSUN(float r, float g, float b, float x, float y, float z)
        {
            _glColor3fVertex3fSUN(r, g, b, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glColor3fVertex3fvSUN;
        
        public static unsafe void glColor3fVertex3fvSUN(ref float c, ref float v)
        {
            _glColor3fVertex3fvSUN((IntPtr)c, (IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3fv;
        
        public static unsafe void glColor3fv(ref float v)
        {
            _glColor3fv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, void> _glColor3hNV;
        
        public static unsafe void glColor3hNV(ushort red, ushort green, ushort blue)
        {
            _glColor3hNV(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3hvNV;
        
        public static unsafe void glColor3hvNV(ref ushort v)
        {
            _glColor3hvNV((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glColor3i;
        
        public static unsafe void glColor3i(int red, int green, int blue)
        {
            _glColor3i(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3iv;
        
        public static unsafe void glColor3iv(ref int v)
        {
            _glColor3iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glColor3s;
        
        public static unsafe void glColor3s(short red, short green, short blue)
        {
            _glColor3s(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3sv;
        
        public static unsafe void glColor3sv(ref short v)
        {
            _glColor3sv((IntPtr)v);
        }
        
        public static unsafe delegate*<byte, byte, byte, void> _glColor3ub;
        
        public static unsafe void glColor3ub(byte red, byte green, byte blue)
        {
            _glColor3ub(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3ubv;
        
        public static unsafe void glColor3ubv(ref byte v)
        {
            _glColor3ubv((IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glColor3ui;
        
        public static unsafe void glColor3ui(uint red, uint green, uint blue)
        {
            _glColor3ui(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3uiv;
        
        public static unsafe void glColor3uiv(ref uint v)
        {
            _glColor3uiv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, void> _glColor3us;
        
        public static unsafe void glColor3us(ushort red, ushort green, ushort blue)
        {
            _glColor3us(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3usv;
        
        public static unsafe void glColor3usv(ref ushort v)
        {
            _glColor3usv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glColor3xOES;
        
        public static unsafe void glColor3xOES(int red, int green, int blue)
        {
            _glColor3xOES(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3xvOES;
        
        public static unsafe void glColor3xvOES(ref int components)
        {
            _glColor3xvOES((IntPtr)components);
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, sbyte, void> _glColor4b;
        
        public static unsafe void glColor4b(sbyte red, sbyte green, sbyte blue, sbyte alpha)
        {
            _glColor4b(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4bv;
        
        public static unsafe void glColor4bv(ref sbyte v)
        {
            _glColor4bv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, double, void> _glColor4d;
        
        public static unsafe void glColor4d(double red, double green, double blue, double alpha)
        {
            _glColor4d(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4dv;
        
        public static unsafe void glColor4dv(ref double v)
        {
            _glColor4dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glColor4f;
        
        public static unsafe void glColor4f(float red, float green, float blue, float alpha)
        {
            _glColor4f(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, float, float, float, float, void> _glColor4fNormal3fVertex3fSUN;
        
        public static unsafe void glColor4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            _glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, void> _glColor4fNormal3fVertex3fvSUN;
        
        public static unsafe void glColor4fNormal3fVertex3fvSUN(ref float c, ref float n, ref float v)
        {
            _glColor4fNormal3fVertex3fvSUN((IntPtr)c, (IntPtr)n, (IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4fv;
        
        public static unsafe void glColor4fv(ref float v)
        {
            _glColor4fv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, ushort, void> _glColor4hNV;
        
        public static unsafe void glColor4hNV(ushort red, ushort green, ushort blue, ushort alpha)
        {
            _glColor4hNV(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4hvNV;
        
        public static unsafe void glColor4hvNV(ref ushort v)
        {
            _glColor4hvNV((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glColor4i;
        
        public static unsafe void glColor4i(int red, int green, int blue, int alpha)
        {
            _glColor4i(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4iv;
        
        public static unsafe void glColor4iv(ref int v)
        {
            _glColor4iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, short, void> _glColor4s;
        
        public static unsafe void glColor4s(short red, short green, short blue, short alpha)
        {
            _glColor4s(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4sv;
        
        public static unsafe void glColor4sv(ref short v)
        {
            _glColor4sv((IntPtr)v);
        }
        
        public static unsafe delegate*<byte, byte, byte, byte, void> _glColor4ub;
        
        public static unsafe void glColor4ub(byte red, byte green, byte blue, byte alpha)
        {
            _glColor4ub(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<byte, byte, byte, byte, float, float, void> _glColor4ubVertex2fSUN;
        
        public static unsafe void glColor4ubVertex2fSUN(byte r, byte g, byte b, byte a, float x, float y)
        {
            _glColor4ubVertex2fSUN(r, g, b, a, x, y);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glColor4ubVertex2fvSUN;
        
        public static unsafe void glColor4ubVertex2fvSUN(ref byte c, ref float v)
        {
            _glColor4ubVertex2fvSUN((IntPtr)c, (IntPtr)v);
        }
        
        public static unsafe delegate*<byte, byte, byte, byte, float, float, float, void> _glColor4ubVertex3fSUN;
        
        public static unsafe void glColor4ubVertex3fSUN(byte r, byte g, byte b, byte a, float x, float y, float z)
        {
            _glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glColor4ubVertex3fvSUN;
        
        public static unsafe void glColor4ubVertex3fvSUN(ref byte c, ref float v)
        {
            _glColor4ubVertex3fvSUN((IntPtr)c, (IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4ubv;
        
        public static unsafe void glColor4ubv(ref byte v)
        {
            _glColor4ubv((IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, void> _glColor4ui;
        
        public static unsafe void glColor4ui(uint red, uint green, uint blue, uint alpha)
        {
            _glColor4ui(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4uiv;
        
        public static unsafe void glColor4uiv(ref uint v)
        {
            _glColor4uiv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, ushort, void> _glColor4us;
        
        public static unsafe void glColor4us(ushort red, ushort green, ushort blue, ushort alpha)
        {
            _glColor4us(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4usv;
        
        public static unsafe void glColor4usv(ref ushort v)
        {
            _glColor4usv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glColor4x;
        
        public static unsafe void glColor4x(int red, int green, int blue, int alpha)
        {
            _glColor4x(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glColor4xOES;
        
        public static unsafe void glColor4xOES(int red, int green, int blue, int alpha)
        {
            _glColor4xOES(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4xvOES;
        
        public static unsafe void glColor4xvOES(ref int components)
        {
            _glColor4xvOES((IntPtr)components);
        }
        
        public static unsafe delegate*<int, uint, int, void> _glColorFormatNV;
        
        public static unsafe void glColorFormatNV(int size, uint type, int stride)
        {
            _glColorFormatNV(size, type, stride);
        }
        
        public static unsafe delegate*<FragmentOpATI, uint, uint, uint, uint, uint, uint, void> _glColorFragmentOp1ATI;
        
        public static unsafe void glColorFragmentOp1ATI(FragmentOpATI op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod)
        {
            _glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
        }
        
        public static unsafe delegate*<FragmentOpATI, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _glColorFragmentOp2ATI;
        
        public static unsafe void glColorFragmentOp2ATI(FragmentOpATI op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod)
        {
            _glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        }
        
        public static unsafe delegate*<FragmentOpATI, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _glColorFragmentOp3ATI;
        
        public static unsafe void glColorFragmentOp3ATI(FragmentOpATI op, uint dst, uint dstMask, uint dstMod, uint arg1, uint arg1Rep, uint arg1Mod, uint arg2, uint arg2Rep, uint arg2Mod, uint arg3, uint arg3Rep, uint arg3Mod)
        {
            _glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        }
        
        public static unsafe delegate*<byte, byte, byte, byte, void> _glColorMask;
        
        public static unsafe void glColorMask(byte red, byte green, byte blue, byte alpha)
        {
            _glColorMask(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<uint, byte, byte, byte, byte, void> _glColorMaskIndexedEXT;
        
        public static unsafe void glColorMaskIndexedEXT(uint index, byte r, byte g, byte b, byte a)
        {
            _glColorMaskIndexedEXT(index, r, g, b, a);
        }
        
        public static unsafe delegate*<uint, byte, byte, byte, byte, void> _glColorMaski;
        
        public static unsafe void glColorMaski(uint index, byte r, byte g, byte b, byte a)
        {
            _glColorMaski(index, r, g, b, a);
        }
        
        public static unsafe delegate*<uint, byte, byte, byte, byte, void> _glColorMaskiEXT;
        
        public static unsafe void glColorMaskiEXT(uint index, byte r, byte g, byte b, byte a)
        {
            _glColorMaskiEXT(index, r, g, b, a);
        }
        
        public static unsafe delegate*<uint, byte, byte, byte, byte, void> _glColorMaskiOES;
        
        public static unsafe void glColorMaskiOES(uint index, byte r, byte g, byte b, byte a)
        {
            _glColorMaskiOES(index, r, g, b, a);
        }
        
        public static unsafe delegate*<MaterialFace, ColorMaterialParameter, void> _glColorMaterial;
        
        public static unsafe void glColorMaterial(MaterialFace face, ColorMaterialParameter mode)
        {
            _glColorMaterial(face, mode);
        }
        
        public static unsafe delegate*<ColorPointerType, uint, void> _glColorP3ui;
        
        public static unsafe void glColorP3ui(ColorPointerType type, uint color)
        {
            _glColorP3ui(type, color);
        }
        
        public static unsafe delegate*<ColorPointerType, IntPtr, void> _glColorP3uiv;
        
        public static unsafe void glColorP3uiv(ColorPointerType type, ref uint color)
        {
            _glColorP3uiv(type, (IntPtr)color);
        }
        
        public static unsafe delegate*<ColorPointerType, uint, void> _glColorP4ui;
        
        public static unsafe void glColorP4ui(ColorPointerType type, uint color)
        {
            _glColorP4ui(type, color);
        }
        
        public static unsafe delegate*<ColorPointerType, IntPtr, void> _glColorP4uiv;
        
        public static unsafe void glColorP4uiv(ColorPointerType type, ref uint color)
        {
            _glColorP4uiv(type, (IntPtr)color);
        }
        
        public static unsafe delegate*<int, ColorPointerType, int, IntPtr, void> _glColorPointer;
        
        public static unsafe void glColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
        {
            _glColorPointer(size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, ColorPointerType, int, int, IntPtr, void> _glColorPointerEXT;
        
        public static unsafe void glColorPointerEXT(int size, ColorPointerType type, int stride, int count, IntPtr pointer)
        {
            _glColorPointerEXT(size, type, stride, count, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, ColorPointerType, int, IntPtr, int, void> _glColorPointerListIBM;
        
        public static unsafe void glColorPointerListIBM(int size, ColorPointerType type, int stride, out IntPtr pointer, int ptrstride)
        {
            _glColorPointerListIBM(size, type, stride, (IntPtr)pointer, ptrstride);
        }
        
        public static unsafe delegate*<int, VertexPointerType, IntPtr, void> _glColorPointervINTEL;
        
        public static unsafe void glColorPointervINTEL(int size, VertexPointerType type, out IntPtr pointer)
        {
            _glColorPointervINTEL(size, type, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<ColorTableTarget, int, int, PixelFormat, PixelType, IntPtr, void> _glColorSubTable;
        
        public static unsafe void glColorSubTable(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
        {
            _glColorSubTable(target, start, count, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<ColorTableTarget, int, int, PixelFormat, PixelType, IntPtr, void> _glColorSubTableEXT;
        
        public static unsafe void glColorSubTableEXT(ColorTableTarget target, int start, int count, PixelFormat format, PixelType type, IntPtr data)
        {
            _glColorSubTableEXT(target, start, count, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, IntPtr, void> _glColorTable;
        
        public static unsafe void glColorTable(ColorTableTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
        {
            _glColorTable(target, internalformat, width, format, type, (IntPtr)table);
        }
        
        public static unsafe delegate*<ColorTableTarget, InternalFormat, int, PixelFormat, PixelType, IntPtr, void> _glColorTableEXT;
        
        public static unsafe void glColorTableEXT(ColorTableTarget target, InternalFormat internalFormat, int width, PixelFormat format, PixelType type, IntPtr table)
        {
            _glColorTableEXT(target, internalFormat, width, format, type, (IntPtr)table);
        }
        
        public static unsafe delegate*<ColorTableTarget, ColorTableParameterPNameSGI, IntPtr, void> _glColorTableParameterfv;
        
        public static unsafe void glColorTableParameterfv(ColorTableTarget target, ColorTableParameterPNameSGI pname, ref float @params)
        {
            _glColorTableParameterfv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ColorTableTargetSGI, ColorTableParameterPNameSGI, IntPtr, void> _glColorTableParameterfvSGI;
        
        public static unsafe void glColorTableParameterfvSGI(ColorTableTargetSGI target, ColorTableParameterPNameSGI pname, ref float @params)
        {
            _glColorTableParameterfvSGI(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ColorTableTarget, ColorTableParameterPNameSGI, IntPtr, void> _glColorTableParameteriv;
        
        public static unsafe void glColorTableParameteriv(ColorTableTarget target, ColorTableParameterPNameSGI pname, ref int @params)
        {
            _glColorTableParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ColorTableTargetSGI, ColorTableParameterPNameSGI, IntPtr, void> _glColorTableParameterivSGI;
        
        public static unsafe void glColorTableParameterivSGI(ColorTableTargetSGI target, ColorTableParameterPNameSGI pname, ref int @params)
        {
            _glColorTableParameterivSGI(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ColorTableTargetSGI, InternalFormat, int, PixelFormat, PixelType, IntPtr, void> _glColorTableSGI;
        
        public static unsafe void glColorTableSGI(ColorTableTargetSGI target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr table)
        {
            _glColorTableSGI(target, internalformat, width, format, type, (IntPtr)table);
        }
        
        public static unsafe delegate*<CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerRegisterNV, CombinerMappingNV, CombinerComponentUsageNV, void> _glCombinerInputNV;
        
        public static unsafe void glCombinerInputNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerRegisterNV input, CombinerMappingNV mapping, CombinerComponentUsageNV componentUsage)
        {
            _glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
        }
        
        public static unsafe delegate*<CombinerStageNV, CombinerPortionNV, CombinerRegisterNV, CombinerRegisterNV, CombinerRegisterNV, CombinerScaleNV, CombinerBiasNV, byte, byte, byte, void> _glCombinerOutputNV;
        
        public static unsafe void glCombinerOutputNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerRegisterNV abOutput, CombinerRegisterNV cdOutput, CombinerRegisterNV sumOutput, CombinerScaleNV scale, CombinerBiasNV bias, byte abDotProduct, byte cdDotProduct, byte muxSum)
        {
            _glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
        }
        
        public static unsafe delegate*<CombinerParameterNV, float, void> _glCombinerParameterfNV;
        
        public static unsafe void glCombinerParameterfNV(CombinerParameterNV pname, float param)
        {
            _glCombinerParameterfNV(pname, param);
        }
        
        public static unsafe delegate*<CombinerParameterNV, IntPtr, void> _glCombinerParameterfvNV;
        
        public static unsafe void glCombinerParameterfvNV(CombinerParameterNV pname, ref float @params)
        {
            _glCombinerParameterfvNV(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<CombinerParameterNV, int, void> _glCombinerParameteriNV;
        
        public static unsafe void glCombinerParameteriNV(CombinerParameterNV pname, int param)
        {
            _glCombinerParameteriNV(pname, param);
        }
        
        public static unsafe delegate*<CombinerParameterNV, IntPtr, void> _glCombinerParameterivNV;
        
        public static unsafe void glCombinerParameterivNV(CombinerParameterNV pname, ref int @params)
        {
            _glCombinerParameterivNV(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<CombinerStageNV, CombinerParameterNV, IntPtr, void> _glCombinerStageParameterfvNV;
        
        public static unsafe void glCombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, ref float @params)
        {
            _glCombinerStageParameterfvNV(stage, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, void> _glCommandListSegmentsNV;
        
        public static unsafe void glCommandListSegmentsNV(uint list, uint segments)
        {
            _glCommandListSegmentsNV(list, segments);
        }
        
        public static unsafe delegate*<uint, void> _glCompileCommandListNV;
        
        public static unsafe void glCompileCommandListNV(uint list)
        {
            _glCompileCommandListNV(list);
        }
        
        public static unsafe delegate*<uint, void> _glCompileShader;
        
        public static unsafe void glCompileShader(uint shader)
        {
            _glCompileShader(shader);
        }
        
        public static unsafe delegate*<uint, void> _glCompileShaderARB;
        
        public static unsafe void glCompileShaderARB(uint shaderObj)
        {
            _glCompileShaderARB(shaderObj);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glCompileShaderIncludeARB;
        
        public static unsafe void glCompileShaderIncludeARB(uint shader, int count, out IntPtr path, ref int length)
        {
            _glCompileShaderIncludeARB(shader, count, (IntPtr)path, (IntPtr)length);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, InternalFormat, int, int, int, IntPtr, void> _glCompressedMultiTexImage1DEXT;
        
        public static unsafe void glCompressedMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr bits)
        {
            _glCompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, (IntPtr)bits);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, IntPtr, void> _glCompressedMultiTexImage2DEXT;
        
        public static unsafe void glCompressedMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr bits)
        {
            _glCompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, (IntPtr)bits);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, int, IntPtr, void> _glCompressedMultiTexImage3DEXT;
        
        public static unsafe void glCompressedMultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
        {
            _glCompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, (IntPtr)bits);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedMultiTexSubImage1DEXT;
        
        public static unsafe void glCompressedMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr bits)
        {
            _glCompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, (IntPtr)bits);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedMultiTexSubImage2DEXT;
        
        public static unsafe void glCompressedMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr bits)
        {
            _glCompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, (IntPtr)bits);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedMultiTexSubImage3DEXT;
        
        public static unsafe void glCompressedMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr bits)
        {
            _glCompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, (IntPtr)bits);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, IntPtr, void> _glCompressedTexImage1D;
        
        public static unsafe void glCompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
        {
            _glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, IntPtr, void> _glCompressedTexImage1DARB;
        
        public static unsafe void glCompressedTexImage1DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
        {
            _glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, IntPtr, void> _glCompressedTexImage2D;
        
        public static unsafe void glCompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            _glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, IntPtr, void> _glCompressedTexImage2DARB;
        
        public static unsafe void glCompressedTexImage2DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            _glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, int, IntPtr, void> _glCompressedTexImage3D;
        
        public static unsafe void glCompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            _glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, int, IntPtr, void> _glCompressedTexImage3DARB;
        
        public static unsafe void glCompressedTexImage3DARB(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            _glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, int, IntPtr, void> _glCompressedTexImage3DOES;
        
        public static unsafe void glCompressedTexImage3DOES(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            _glCompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTexSubImage1D;
        
        public static unsafe void glCompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTexSubImage1DARB;
        
        public static unsafe void glCompressedTexSubImage1DARB(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTexSubImage2D;
        
        public static unsafe void glCompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTexSubImage2DARB;
        
        public static unsafe void glCompressedTexSubImage2DARB(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTexSubImage3D;
        
        public static unsafe void glCompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTexSubImage3DARB;
        
        public static unsafe void glCompressedTexSubImage3DARB(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTexSubImage3DOES;
        
        public static unsafe void glCompressedTexSubImage3DOES(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, InternalFormat, int, int, int, IntPtr, void> _glCompressedTextureImage1DEXT;
        
        public static unsafe void glCompressedTextureImage1DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr bits)
        {
            _glCompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, (IntPtr)bits);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, InternalFormat, int, int, int, int, IntPtr, void> _glCompressedTextureImage2DEXT;
        
        public static unsafe void glCompressedTextureImage2DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr bits)
        {
            _glCompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, (IntPtr)bits);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, InternalFormat, int, int, int, int, int, IntPtr, void> _glCompressedTextureImage3DEXT;
        
        public static unsafe void glCompressedTextureImage3DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr bits)
        {
            _glCompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, (IntPtr)bits);
        }
        
        public static unsafe delegate*<uint, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTextureSubImage1D;
        
        public static unsafe void glCompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTextureSubImage1DEXT;
        
        public static unsafe void glCompressedTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr bits)
        {
            _glCompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, (IntPtr)bits);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTextureSubImage2D;
        
        public static unsafe void glCompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTextureSubImage2DEXT;
        
        public static unsafe void glCompressedTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr bits)
        {
            _glCompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, (IntPtr)bits);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTextureSubImage3D;
        
        public static unsafe void glCompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTextureSubImage3DEXT;
        
        public static unsafe void glCompressedTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr bits)
        {
            _glCompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, (IntPtr)bits);
        }
        
        public static unsafe delegate*<uint, float, void> _glConservativeRasterParameterfNV;
        
        public static unsafe void glConservativeRasterParameterfNV(uint pname, float value)
        {
            _glConservativeRasterParameterfNV(pname, value);
        }
        
        public static unsafe delegate*<uint, int, void> _glConservativeRasterParameteriNV;
        
        public static unsafe void glConservativeRasterParameteriNV(uint pname, int param)
        {
            _glConservativeRasterParameteriNV(pname, param);
        }
        
        public static unsafe delegate*<ConvolutionTarget, InternalFormat, int, PixelFormat, PixelType, IntPtr, void> _glConvolutionFilter1D;
        
        public static unsafe void glConvolutionFilter1D(ConvolutionTarget target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
        {
            _glConvolutionFilter1D(target, internalformat, width, format, type, (IntPtr)image);
        }
        
        public static unsafe delegate*<ConvolutionTargetEXT, InternalFormat, int, PixelFormat, PixelType, IntPtr, void> _glConvolutionFilter1DEXT;
        
        public static unsafe void glConvolutionFilter1DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int width, PixelFormat format, PixelType type, IntPtr image)
        {
            _glConvolutionFilter1DEXT(target, internalformat, width, format, type, (IntPtr)image);
        }
        
        public static unsafe delegate*<ConvolutionTarget, InternalFormat, int, int, PixelFormat, PixelType, IntPtr, void> _glConvolutionFilter2D;
        
        public static unsafe void glConvolutionFilter2D(ConvolutionTarget target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
        {
            _glConvolutionFilter2D(target, internalformat, width, height, format, type, (IntPtr)image);
        }
        
        public static unsafe delegate*<ConvolutionTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, IntPtr, void> _glConvolutionFilter2DEXT;
        
        public static unsafe void glConvolutionFilter2DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr image)
        {
            _glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, (IntPtr)image);
        }
        
        public static unsafe delegate*<ConvolutionTarget, ConvolutionParameterEXT, float, void> _glConvolutionParameterf;
        
        public static unsafe void glConvolutionParameterf(ConvolutionTarget target, ConvolutionParameterEXT pname, float @params)
        {
            _glConvolutionParameterf(target, pname, @params);
        }
        
        public static unsafe delegate*<ConvolutionTargetEXT, ConvolutionParameterEXT, float, void> _glConvolutionParameterfEXT;
        
        public static unsafe void glConvolutionParameterfEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, float @params)
        {
            _glConvolutionParameterfEXT(target, pname, @params);
        }
        
        public static unsafe delegate*<ConvolutionTarget, ConvolutionParameterEXT, IntPtr, void> _glConvolutionParameterfv;
        
        public static unsafe void glConvolutionParameterfv(ConvolutionTarget target, ConvolutionParameterEXT pname, ref float @params)
        {
            _glConvolutionParameterfv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ConvolutionTargetEXT, ConvolutionParameterEXT, IntPtr, void> _glConvolutionParameterfvEXT;
        
        public static unsafe void glConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, ref float @params)
        {
            _glConvolutionParameterfvEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ConvolutionTarget, ConvolutionParameterEXT, int, void> _glConvolutionParameteri;
        
        public static unsafe void glConvolutionParameteri(ConvolutionTarget target, ConvolutionParameterEXT pname, int @params)
        {
            _glConvolutionParameteri(target, pname, @params);
        }
        
        public static unsafe delegate*<ConvolutionTargetEXT, ConvolutionParameterEXT, int, void> _glConvolutionParameteriEXT;
        
        public static unsafe void glConvolutionParameteriEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, int @params)
        {
            _glConvolutionParameteriEXT(target, pname, @params);
        }
        
        public static unsafe delegate*<ConvolutionTarget, ConvolutionParameterEXT, IntPtr, void> _glConvolutionParameteriv;
        
        public static unsafe void glConvolutionParameteriv(ConvolutionTarget target, ConvolutionParameterEXT pname, ref int @params)
        {
            _glConvolutionParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ConvolutionTargetEXT, ConvolutionParameterEXT, IntPtr, void> _glConvolutionParameterivEXT;
        
        public static unsafe void glConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, ref int @params)
        {
            _glConvolutionParameterivEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ConvolutionTargetEXT, ConvolutionParameterEXT, int, void> _glConvolutionParameterxOES;
        
        public static unsafe void glConvolutionParameterxOES(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, int param)
        {
            _glConvolutionParameterxOES(target, pname, param);
        }
        
        public static unsafe delegate*<ConvolutionTargetEXT, ConvolutionParameterEXT, IntPtr, void> _glConvolutionParameterxvOES;
        
        public static unsafe void glConvolutionParameterxvOES(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, ref int @params)
        {
            _glConvolutionParameterxvOES(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<CopyBufferSubDataTarget, CopyBufferSubDataTarget, long, long, long, void> _glCopyBufferSubData;
        
        public static unsafe void glCopyBufferSubData(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, long readOffset, long writeOffset, long size)
        {
            _glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
        }
        
        public static unsafe delegate*<CopyBufferSubDataTarget, CopyBufferSubDataTarget, long, long, long, void> _glCopyBufferSubDataNV;
        
        public static unsafe void glCopyBufferSubDataNV(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, long readOffset, long writeOffset, long size)
        {
            _glCopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size);
        }
        
        public static unsafe delegate*<ColorTableTarget, int, int, int, int, void> _glCopyColorSubTable;
        
        public static unsafe void glCopyColorSubTable(ColorTableTarget target, int start, int x, int y, int width)
        {
            _glCopyColorSubTable(target, start, x, y, width);
        }
        
        public static unsafe delegate*<ColorTableTarget, int, int, int, int, void> _glCopyColorSubTableEXT;
        
        public static unsafe void glCopyColorSubTableEXT(ColorTableTarget target, int start, int x, int y, int width)
        {
            _glCopyColorSubTableEXT(target, start, x, y, width);
        }
        
        public static unsafe delegate*<ColorTableTarget, InternalFormat, int, int, int, void> _glCopyColorTable;
        
        public static unsafe void glCopyColorTable(ColorTableTarget target, InternalFormat internalformat, int x, int y, int width)
        {
            _glCopyColorTable(target, internalformat, x, y, width);
        }
        
        public static unsafe delegate*<ColorTableTargetSGI, InternalFormat, int, int, int, void> _glCopyColorTableSGI;
        
        public static unsafe void glCopyColorTableSGI(ColorTableTargetSGI target, InternalFormat internalformat, int x, int y, int width)
        {
            _glCopyColorTableSGI(target, internalformat, x, y, width);
        }
        
        public static unsafe delegate*<ConvolutionTarget, InternalFormat, int, int, int, void> _glCopyConvolutionFilter1D;
        
        public static unsafe void glCopyConvolutionFilter1D(ConvolutionTarget target, InternalFormat internalformat, int x, int y, int width)
        {
            _glCopyConvolutionFilter1D(target, internalformat, x, y, width);
        }
        
        public static unsafe delegate*<ConvolutionTargetEXT, InternalFormat, int, int, int, void> _glCopyConvolutionFilter1DEXT;
        
        public static unsafe void glCopyConvolutionFilter1DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int x, int y, int width)
        {
            _glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
        }
        
        public static unsafe delegate*<ConvolutionTarget, InternalFormat, int, int, int, int, void> _glCopyConvolutionFilter2D;
        
        public static unsafe void glCopyConvolutionFilter2D(ConvolutionTarget target, InternalFormat internalformat, int x, int y, int width, int height)
        {
            _glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
        }
        
        public static unsafe delegate*<ConvolutionTargetEXT, InternalFormat, int, int, int, int, void> _glCopyConvolutionFilter2DEXT;
        
        public static unsafe void glCopyConvolutionFilter2DEXT(ConvolutionTargetEXT target, InternalFormat internalformat, int x, int y, int width, int height)
        {
            _glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
        }
        
        public static unsafe delegate*<uint, CopyImageSubDataTarget, int, int, int, int, uint, CopyImageSubDataTarget, int, int, int, int, int, int, int, void> _glCopyImageSubData;
        
        public static unsafe void glCopyImageSubData(uint srcName, CopyImageSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyImageSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            _glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        public static unsafe delegate*<uint, CopyBufferSubDataTarget, int, int, int, int, uint, CopyBufferSubDataTarget, int, int, int, int, int, int, int, void> _glCopyImageSubDataEXT;
        
        public static unsafe void glCopyImageSubDataEXT(uint srcName, CopyBufferSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyBufferSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            _glCopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        public static unsafe delegate*<uint, CopyBufferSubDataTarget, int, int, int, int, uint, CopyBufferSubDataTarget, int, int, int, int, int, int, int, void> _glCopyImageSubDataNV;
        
        public static unsafe void glCopyImageSubDataNV(uint srcName, CopyBufferSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyBufferSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
        {
            _glCopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        }
        
        public static unsafe delegate*<uint, CopyBufferSubDataTarget, int, int, int, int, uint, CopyBufferSubDataTarget, int, int, int, int, int, int, int, void> _glCopyImageSubDataOES;
        
        public static unsafe void glCopyImageSubDataOES(uint srcName, CopyBufferSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyBufferSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            _glCopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, void> _glCopyMultiTexImage1DEXT;
        
        public static unsafe void glCopyMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border)
        {
            _glCopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, InternalFormat, int, int, int, int, int, void> _glCopyMultiTexImage2DEXT;
        
        public static unsafe void glCopyMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border)
        {
            _glCopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, int, int, int, int, void> _glCopyMultiTexSubImage1DEXT;
        
        public static unsafe void glCopyMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int x, int y, int width)
        {
            _glCopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, int, int, int, int, int, int, void> _glCopyMultiTexSubImage2DEXT;
        
        public static unsafe void glCopyMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _glCopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, int, int, int, int, int, int, int, void> _glCopyMultiTexSubImage3DEXT;
        
        public static unsafe void glCopyMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _glCopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<uint, uint, long, long, long, void> _glCopyNamedBufferSubData;
        
        public static unsafe void glCopyNamedBufferSubData(uint readBuffer, uint writeBuffer, long readOffset, long writeOffset, long size)
        {
            _glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
        }
        
        public static unsafe delegate*<uint, uint, void> _glCopyPathNV;
        
        public static unsafe void glCopyPathNV(uint resultPath, uint srcPath)
        {
            _glCopyPathNV(resultPath, srcPath);
        }
        
        public static unsafe delegate*<int, int, int, int, PixelCopyType, void> _glCopyPixels;
        
        public static unsafe void glCopyPixels(int x, int y, int width, int height, PixelCopyType type)
        {
            _glCopyPixels(x, y, width, height, type);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, void> _glCopyTexImage1D;
        
        public static unsafe void glCopyTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border)
        {
            _glCopyTexImage1D(target, level, internalformat, x, y, width, border);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, void> _glCopyTexImage1DEXT;
        
        public static unsafe void glCopyTexImage1DEXT(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border)
        {
            _glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, int, void> _glCopyTexImage2D;
        
        public static unsafe void glCopyTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border)
        {
            _glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, int, void> _glCopyTexImage2DEXT;
        
        public static unsafe void glCopyTexImage2DEXT(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border)
        {
            _glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, void> _glCopyTexSubImage1D;
        
        public static unsafe void glCopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width)
        {
            _glCopyTexSubImage1D(target, level, xoffset, x, y, width);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, void> _glCopyTexSubImage1DEXT;
        
        public static unsafe void glCopyTexSubImage1DEXT(TextureTarget target, int level, int xoffset, int x, int y, int width)
        {
            _glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, void> _glCopyTexSubImage2D;
        
        public static unsafe void glCopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, void> _glCopyTexSubImage2DEXT;
        
        public static unsafe void glCopyTexSubImage2DEXT(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, int, void> _glCopyTexSubImage3D;
        
        public static unsafe void glCopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, int, void> _glCopyTexSubImage3DEXT;
        
        public static unsafe void glCopyTexSubImage3DEXT(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, int, void> _glCopyTexSubImage3DOES;
        
        public static unsafe void glCopyTexSubImage3DOES(uint target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _glCopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, InternalFormat, int, int, int, int, void> _glCopyTextureImage1DEXT;
        
        public static unsafe void glCopyTextureImage1DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border)
        {
            _glCopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, InternalFormat, int, int, int, int, int, void> _glCopyTextureImage2DEXT;
        
        public static unsafe void glCopyTextureImage2DEXT(uint texture, TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border)
        {
            _glCopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border);
        }
        
        public static unsafe delegate*<uint, uint, int, int, void> _glCopyTextureLevelsAPPLE;
        
        public static unsafe void glCopyTextureLevelsAPPLE(uint destinationTexture, uint sourceTexture, int sourceBaseLevel, int sourceLevelCount)
        {
            _glCopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, void> _glCopyTextureSubImage1D;
        
        public static unsafe void glCopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width)
        {
            _glCopyTextureSubImage1D(texture, level, xoffset, x, y, width);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, int, int, void> _glCopyTextureSubImage1DEXT;
        
        public static unsafe void glCopyTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int x, int y, int width)
        {
            _glCopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, void> _glCopyTextureSubImage2D;
        
        public static unsafe void glCopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, int, int, int, int, void> _glCopyTextureSubImage2DEXT;
        
        public static unsafe void glCopyTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _glCopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, int, void> _glCopyTextureSubImage3D;
        
        public static unsafe void glCopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, int, int, int, int, int, void> _glCopyTextureSubImage3DEXT;
        
        public static unsafe void glCopyTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _glCopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<int, PathElementType, IntPtr, uint, PathCoverMode, PathTransformType, IntPtr, void> _glCoverFillPathInstancedNV;
        
        public static unsafe void glCoverFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, ref float transformValues)
        {
            _glCoverFillPathInstancedNV(numPaths, pathNameType, (IntPtr)paths, pathBase, coverMode, transformType, (IntPtr)transformValues);
        }
        
        public static unsafe delegate*<uint, PathCoverMode, void> _glCoverFillPathNV;
        
        public static unsafe void glCoverFillPathNV(uint path, PathCoverMode coverMode)
        {
            _glCoverFillPathNV(path, coverMode);
        }
        
        public static unsafe delegate*<int, PathElementType, IntPtr, uint, PathCoverMode, PathTransformType, IntPtr, void> _glCoverStrokePathInstancedNV;
        
        public static unsafe void glCoverStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathCoverMode coverMode, PathTransformType transformType, ref float transformValues)
        {
            _glCoverStrokePathInstancedNV(numPaths, pathNameType, (IntPtr)paths, pathBase, coverMode, transformType, (IntPtr)transformValues);
        }
        
        public static unsafe delegate*<uint, PathCoverMode, void> _glCoverStrokePathNV;
        
        public static unsafe void glCoverStrokePathNV(uint path, PathCoverMode coverMode)
        {
            _glCoverStrokePathNV(path, coverMode);
        }
        
        public static unsafe delegate*<byte, void> _glCoverageMaskNV;
        
        public static unsafe void glCoverageMaskNV(byte mask)
        {
            _glCoverageMaskNV(mask);
        }
        
        public static unsafe delegate*<uint, void> _glCoverageModulationNV;
        
        public static unsafe void glCoverageModulationNV(uint components)
        {
            _glCoverageModulationNV(components);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCoverageModulationTableNV;
        
        public static unsafe void glCoverageModulationTableNV(int n, ref float v)
        {
            _glCoverageModulationTableNV(n, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, void> _glCoverageOperationNV;
        
        public static unsafe void glCoverageOperationNV(uint operation)
        {
            _glCoverageOperationNV(operation);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateBuffers;
        
        public static unsafe void glCreateBuffers(int n, ref uint buffers)
        {
            _glCreateBuffers(n, (IntPtr)buffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateCommandListsNV;
        
        public static unsafe void glCreateCommandListsNV(int n, ref uint lists)
        {
            _glCreateCommandListsNV(n, (IntPtr)lists);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateFramebuffers;
        
        public static unsafe void glCreateFramebuffers(int n, ref uint framebuffers)
        {
            _glCreateFramebuffers(n, (IntPtr)framebuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateMemoryObjectsEXT;
        
        public static unsafe void glCreateMemoryObjectsEXT(int n, ref uint memoryObjects)
        {
            _glCreateMemoryObjectsEXT(n, (IntPtr)memoryObjects);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glCreatePerfQueryINTEL;
        
        public static unsafe void glCreatePerfQueryINTEL(uint queryId, ref uint queryHandle)
        {
            _glCreatePerfQueryINTEL(queryId, (IntPtr)queryHandle);
        }
        
        public static unsafe delegate*<uint> _glCreateProgram;
        
        public static unsafe uint glCreateProgram()
        {
            return _glCreateProgram();
        }
        
        public static unsafe delegate*<uint> _glCreateProgramObjectARB;
        
        public static unsafe uint glCreateProgramObjectARB()
        {
            return _glCreateProgramObjectARB();
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateProgramPipelines;
        
        public static unsafe void glCreateProgramPipelines(int n, ref uint pipelines)
        {
            _glCreateProgramPipelines(n, (IntPtr)pipelines);
        }
        
        public static unsafe delegate*<uint> _glCreateProgressFenceNVX;
        
        public static unsafe uint glCreateProgressFenceNVX()
        {
            return _glCreateProgressFenceNVX();
        }
        
        public static unsafe delegate*<QueryTarget, int, IntPtr, void> _glCreateQueries;
        
        public static unsafe void glCreateQueries(QueryTarget target, int n, ref uint ids)
        {
            _glCreateQueries(target, n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateRenderbuffers;
        
        public static unsafe void glCreateRenderbuffers(int n, ref uint renderbuffers)
        {
            _glCreateRenderbuffers(n, (IntPtr)renderbuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateSamplers;
        
        public static unsafe void glCreateSamplers(int n, ref uint samplers)
        {
            _glCreateSamplers(n, (IntPtr)samplers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateSemaphoresNV;
        
        public static unsafe void glCreateSemaphoresNV(int n, ref uint semaphores)
        {
            _glCreateSemaphoresNV(n, (IntPtr)semaphores);
        }
        
        public static unsafe delegate*<ShaderType, uint> _glCreateShader;
        
        public static unsafe uint glCreateShader(ShaderType type)
        {
            return _glCreateShader(type);
        }
        
        public static unsafe delegate*<ShaderType, uint> _glCreateShaderObjectARB;
        
        public static unsafe uint glCreateShaderObjectARB(ShaderType shaderType)
        {
            return _glCreateShaderObjectARB(shaderType);
        }
        
        public static unsafe delegate*<ShaderType, IntPtr, uint> _glCreateShaderProgramEXT;
        
        public static unsafe uint glCreateShaderProgramEXT(ShaderType type, ref sbyte @string)
        {
            return _glCreateShaderProgramEXT(type, (IntPtr)@string);
        }
        
        public static unsafe delegate*<ShaderType, int, IntPtr, uint> _glCreateShaderProgramv;
        
        public static unsafe uint glCreateShaderProgramv(ShaderType type, int count, out IntPtr strings)
        {
            return _glCreateShaderProgramv(type, count, (IntPtr)strings);
        }
        
        public static unsafe delegate*<ShaderType, int, IntPtr, uint> _glCreateShaderProgramvEXT;
        
        public static unsafe uint glCreateShaderProgramvEXT(ShaderType type, int count, out IntPtr strings)
        {
            return _glCreateShaderProgramvEXT(type, count, (IntPtr)strings);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateStatesNV;
        
        public static unsafe void glCreateStatesNV(int n, ref uint states)
        {
            _glCreateStatesNV(n, (IntPtr)states);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, uint, IntPtr> _glCreateSyncFromCLeventARB;
        
        public static unsafe IntPtr glCreateSyncFromCLeventARB(IntPtr context, IntPtr @event, uint flags)
        {
            return _glCreateSyncFromCLeventARB((IntPtr)context, (IntPtr)@event, flags);
        }
        
        public static unsafe delegate*<TextureTarget, int, IntPtr, void> _glCreateTextures;
        
        public static unsafe void glCreateTextures(TextureTarget target, int n, ref uint textures)
        {
            _glCreateTextures(target, n, (IntPtr)textures);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateTransformFeedbacks;
        
        public static unsafe void glCreateTransformFeedbacks(int n, ref uint ids)
        {
            _glCreateTransformFeedbacks(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateVertexArrays;
        
        public static unsafe void glCreateVertexArrays(int n, ref uint arrays)
        {
            _glCreateVertexArrays(n, (IntPtr)arrays);
        }
        
        public static unsafe delegate*<CullFaceMode, void> _glCullFace;
        
        public static unsafe void glCullFace(CullFaceMode mode)
        {
            _glCullFace(mode);
        }
        
        public static unsafe delegate*<CullParameterEXT, IntPtr, void> _glCullParameterdvEXT;
        
        public static unsafe void glCullParameterdvEXT(CullParameterEXT pname, ref double @params)
        {
            _glCullParameterdvEXT(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<CullParameterEXT, IntPtr, void> _glCullParameterfvEXT;
        
        public static unsafe void glCullParameterfvEXT(CullParameterEXT pname, ref float @params)
        {
            _glCullParameterfvEXT(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<int, void> _glCurrentPaletteMatrixARB;
        
        public static unsafe void glCurrentPaletteMatrixARB(int index)
        {
            _glCurrentPaletteMatrixARB(index);
        }
        
        public static unsafe delegate*<uint, void> _glCurrentPaletteMatrixOES;
        
        public static unsafe void glCurrentPaletteMatrixOES(uint matrixpaletteindex)
        {
            _glCurrentPaletteMatrixOES(matrixpaletteindex);
        }
        
        public static unsafe delegate*<GLDEBUGPROC, IntPtr, void> _glDebugMessageCallback;
        
        public static unsafe void glDebugMessageCallback(GLDEBUGPROC callback, IntPtr userParam)
        {
            _glDebugMessageCallback(callback, (IntPtr)userParam);
        }
        
        public static unsafe delegate*<GLDEBUGPROCAMD, IntPtr, void> _glDebugMessageCallbackAMD;
        
        public static unsafe void glDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, IntPtr userParam)
        {
            _glDebugMessageCallbackAMD(callback, (IntPtr)userParam);
        }
        
        public static unsafe delegate*<GLDEBUGPROCARB, IntPtr, void> _glDebugMessageCallbackARB;
        
        public static unsafe void glDebugMessageCallbackARB(GLDEBUGPROCARB callback, IntPtr userParam)
        {
            _glDebugMessageCallbackARB(callback, (IntPtr)userParam);
        }
        
        public static unsafe delegate*<GLDEBUGPROCKHR, IntPtr, void> _glDebugMessageCallbackKHR;
        
        public static unsafe void glDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, IntPtr userParam)
        {
            _glDebugMessageCallbackKHR(callback, (IntPtr)userParam);
        }
        
        public static unsafe delegate*<DebugSource, DebugType, DebugSeverity, int, IntPtr, byte, void> _glDebugMessageControl;
        
        public static unsafe void glDebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, ref uint ids, byte enabled)
        {
            _glDebugMessageControl(source, type, severity, count, (IntPtr)ids, enabled);
        }
        
        public static unsafe delegate*<DebugSource, DebugType, DebugSeverity, int, IntPtr, byte, void> _glDebugMessageControlARB;
        
        public static unsafe void glDebugMessageControlARB(DebugSource source, DebugType type, DebugSeverity severity, int count, ref uint ids, byte enabled)
        {
            _glDebugMessageControlARB(source, type, severity, count, (IntPtr)ids, enabled);
        }
        
        public static unsafe delegate*<DebugSource, DebugType, DebugSeverity, int, IntPtr, byte, void> _glDebugMessageControlKHR;
        
        public static unsafe void glDebugMessageControlKHR(DebugSource source, DebugType type, DebugSeverity severity, int count, ref uint ids, byte enabled)
        {
            _glDebugMessageControlKHR(source, type, severity, count, (IntPtr)ids, enabled);
        }
        
        public static unsafe delegate*<uint, DebugSeverity, int, IntPtr, byte, void> _glDebugMessageEnableAMD;
        
        public static unsafe void glDebugMessageEnableAMD(uint category, DebugSeverity severity, int count, ref uint ids, byte enabled)
        {
            _glDebugMessageEnableAMD(category, severity, count, (IntPtr)ids, enabled);
        }
        
        public static unsafe delegate*<DebugSource, DebugType, uint, DebugSeverity, int, IntPtr, void> _glDebugMessageInsert;
        
        public static unsafe void glDebugMessageInsert(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, ref sbyte buf)
        {
            _glDebugMessageInsert(source, type, id, severity, length, (IntPtr)buf);
        }
        
        public static unsafe delegate*<uint, DebugSeverity, uint, int, IntPtr, void> _glDebugMessageInsertAMD;
        
        public static unsafe void glDebugMessageInsertAMD(uint category, DebugSeverity severity, uint id, int length, ref sbyte buf)
        {
            _glDebugMessageInsertAMD(category, severity, id, length, (IntPtr)buf);
        }
        
        public static unsafe delegate*<DebugSource, DebugType, uint, DebugSeverity, int, IntPtr, void> _glDebugMessageInsertARB;
        
        public static unsafe void glDebugMessageInsertARB(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, ref sbyte buf)
        {
            _glDebugMessageInsertARB(source, type, id, severity, length, (IntPtr)buf);
        }
        
        public static unsafe delegate*<DebugSource, DebugType, uint, DebugSeverity, int, IntPtr, void> _glDebugMessageInsertKHR;
        
        public static unsafe void glDebugMessageInsertKHR(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, ref sbyte buf)
        {
            _glDebugMessageInsertKHR(source, type, id, severity, length, (IntPtr)buf);
        }
        
        public static unsafe delegate*<uint, void> _glDeformSGIX;
        
        public static unsafe void glDeformSGIX(uint mask)
        {
            _glDeformSGIX(mask);
        }
        
        public static unsafe delegate*<FfdTargetSGIX, double, double, int, int, double, double, int, int, double, double, int, int, IntPtr, void> _glDeformationMap3dSGIX;
        
        public static unsafe void glDeformationMap3dSGIX(FfdTargetSGIX target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, ref double points)
        {
            _glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, (IntPtr)points);
        }
        
        public static unsafe delegate*<FfdTargetSGIX, float, float, int, int, float, float, int, int, float, float, int, int, IntPtr, void> _glDeformationMap3fSGIX;
        
        public static unsafe void glDeformationMap3fSGIX(FfdTargetSGIX target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, ref float points)
        {
            _glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, (IntPtr)points);
        }
        
        public static unsafe delegate*<uint, int, void> _glDeleteAsyncMarkersSGIX;
        
        public static unsafe void glDeleteAsyncMarkersSGIX(uint marker, int range)
        {
            _glDeleteAsyncMarkersSGIX(marker, range);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteBuffers;
        
        public static unsafe void glDeleteBuffers(int n, ref uint buffers)
        {
            _glDeleteBuffers(n, (IntPtr)buffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteBuffersARB;
        
        public static unsafe void glDeleteBuffersARB(int n, ref uint buffers)
        {
            _glDeleteBuffersARB(n, (IntPtr)buffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteCommandListsNV;
        
        public static unsafe void glDeleteCommandListsNV(int n, ref uint lists)
        {
            _glDeleteCommandListsNV(n, (IntPtr)lists);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteFencesAPPLE;
        
        public static unsafe void glDeleteFencesAPPLE(int n, ref uint fences)
        {
            _glDeleteFencesAPPLE(n, (IntPtr)fences);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteFencesNV;
        
        public static unsafe void glDeleteFencesNV(int n, ref uint fences)
        {
            _glDeleteFencesNV(n, (IntPtr)fences);
        }
        
        public static unsafe delegate*<uint, void> _glDeleteFragmentShaderATI;
        
        public static unsafe void glDeleteFragmentShaderATI(uint id)
        {
            _glDeleteFragmentShaderATI(id);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteFramebuffers;
        
        public static unsafe void glDeleteFramebuffers(int n, ref uint framebuffers)
        {
            _glDeleteFramebuffers(n, (IntPtr)framebuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteFramebuffersEXT;
        
        public static unsafe void glDeleteFramebuffersEXT(int n, ref uint framebuffers)
        {
            _glDeleteFramebuffersEXT(n, (IntPtr)framebuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteFramebuffersOES;
        
        public static unsafe void glDeleteFramebuffersOES(int n, ref uint framebuffers)
        {
            _glDeleteFramebuffersOES(n, (IntPtr)framebuffers);
        }
        
        public static unsafe delegate*<uint, int, void> _glDeleteLists;
        
        public static unsafe void glDeleteLists(uint list, int range)
        {
            _glDeleteLists(list, range);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteMemoryObjectsEXT;
        
        public static unsafe void glDeleteMemoryObjectsEXT(int n, ref uint memoryObjects)
        {
            _glDeleteMemoryObjectsEXT(n, (IntPtr)memoryObjects);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteNamedStringARB;
        
        public static unsafe void glDeleteNamedStringARB(int namelen, ref sbyte name)
        {
            _glDeleteNamedStringARB(namelen, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glDeleteNamesAMD;
        
        public static unsafe void glDeleteNamesAMD(uint identifier, uint num, ref uint names)
        {
            _glDeleteNamesAMD(identifier, num, (IntPtr)names);
        }
        
        public static unsafe delegate*<uint, void> _glDeleteObjectARB;
        
        public static unsafe void glDeleteObjectARB(uint obj)
        {
            _glDeleteObjectARB(obj);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteOcclusionQueriesNV;
        
        public static unsafe void glDeleteOcclusionQueriesNV(int n, ref uint ids)
        {
            _glDeleteOcclusionQueriesNV(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<uint, int, void> _glDeletePathsNV;
        
        public static unsafe void glDeletePathsNV(uint path, int range)
        {
            _glDeletePathsNV(path, range);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeletePerfMonitorsAMD;
        
        public static unsafe void glDeletePerfMonitorsAMD(int n, ref uint monitors)
        {
            _glDeletePerfMonitorsAMD(n, (IntPtr)monitors);
        }
        
        public static unsafe delegate*<uint, void> _glDeletePerfQueryINTEL;
        
        public static unsafe void glDeletePerfQueryINTEL(uint queryHandle)
        {
            _glDeletePerfQueryINTEL(queryHandle);
        }
        
        public static unsafe delegate*<uint, void> _glDeleteProgram;
        
        public static unsafe void glDeleteProgram(uint program)
        {
            _glDeleteProgram(program);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteProgramPipelines;
        
        public static unsafe void glDeleteProgramPipelines(int n, ref uint pipelines)
        {
            _glDeleteProgramPipelines(n, (IntPtr)pipelines);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteProgramPipelinesEXT;
        
        public static unsafe void glDeleteProgramPipelinesEXT(int n, ref uint pipelines)
        {
            _glDeleteProgramPipelinesEXT(n, (IntPtr)pipelines);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteProgramsARB;
        
        public static unsafe void glDeleteProgramsARB(int n, ref uint programs)
        {
            _glDeleteProgramsARB(n, (IntPtr)programs);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteProgramsNV;
        
        public static unsafe void glDeleteProgramsNV(int n, ref uint programs)
        {
            _glDeleteProgramsNV(n, (IntPtr)programs);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteQueries;
        
        public static unsafe void glDeleteQueries(int n, ref uint ids)
        {
            _glDeleteQueries(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteQueriesARB;
        
        public static unsafe void glDeleteQueriesARB(int n, ref uint ids)
        {
            _glDeleteQueriesARB(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteQueriesEXT;
        
        public static unsafe void glDeleteQueriesEXT(int n, ref uint ids)
        {
            _glDeleteQueriesEXT(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteQueryResourceTagNV;
        
        public static unsafe void glDeleteQueryResourceTagNV(int n, ref int tagIds)
        {
            _glDeleteQueryResourceTagNV(n, (IntPtr)tagIds);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteRenderbuffers;
        
        public static unsafe void glDeleteRenderbuffers(int n, ref uint renderbuffers)
        {
            _glDeleteRenderbuffers(n, (IntPtr)renderbuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteRenderbuffersEXT;
        
        public static unsafe void glDeleteRenderbuffersEXT(int n, ref uint renderbuffers)
        {
            _glDeleteRenderbuffersEXT(n, (IntPtr)renderbuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteRenderbuffersOES;
        
        public static unsafe void glDeleteRenderbuffersOES(int n, ref uint renderbuffers)
        {
            _glDeleteRenderbuffersOES(n, (IntPtr)renderbuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteSamplers;
        
        public static unsafe void glDeleteSamplers(int count, ref uint samplers)
        {
            _glDeleteSamplers(count, (IntPtr)samplers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteSemaphoresEXT;
        
        public static unsafe void glDeleteSemaphoresEXT(int n, ref uint semaphores)
        {
            _glDeleteSemaphoresEXT(n, (IntPtr)semaphores);
        }
        
        public static unsafe delegate*<uint, void> _glDeleteShader;
        
        public static unsafe void glDeleteShader(uint shader)
        {
            _glDeleteShader(shader);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteStatesNV;
        
        public static unsafe void glDeleteStatesNV(int n, ref uint states)
        {
            _glDeleteStatesNV(n, (IntPtr)states);
        }
        
        public static unsafe delegate*<IntPtr, void> _glDeleteSync;
        
        public static unsafe void glDeleteSync(IntPtr sync)
        {
            _glDeleteSync(sync);
        }
        
        public static unsafe delegate*<IntPtr, void> _glDeleteSyncAPPLE;
        
        public static unsafe void glDeleteSyncAPPLE(IntPtr sync)
        {
            _glDeleteSyncAPPLE(sync);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteTextures;
        
        public static unsafe void glDeleteTextures(int n, ref uint textures)
        {
            _glDeleteTextures(n, (IntPtr)textures);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteTexturesEXT;
        
        public static unsafe void glDeleteTexturesEXT(int n, ref uint textures)
        {
            _glDeleteTexturesEXT(n, (IntPtr)textures);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteTransformFeedbacks;
        
        public static unsafe void glDeleteTransformFeedbacks(int n, ref uint ids)
        {
            _glDeleteTransformFeedbacks(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteTransformFeedbacksNV;
        
        public static unsafe void glDeleteTransformFeedbacksNV(int n, ref uint ids)
        {
            _glDeleteTransformFeedbacksNV(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteVertexArrays;
        
        public static unsafe void glDeleteVertexArrays(int n, ref uint arrays)
        {
            _glDeleteVertexArrays(n, (IntPtr)arrays);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteVertexArraysAPPLE;
        
        public static unsafe void glDeleteVertexArraysAPPLE(int n, ref uint arrays)
        {
            _glDeleteVertexArraysAPPLE(n, (IntPtr)arrays);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteVertexArraysOES;
        
        public static unsafe void glDeleteVertexArraysOES(int n, ref uint arrays)
        {
            _glDeleteVertexArraysOES(n, (IntPtr)arrays);
        }
        
        public static unsafe delegate*<uint, void> _glDeleteVertexShaderEXT;
        
        public static unsafe void glDeleteVertexShaderEXT(uint id)
        {
            _glDeleteVertexShaderEXT(id);
        }
        
        public static unsafe delegate*<double, double, void> _glDepthBoundsEXT;
        
        public static unsafe void glDepthBoundsEXT(double zmin, double zmax)
        {
            _glDepthBoundsEXT(zmin, zmax);
        }
        
        public static unsafe delegate*<double, double, void> _glDepthBoundsdNV;
        
        public static unsafe void glDepthBoundsdNV(double zmin, double zmax)
        {
            _glDepthBoundsdNV(zmin, zmax);
        }
        
        public static unsafe delegate*<DepthFunction, void> _glDepthFunc;
        
        public static unsafe void glDepthFunc(DepthFunction func)
        {
            _glDepthFunc(func);
        }
        
        public static unsafe delegate*<byte, void> _glDepthMask;
        
        public static unsafe void glDepthMask(byte flag)
        {
            _glDepthMask(flag);
        }
        
        public static unsafe delegate*<double, double, void> _glDepthRange;
        
        public static unsafe void glDepthRange(double n, double f)
        {
            _glDepthRange(n, f);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glDepthRangeArraydvNV;
        
        public static unsafe void glDepthRangeArraydvNV(uint first, int count, ref double v)
        {
            _glDepthRangeArraydvNV(first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glDepthRangeArrayfvNV;
        
        public static unsafe void glDepthRangeArrayfvNV(uint first, int count, ref float v)
        {
            _glDepthRangeArrayfvNV(first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glDepthRangeArrayfvOES;
        
        public static unsafe void glDepthRangeArrayfvOES(uint first, int count, ref float v)
        {
            _glDepthRangeArrayfvOES(first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glDepthRangeArrayv;
        
        public static unsafe void glDepthRangeArrayv(uint first, int count, ref double v)
        {
            _glDepthRangeArrayv(first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, double, double, void> _glDepthRangeIndexed;
        
        public static unsafe void glDepthRangeIndexed(uint index, double n, double f)
        {
            _glDepthRangeIndexed(index, n, f);
        }
        
        public static unsafe delegate*<uint, double, double, void> _glDepthRangeIndexeddNV;
        
        public static unsafe void glDepthRangeIndexeddNV(uint index, double n, double f)
        {
            _glDepthRangeIndexeddNV(index, n, f);
        }
        
        public static unsafe delegate*<uint, float, float, void> _glDepthRangeIndexedfNV;
        
        public static unsafe void glDepthRangeIndexedfNV(uint index, float n, float f)
        {
            _glDepthRangeIndexedfNV(index, n, f);
        }
        
        public static unsafe delegate*<uint, float, float, void> _glDepthRangeIndexedfOES;
        
        public static unsafe void glDepthRangeIndexedfOES(uint index, float n, float f)
        {
            _glDepthRangeIndexedfOES(index, n, f);
        }
        
        public static unsafe delegate*<double, double, void> _glDepthRangedNV;
        
        public static unsafe void glDepthRangedNV(double zNear, double zFar)
        {
            _glDepthRangedNV(zNear, zFar);
        }
        
        public static unsafe delegate*<float, float, void> _glDepthRangef;
        
        public static unsafe void glDepthRangef(float n, float f)
        {
            _glDepthRangef(n, f);
        }
        
        public static unsafe delegate*<float, float, void> _glDepthRangefOES;
        
        public static unsafe void glDepthRangefOES(float n, float f)
        {
            _glDepthRangefOES(n, f);
        }
        
        public static unsafe delegate*<int, int, void> _glDepthRangex;
        
        public static unsafe void glDepthRangex(int n, int f)
        {
            _glDepthRangex(n, f);
        }
        
        public static unsafe delegate*<int, int, void> _glDepthRangexOES;
        
        public static unsafe void glDepthRangexOES(int n, int f)
        {
            _glDepthRangexOES(n, f);
        }
        
        public static unsafe delegate*<uint, uint, void> _glDetachObjectARB;
        
        public static unsafe void glDetachObjectARB(uint containerObj, uint attachedObj)
        {
            _glDetachObjectARB(containerObj, attachedObj);
        }
        
        public static unsafe delegate*<uint, uint, void> _glDetachShader;
        
        public static unsafe void glDetachShader(uint program, uint shader)
        {
            _glDetachShader(program, shader);
        }
        
        public static unsafe delegate*<TextureTarget, int, IntPtr, void> _glDetailTexFuncSGIS;
        
        public static unsafe void glDetailTexFuncSGIS(TextureTarget target, int n, out IntPtr points)
        {
            _glDetailTexFuncSGIS(target, n, (IntPtr)points);
        }
        
        public static unsafe delegate*<EnableCap, void> _glDisable;
        
        public static unsafe void glDisable(EnableCap cap)
        {
            _glDisable(cap);
        }
        
        public static unsafe delegate*<EnableCap, void> _glDisableClientState;
        
        public static unsafe void glDisableClientState(EnableCap array)
        {
            _glDisableClientState(array);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glDisableClientStateIndexedEXT;
        
        public static unsafe void glDisableClientStateIndexedEXT(EnableCap array, uint index)
        {
            _glDisableClientStateIndexedEXT(array, index);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glDisableClientStateiEXT;
        
        public static unsafe void glDisableClientStateiEXT(EnableCap array, uint index)
        {
            _glDisableClientStateiEXT(array, index);
        }
        
        public static unsafe delegate*<uint, void> _glDisableDriverControlQCOM;
        
        public static unsafe void glDisableDriverControlQCOM(uint driverControl)
        {
            _glDisableDriverControlQCOM(driverControl);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glDisableIndexedEXT;
        
        public static unsafe void glDisableIndexedEXT(EnableCap target, uint index)
        {
            _glDisableIndexedEXT(target, index);
        }
        
        public static unsafe delegate*<uint, void> _glDisableVariantClientStateEXT;
        
        public static unsafe void glDisableVariantClientStateEXT(uint id)
        {
            _glDisableVariantClientStateEXT(id);
        }
        
        public static unsafe delegate*<uint, uint, void> _glDisableVertexArrayAttrib;
        
        public static unsafe void glDisableVertexArrayAttrib(uint vaobj, uint index)
        {
            _glDisableVertexArrayAttrib(vaobj, index);
        }
        
        public static unsafe delegate*<uint, uint, void> _glDisableVertexArrayAttribEXT;
        
        public static unsafe void glDisableVertexArrayAttribEXT(uint vaobj, uint index)
        {
            _glDisableVertexArrayAttribEXT(vaobj, index);
        }
        
        public static unsafe delegate*<uint, EnableCap, void> _glDisableVertexArrayEXT;
        
        public static unsafe void glDisableVertexArrayEXT(uint vaobj, EnableCap array)
        {
            _glDisableVertexArrayEXT(vaobj, array);
        }
        
        public static unsafe delegate*<uint, uint, void> _glDisableVertexAttribAPPLE;
        
        public static unsafe void glDisableVertexAttribAPPLE(uint index, uint pname)
        {
            _glDisableVertexAttribAPPLE(index, pname);
        }
        
        public static unsafe delegate*<uint, void> _glDisableVertexAttribArray;
        
        public static unsafe void glDisableVertexAttribArray(uint index)
        {
            _glDisableVertexAttribArray(index);
        }
        
        public static unsafe delegate*<uint, void> _glDisableVertexAttribArrayARB;
        
        public static unsafe void glDisableVertexAttribArrayARB(uint index)
        {
            _glDisableVertexAttribArrayARB(index);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glDisablei;
        
        public static unsafe void glDisablei(EnableCap target, uint index)
        {
            _glDisablei(target, index);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glDisableiEXT;
        
        public static unsafe void glDisableiEXT(EnableCap target, uint index)
        {
            _glDisableiEXT(target, index);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glDisableiNV;
        
        public static unsafe void glDisableiNV(EnableCap target, uint index)
        {
            _glDisableiNV(target, index);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glDisableiOES;
        
        public static unsafe void glDisableiOES(EnableCap target, uint index)
        {
            _glDisableiOES(target, index);
        }
        
        public static unsafe delegate*<FramebufferTarget, int, IntPtr, void> _glDiscardFramebufferEXT;
        
        public static unsafe void glDiscardFramebufferEXT(FramebufferTarget target, int numAttachments, ref InvalidateFramebufferAttachment attachments)
        {
            _glDiscardFramebufferEXT(target, numAttachments, (IntPtr)attachments);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glDispatchCompute;
        
        public static unsafe void glDispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z)
        {
            _glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, uint, uint, void> _glDispatchComputeGroupSizeARB;
        
        public static unsafe void glDispatchComputeGroupSizeARB(uint num_groups_x, uint num_groups_y, uint num_groups_z, uint group_size_x, uint group_size_y, uint group_size_z)
        {
            _glDispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
        }
        
        public static unsafe delegate*<long, void> _glDispatchComputeIndirect;
        
        public static unsafe void glDispatchComputeIndirect(long indirect)
        {
            _glDispatchComputeIndirect(indirect);
        }
        
        public static unsafe delegate*<PrimitiveType, int, int, void> _glDrawArrays;
        
        public static unsafe void glDrawArrays(PrimitiveType mode, int first, int count)
        {
            _glDrawArrays(mode, first, count);
        }
        
        public static unsafe delegate*<PrimitiveType, int, int, void> _glDrawArraysEXT;
        
        public static unsafe void glDrawArraysEXT(PrimitiveType mode, int first, int count)
        {
            _glDrawArraysEXT(mode, first, count);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, void> _glDrawArraysIndirect;
        
        public static unsafe void glDrawArraysIndirect(PrimitiveType mode, IntPtr indirect)
        {
            _glDrawArraysIndirect(mode, (IntPtr)indirect);
        }
        
        public static unsafe delegate*<PrimitiveType, int, int, int, void> _glDrawArraysInstanced;
        
        public static unsafe void glDrawArraysInstanced(PrimitiveType mode, int first, int count, int instancecount)
        {
            _glDrawArraysInstanced(mode, first, count, instancecount);
        }
        
        public static unsafe delegate*<PrimitiveType, int, int, int, void> _glDrawArraysInstancedANGLE;
        
        public static unsafe void glDrawArraysInstancedANGLE(PrimitiveType mode, int first, int count, int primcount)
        {
            _glDrawArraysInstancedANGLE(mode, first, count, primcount);
        }
        
        public static unsafe delegate*<PrimitiveType, int, int, int, void> _glDrawArraysInstancedARB;
        
        public static unsafe void glDrawArraysInstancedARB(PrimitiveType mode, int first, int count, int primcount)
        {
            _glDrawArraysInstancedARB(mode, first, count, primcount);
        }
        
        public static unsafe delegate*<PrimitiveType, int, int, int, uint, void> _glDrawArraysInstancedBaseInstance;
        
        public static unsafe void glDrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int instancecount, uint baseinstance)
        {
            _glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
        }
        
        public static unsafe delegate*<PrimitiveType, int, int, int, uint, void> _glDrawArraysInstancedBaseInstanceEXT;
        
        public static unsafe void glDrawArraysInstancedBaseInstanceEXT(PrimitiveType mode, int first, int count, int instancecount, uint baseinstance)
        {
            _glDrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance);
        }
        
        public static unsafe delegate*<PrimitiveType, int, int, int, void> _glDrawArraysInstancedEXT;
        
        public static unsafe void glDrawArraysInstancedEXT(PrimitiveType mode, int start, int count, int primcount)
        {
            _glDrawArraysInstancedEXT(mode, start, count, primcount);
        }
        
        public static unsafe delegate*<PrimitiveType, int, int, int, void> _glDrawArraysInstancedNV;
        
        public static unsafe void glDrawArraysInstancedNV(PrimitiveType mode, int first, int count, int primcount)
        {
            _glDrawArraysInstancedNV(mode, first, count, primcount);
        }
        
        public static unsafe delegate*<DrawBufferMode, void> _glDrawBuffer;
        
        public static unsafe void glDrawBuffer(DrawBufferMode buf)
        {
            _glDrawBuffer(buf);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDrawBuffers;
        
        public static unsafe void glDrawBuffers(int n, ref DrawBufferMode bufs)
        {
            _glDrawBuffers(n, (IntPtr)bufs);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDrawBuffersARB;
        
        public static unsafe void glDrawBuffersARB(int n, ref DrawBufferMode bufs)
        {
            _glDrawBuffersARB(n, (IntPtr)bufs);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDrawBuffersATI;
        
        public static unsafe void glDrawBuffersATI(int n, ref DrawBufferMode bufs)
        {
            _glDrawBuffersATI(n, (IntPtr)bufs);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDrawBuffersEXT;
        
        public static unsafe void glDrawBuffersEXT(int n, ref uint bufs)
        {
            _glDrawBuffersEXT(n, (IntPtr)bufs);
        }
        
        public static unsafe delegate*<int, IntPtr, IntPtr, void> _glDrawBuffersIndexedEXT;
        
        public static unsafe void glDrawBuffersIndexedEXT(int n, ref uint location, ref int indices)
        {
            _glDrawBuffersIndexedEXT(n, (IntPtr)location, (IntPtr)indices);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDrawBuffersNV;
        
        public static unsafe void glDrawBuffersNV(int n, ref uint bufs)
        {
            _glDrawBuffersNV(n, (IntPtr)bufs);
        }
        
        public static unsafe delegate*<uint, IntPtr, IntPtr, uint, void> _glDrawCommandsAddressNV;
        
        public static unsafe void glDrawCommandsAddressNV(uint primitiveMode, ref ulong indirects, ref int sizes, uint count)
        {
            _glDrawCommandsAddressNV(primitiveMode, (IntPtr)indirects, (IntPtr)sizes, count);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, IntPtr, uint, void> _glDrawCommandsNV;
        
        public static unsafe void glDrawCommandsNV(uint primitiveMode, uint buffer, ref long indirects, ref int sizes, uint count)
        {
            _glDrawCommandsNV(primitiveMode, buffer, (IntPtr)indirects, (IntPtr)sizes, count);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, IntPtr, uint, void> _glDrawCommandsStatesAddressNV;
        
        public static unsafe void glDrawCommandsStatesAddressNV(ref ulong indirects, ref int sizes, ref uint states, ref uint fbos, uint count)
        {
            _glDrawCommandsStatesAddressNV((IntPtr)indirects, (IntPtr)sizes, (IntPtr)states, (IntPtr)fbos, count);
        }
        
        public static unsafe delegate*<uint, IntPtr, IntPtr, IntPtr, IntPtr, uint, void> _glDrawCommandsStatesNV;
        
        public static unsafe void glDrawCommandsStatesNV(uint buffer, ref long indirects, ref int sizes, ref uint states, ref uint fbos, uint count)
        {
            _glDrawCommandsStatesNV(buffer, (IntPtr)indirects, (IntPtr)sizes, (IntPtr)states, (IntPtr)fbos, count);
        }
        
        public static unsafe delegate*<PrimitiveType, int, int, void> _glDrawElementArrayAPPLE;
        
        public static unsafe void glDrawElementArrayAPPLE(PrimitiveType mode, int first, int count)
        {
            _glDrawElementArrayAPPLE(mode, first, count);
        }
        
        public static unsafe delegate*<PrimitiveType, int, void> _glDrawElementArrayATI;
        
        public static unsafe void glDrawElementArrayATI(PrimitiveType mode, int count)
        {
            _glDrawElementArrayATI(mode, count);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, void> _glDrawElements;
        
        public static unsafe void glDrawElements(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices)
        {
            _glDrawElements(mode, count, type, (IntPtr)indices);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, void> _glDrawElementsBaseVertex;
        
        public static unsafe void glDrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int basevertex)
        {
            _glDrawElementsBaseVertex(mode, count, type, (IntPtr)indices, basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, void> _glDrawElementsBaseVertexEXT;
        
        public static unsafe void glDrawElementsBaseVertexEXT(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int basevertex)
        {
            _glDrawElementsBaseVertexEXT(mode, count, type, (IntPtr)indices, basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, void> _glDrawElementsBaseVertexOES;
        
        public static unsafe void glDrawElementsBaseVertexOES(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int basevertex)
        {
            _glDrawElementsBaseVertexOES(mode, count, type, (IntPtr)indices, basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, DrawElementsType, IntPtr, void> _glDrawElementsIndirect;
        
        public static unsafe void glDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect)
        {
            _glDrawElementsIndirect(mode, type, (IntPtr)indirect);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, void> _glDrawElementsInstanced;
        
        public static unsafe void glDrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount)
        {
            _glDrawElementsInstanced(mode, count, type, (IntPtr)indices, instancecount);
        }
        
        public static unsafe delegate*<PrimitiveType, int, PrimitiveType, IntPtr, int, void> _glDrawElementsInstancedANGLE;
        
        public static unsafe void glDrawElementsInstancedANGLE(PrimitiveType mode, int count, PrimitiveType type, IntPtr indices, int primcount)
        {
            _glDrawElementsInstancedANGLE(mode, count, type, (IntPtr)indices, primcount);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, void> _glDrawElementsInstancedARB;
        
        public static unsafe void glDrawElementsInstancedARB(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int primcount)
        {
            _glDrawElementsInstancedARB(mode, count, type, (IntPtr)indices, primcount);
        }
        
        public static unsafe delegate*<PrimitiveType, int, PrimitiveType, IntPtr, int, uint, void> _glDrawElementsInstancedBaseInstance;
        
        public static unsafe void glDrawElementsInstancedBaseInstance(PrimitiveType mode, int count, PrimitiveType type, IntPtr indices, int instancecount, uint baseinstance)
        {
            _glDrawElementsInstancedBaseInstance(mode, count, type, (IntPtr)indices, instancecount, baseinstance);
        }
        
        public static unsafe delegate*<PrimitiveType, int, PrimitiveType, IntPtr, int, uint, void> _glDrawElementsInstancedBaseInstanceEXT;
        
        public static unsafe void glDrawElementsInstancedBaseInstanceEXT(PrimitiveType mode, int count, PrimitiveType type, IntPtr indices, int instancecount, uint baseinstance)
        {
            _glDrawElementsInstancedBaseInstanceEXT(mode, count, type, (IntPtr)indices, instancecount, baseinstance);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, int, void> _glDrawElementsInstancedBaseVertex;
        
        public static unsafe void glDrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex)
        {
            _glDrawElementsInstancedBaseVertex(mode, count, type, (IntPtr)indices, instancecount, basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, int, uint, void> _glDrawElementsInstancedBaseVertexBaseInstance;
        
        public static unsafe void glDrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex, uint baseinstance)
        {
            _glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, (IntPtr)indices, instancecount, basevertex, baseinstance);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, int, uint, void> _glDrawElementsInstancedBaseVertexBaseInstanceEXT;
        
        public static unsafe void glDrawElementsInstancedBaseVertexBaseInstanceEXT(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex, uint baseinstance)
        {
            _glDrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, (IntPtr)indices, instancecount, basevertex, baseinstance);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, int, void> _glDrawElementsInstancedBaseVertexEXT;
        
        public static unsafe void glDrawElementsInstancedBaseVertexEXT(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex)
        {
            _glDrawElementsInstancedBaseVertexEXT(mode, count, type, (IntPtr)indices, instancecount, basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, int, void> _glDrawElementsInstancedBaseVertexOES;
        
        public static unsafe void glDrawElementsInstancedBaseVertexOES(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex)
        {
            _glDrawElementsInstancedBaseVertexOES(mode, count, type, (IntPtr)indices, instancecount, basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, void> _glDrawElementsInstancedEXT;
        
        public static unsafe void glDrawElementsInstancedEXT(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int primcount)
        {
            _glDrawElementsInstancedEXT(mode, count, type, (IntPtr)indices, primcount);
        }
        
        public static unsafe delegate*<PrimitiveType, int, PrimitiveType, IntPtr, int, void> _glDrawElementsInstancedNV;
        
        public static unsafe void glDrawElementsInstancedNV(PrimitiveType mode, int count, PrimitiveType type, IntPtr indices, int primcount)
        {
            _glDrawElementsInstancedNV(mode, count, type, (IntPtr)indices, primcount);
        }
        
        public static unsafe delegate*<PrimitiveType, int, int, int, void> _glDrawMeshArraysSUN;
        
        public static unsafe void glDrawMeshArraysSUN(PrimitiveType mode, int first, int count, int width)
        {
            _glDrawMeshArraysSUN(mode, first, count, width);
        }
        
        public static unsafe delegate*<uint, uint, void> _glDrawMeshTasksNV;
        
        public static unsafe void glDrawMeshTasksNV(uint first, uint count)
        {
            _glDrawMeshTasksNV(first, count);
        }
        
        public static unsafe delegate*<long, void> _glDrawMeshTasksIndirectNV;
        
        public static unsafe void glDrawMeshTasksIndirectNV(long indirect)
        {
            _glDrawMeshTasksIndirectNV(indirect);
        }
        
        public static unsafe delegate*<int, int, PixelFormat, PixelType, IntPtr, void> _glDrawPixels;
        
        public static unsafe void glDrawPixels(int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glDrawPixels(width, height, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, uint, int, int, void> _glDrawRangeElementArrayAPPLE;
        
        public static unsafe void glDrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, int first, int count)
        {
            _glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, uint, int, void> _glDrawRangeElementArrayATI;
        
        public static unsafe void glDrawRangeElementArrayATI(PrimitiveType mode, uint start, uint end, int count)
        {
            _glDrawRangeElementArrayATI(mode, start, end, count);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, uint, int, DrawElementsType, IntPtr, void> _glDrawRangeElements;
        
        public static unsafe void glDrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices)
        {
            _glDrawRangeElements(mode, start, end, count, type, (IntPtr)indices);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, uint, int, DrawElementsType, IntPtr, int, void> _glDrawRangeElementsBaseVertex;
        
        public static unsafe void glDrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices, int basevertex)
        {
            _glDrawRangeElementsBaseVertex(mode, start, end, count, type, (IntPtr)indices, basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, uint, int, DrawElementsType, IntPtr, int, void> _glDrawRangeElementsBaseVertexEXT;
        
        public static unsafe void glDrawRangeElementsBaseVertexEXT(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices, int basevertex)
        {
            _glDrawRangeElementsBaseVertexEXT(mode, start, end, count, type, (IntPtr)indices, basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, uint, int, DrawElementsType, IntPtr, int, void> _glDrawRangeElementsBaseVertexOES;
        
        public static unsafe void glDrawRangeElementsBaseVertexOES(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices, int basevertex)
        {
            _glDrawRangeElementsBaseVertexOES(mode, start, end, count, type, (IntPtr)indices, basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, uint, int, DrawElementsType, IntPtr, void> _glDrawRangeElementsEXT;
        
        public static unsafe void glDrawRangeElementsEXT(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices)
        {
            _glDrawRangeElementsEXT(mode, start, end, count, type, (IntPtr)indices);
        }
        
        public static unsafe delegate*<float, float, float, float, float, void> _glDrawTexfOES;
        
        public static unsafe void glDrawTexfOES(float x, float y, float z, float width, float height)
        {
            _glDrawTexfOES(x, y, z, width, height);
        }
        
        public static unsafe delegate*<IntPtr, void> _glDrawTexfvOES;
        
        public static unsafe void glDrawTexfvOES(ref float coords)
        {
            _glDrawTexfvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<int, int, int, int, int, void> _glDrawTexiOES;
        
        public static unsafe void glDrawTexiOES(int x, int y, int z, int width, int height)
        {
            _glDrawTexiOES(x, y, z, width, height);
        }
        
        public static unsafe delegate*<IntPtr, void> _glDrawTexivOES;
        
        public static unsafe void glDrawTexivOES(ref int coords)
        {
            _glDrawTexivOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<short, short, short, short, short, void> _glDrawTexsOES;
        
        public static unsafe void glDrawTexsOES(short x, short y, short z, short width, short height)
        {
            _glDrawTexsOES(x, y, z, width, height);
        }
        
        public static unsafe delegate*<IntPtr, void> _glDrawTexsvOES;
        
        public static unsafe void glDrawTexsvOES(ref short coords)
        {
            _glDrawTexsvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<uint, uint, float, float, float, float, float, float, float, float, float, void> _glDrawTextureNV;
        
        public static unsafe void glDrawTextureNV(uint texture, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
        {
            _glDrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        }
        
        public static unsafe delegate*<int, int, int, int, int, void> _glDrawTexxOES;
        
        public static unsafe void glDrawTexxOES(int x, int y, int z, int width, int height)
        {
            _glDrawTexxOES(x, y, z, width, height);
        }
        
        public static unsafe delegate*<IntPtr, void> _glDrawTexxvOES;
        
        public static unsafe void glDrawTexxvOES(ref int coords)
        {
            _glDrawTexxvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, void> _glDrawTransformFeedback;
        
        public static unsafe void glDrawTransformFeedback(PrimitiveType mode, uint id)
        {
            _glDrawTransformFeedback(mode, id);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, void> _glDrawTransformFeedbackEXT;
        
        public static unsafe void glDrawTransformFeedbackEXT(PrimitiveType mode, uint id)
        {
            _glDrawTransformFeedbackEXT(mode, id);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, int, void> _glDrawTransformFeedbackInstanced;
        
        public static unsafe void glDrawTransformFeedbackInstanced(PrimitiveType mode, uint id, int instancecount)
        {
            _glDrawTransformFeedbackInstanced(mode, id, instancecount);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, int, void> _glDrawTransformFeedbackInstancedEXT;
        
        public static unsafe void glDrawTransformFeedbackInstancedEXT(PrimitiveType mode, uint id, int instancecount)
        {
            _glDrawTransformFeedbackInstancedEXT(mode, id, instancecount);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, void> _glDrawTransformFeedbackNV;
        
        public static unsafe void glDrawTransformFeedbackNV(PrimitiveType mode, uint id)
        {
            _glDrawTransformFeedbackNV(mode, id);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, uint, void> _glDrawTransformFeedbackStream;
        
        public static unsafe void glDrawTransformFeedbackStream(PrimitiveType mode, uint id, uint stream)
        {
            _glDrawTransformFeedbackStream(mode, id, stream);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, uint, int, void> _glDrawTransformFeedbackStreamInstanced;
        
        public static unsafe void glDrawTransformFeedbackStreamInstanced(PrimitiveType mode, uint id, uint stream, int instancecount)
        {
            _glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glEGLImageTargetRenderbufferStorageOES;
        
        public static unsafe void glEGLImageTargetRenderbufferStorageOES(uint target, IntPtr image)
        {
            _glEGLImageTargetRenderbufferStorageOES(target, image);
        }
        
        public static unsafe delegate*<uint, IntPtr, IntPtr, void> _glEGLImageTargetTexStorageEXT;
        
        public static unsafe void glEGLImageTargetTexStorageEXT(uint target, IntPtr image, ref int attrib_list)
        {
            _glEGLImageTargetTexStorageEXT(target, image, (IntPtr)attrib_list);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glEGLImageTargetTexture2DOES;
        
        public static unsafe void glEGLImageTargetTexture2DOES(uint target, IntPtr image)
        {
            _glEGLImageTargetTexture2DOES(target, image);
        }
        
        public static unsafe delegate*<uint, IntPtr, IntPtr, void> _glEGLImageTargetTextureStorageEXT;
        
        public static unsafe void glEGLImageTargetTextureStorageEXT(uint texture, IntPtr image, ref int attrib_list)
        {
            _glEGLImageTargetTextureStorageEXT(texture, image, (IntPtr)attrib_list);
        }
        
        public static unsafe delegate*<byte, void> _glEdgeFlag;
        
        public static unsafe void glEdgeFlag(byte flag)
        {
            _glEdgeFlag(flag);
        }
        
        public static unsafe delegate*<int, void> _glEdgeFlagFormatNV;
        
        public static unsafe void glEdgeFlagFormatNV(int stride)
        {
            _glEdgeFlagFormatNV(stride);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glEdgeFlagPointer;
        
        public static unsafe void glEdgeFlagPointer(int stride, IntPtr pointer)
        {
            _glEdgeFlagPointer(stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glEdgeFlagPointerEXT;
        
        public static unsafe void glEdgeFlagPointerEXT(int stride, int count, ref byte pointer)
        {
            _glEdgeFlagPointerEXT(stride, count, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, IntPtr, int, void> _glEdgeFlagPointerListIBM;
        
        public static unsafe void glEdgeFlagPointerListIBM(int stride, out IntPtr pointer, int ptrstride)
        {
            _glEdgeFlagPointerListIBM(stride, (IntPtr)pointer, ptrstride);
        }
        
        public static unsafe delegate*<IntPtr, void> _glEdgeFlagv;
        
        public static unsafe void glEdgeFlagv(ref byte flag)
        {
            _glEdgeFlagv((IntPtr)flag);
        }
        
        public static unsafe delegate*<ElementPointerTypeATI, IntPtr, void> _glElementPointerAPPLE;
        
        public static unsafe void glElementPointerAPPLE(ElementPointerTypeATI type, IntPtr pointer)
        {
            _glElementPointerAPPLE(type, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<ElementPointerTypeATI, IntPtr, void> _glElementPointerATI;
        
        public static unsafe void glElementPointerATI(ElementPointerTypeATI type, IntPtr pointer)
        {
            _glElementPointerATI(type, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<EnableCap, void> _glEnable;
        
        public static unsafe void glEnable(EnableCap cap)
        {
            _glEnable(cap);
        }
        
        public static unsafe delegate*<EnableCap, void> _glEnableClientState;
        
        public static unsafe void glEnableClientState(EnableCap array)
        {
            _glEnableClientState(array);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glEnableClientStateIndexedEXT;
        
        public static unsafe void glEnableClientStateIndexedEXT(EnableCap array, uint index)
        {
            _glEnableClientStateIndexedEXT(array, index);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glEnableClientStateiEXT;
        
        public static unsafe void glEnableClientStateiEXT(EnableCap array, uint index)
        {
            _glEnableClientStateiEXT(array, index);
        }
        
        public static unsafe delegate*<uint, void> _glEnableDriverControlQCOM;
        
        public static unsafe void glEnableDriverControlQCOM(uint driverControl)
        {
            _glEnableDriverControlQCOM(driverControl);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glEnableIndexedEXT;
        
        public static unsafe void glEnableIndexedEXT(EnableCap target, uint index)
        {
            _glEnableIndexedEXT(target, index);
        }
        
        public static unsafe delegate*<uint, void> _glEnableVariantClientStateEXT;
        
        public static unsafe void glEnableVariantClientStateEXT(uint id)
        {
            _glEnableVariantClientStateEXT(id);
        }
        
        public static unsafe delegate*<uint, uint, void> _glEnableVertexArrayAttrib;
        
        public static unsafe void glEnableVertexArrayAttrib(uint vaobj, uint index)
        {
            _glEnableVertexArrayAttrib(vaobj, index);
        }
        
        public static unsafe delegate*<uint, uint, void> _glEnableVertexArrayAttribEXT;
        
        public static unsafe void glEnableVertexArrayAttribEXT(uint vaobj, uint index)
        {
            _glEnableVertexArrayAttribEXT(vaobj, index);
        }
        
        public static unsafe delegate*<uint, EnableCap, void> _glEnableVertexArrayEXT;
        
        public static unsafe void glEnableVertexArrayEXT(uint vaobj, EnableCap array)
        {
            _glEnableVertexArrayEXT(vaobj, array);
        }
        
        public static unsafe delegate*<uint, uint, void> _glEnableVertexAttribAPPLE;
        
        public static unsafe void glEnableVertexAttribAPPLE(uint index, uint pname)
        {
            _glEnableVertexAttribAPPLE(index, pname);
        }
        
        public static unsafe delegate*<uint, void> _glEnableVertexAttribArray;
        
        public static unsafe void glEnableVertexAttribArray(uint index)
        {
            _glEnableVertexAttribArray(index);
        }
        
        public static unsafe delegate*<uint, void> _glEnableVertexAttribArrayARB;
        
        public static unsafe void glEnableVertexAttribArrayARB(uint index)
        {
            _glEnableVertexAttribArrayARB(index);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glEnablei;
        
        public static unsafe void glEnablei(EnableCap target, uint index)
        {
            _glEnablei(target, index);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glEnableiEXT;
        
        public static unsafe void glEnableiEXT(EnableCap target, uint index)
        {
            _glEnableiEXT(target, index);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glEnableiNV;
        
        public static unsafe void glEnableiNV(EnableCap target, uint index)
        {
            _glEnableiNV(target, index);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glEnableiOES;
        
        public static unsafe void glEnableiOES(EnableCap target, uint index)
        {
            _glEnableiOES(target, index);
        }
        
        public static unsafe delegate*<void> _glEnd;
        
        public static unsafe void glEnd()
        {
            _glEnd();
        }
        
        public static unsafe delegate*<void> _glEndConditionalRender;
        
        public static unsafe void glEndConditionalRender()
        {
            _glEndConditionalRender();
        }
        
        public static unsafe delegate*<void> _glEndConditionalRenderNV;
        
        public static unsafe void glEndConditionalRenderNV()
        {
            _glEndConditionalRenderNV();
        }
        
        public static unsafe delegate*<void> _glEndConditionalRenderNVX;
        
        public static unsafe void glEndConditionalRenderNVX()
        {
            _glEndConditionalRenderNVX();
        }
        
        public static unsafe delegate*<void> _glEndFragmentShaderATI;
        
        public static unsafe void glEndFragmentShaderATI()
        {
            _glEndFragmentShaderATI();
        }
        
        public static unsafe delegate*<void> _glEndList;
        
        public static unsafe void glEndList()
        {
            _glEndList();
        }
        
        public static unsafe delegate*<void> _glEndOcclusionQueryNV;
        
        public static unsafe void glEndOcclusionQueryNV()
        {
            _glEndOcclusionQueryNV();
        }
        
        public static unsafe delegate*<uint, void> _glEndPerfMonitorAMD;
        
        public static unsafe void glEndPerfMonitorAMD(uint monitor)
        {
            _glEndPerfMonitorAMD(monitor);
        }
        
        public static unsafe delegate*<uint, void> _glEndPerfQueryINTEL;
        
        public static unsafe void glEndPerfQueryINTEL(uint queryHandle)
        {
            _glEndPerfQueryINTEL(queryHandle);
        }
        
        public static unsafe delegate*<QueryTarget, void> _glEndQuery;
        
        public static unsafe void glEndQuery(QueryTarget target)
        {
            _glEndQuery(target);
        }
        
        public static unsafe delegate*<QueryTarget, void> _glEndQueryARB;
        
        public static unsafe void glEndQueryARB(QueryTarget target)
        {
            _glEndQueryARB(target);
        }
        
        public static unsafe delegate*<QueryTarget, void> _glEndQueryEXT;
        
        public static unsafe void glEndQueryEXT(QueryTarget target)
        {
            _glEndQueryEXT(target);
        }
        
        public static unsafe delegate*<QueryTarget, uint, void> _glEndQueryIndexed;
        
        public static unsafe void glEndQueryIndexed(QueryTarget target, uint index)
        {
            _glEndQueryIndexed(target, index);
        }
        
        public static unsafe delegate*<uint, void> _glEndTilingQCOM;
        
        public static unsafe void glEndTilingQCOM(uint preserveMask)
        {
            _glEndTilingQCOM(preserveMask);
        }
        
        public static unsafe delegate*<void> _glEndTransformFeedback;
        
        public static unsafe void glEndTransformFeedback()
        {
            _glEndTransformFeedback();
        }
        
        public static unsafe delegate*<void> _glEndTransformFeedbackEXT;
        
        public static unsafe void glEndTransformFeedbackEXT()
        {
            _glEndTransformFeedbackEXT();
        }
        
        public static unsafe delegate*<void> _glEndTransformFeedbackNV;
        
        public static unsafe void glEndTransformFeedbackNV()
        {
            _glEndTransformFeedbackNV();
        }
        
        public static unsafe delegate*<void> _glEndVertexShaderEXT;
        
        public static unsafe void glEndVertexShaderEXT()
        {
            _glEndVertexShaderEXT();
        }
        
        public static unsafe delegate*<uint, void> _glEndVideoCaptureNV;
        
        public static unsafe void glEndVideoCaptureNV(uint video_capture_slot)
        {
            _glEndVideoCaptureNV(video_capture_slot);
        }
        
        public static unsafe delegate*<double, void> _glEvalCoord1d;
        
        public static unsafe void glEvalCoord1d(double u)
        {
            _glEvalCoord1d(u);
        }
        
        public static unsafe delegate*<IntPtr, void> _glEvalCoord1dv;
        
        public static unsafe void glEvalCoord1dv(ref double u)
        {
            _glEvalCoord1dv((IntPtr)u);
        }
        
        public static unsafe delegate*<float, void> _glEvalCoord1f;
        
        public static unsafe void glEvalCoord1f(float u)
        {
            _glEvalCoord1f(u);
        }
        
        public static unsafe delegate*<IntPtr, void> _glEvalCoord1fv;
        
        public static unsafe void glEvalCoord1fv(ref float u)
        {
            _glEvalCoord1fv((IntPtr)u);
        }
        
        public static unsafe delegate*<int, void> _glEvalCoord1xOES;
        
        public static unsafe void glEvalCoord1xOES(int u)
        {
            _glEvalCoord1xOES(u);
        }
        
        public static unsafe delegate*<IntPtr, void> _glEvalCoord1xvOES;
        
        public static unsafe void glEvalCoord1xvOES(ref int coords)
        {
            _glEvalCoord1xvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<double, double, void> _glEvalCoord2d;
        
        public static unsafe void glEvalCoord2d(double u, double v)
        {
            _glEvalCoord2d(u, v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glEvalCoord2dv;
        
        public static unsafe void glEvalCoord2dv(ref double u)
        {
            _glEvalCoord2dv((IntPtr)u);
        }
        
        public static unsafe delegate*<float, float, void> _glEvalCoord2f;
        
        public static unsafe void glEvalCoord2f(float u, float v)
        {
            _glEvalCoord2f(u, v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glEvalCoord2fv;
        
        public static unsafe void glEvalCoord2fv(ref float u)
        {
            _glEvalCoord2fv((IntPtr)u);
        }
        
        public static unsafe delegate*<int, int, void> _glEvalCoord2xOES;
        
        public static unsafe void glEvalCoord2xOES(int u, int v)
        {
            _glEvalCoord2xOES(u, v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glEvalCoord2xvOES;
        
        public static unsafe void glEvalCoord2xvOES(ref int coords)
        {
            _glEvalCoord2xvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<EvalTargetNV, EvalMapsModeNV, void> _glEvalMapsNV;
        
        public static unsafe void glEvalMapsNV(EvalTargetNV target, EvalMapsModeNV mode)
        {
            _glEvalMapsNV(target, mode);
        }
        
        public static unsafe delegate*<MeshMode1, int, int, void> _glEvalMesh1;
        
        public static unsafe void glEvalMesh1(MeshMode1 mode, int i1, int i2)
        {
            _glEvalMesh1(mode, i1, i2);
        }
        
        public static unsafe delegate*<MeshMode2, int, int, int, int, void> _glEvalMesh2;
        
        public static unsafe void glEvalMesh2(MeshMode2 mode, int i1, int i2, int j1, int j2)
        {
            _glEvalMesh2(mode, i1, i2, j1, j2);
        }
        
        public static unsafe delegate*<int, void> _glEvalPoint1;
        
        public static unsafe void glEvalPoint1(int i)
        {
            _glEvalPoint1(i);
        }
        
        public static unsafe delegate*<int, int, void> _glEvalPoint2;
        
        public static unsafe void glEvalPoint2(int i, int j)
        {
            _glEvalPoint2(i, j);
        }
        
        public static unsafe delegate*<void> _glEvaluateDepthValuesARB;
        
        public static unsafe void glEvaluateDepthValuesARB()
        {
            _glEvaluateDepthValuesARB();
        }
        
        public static unsafe delegate*<VertexAttribEnumNV, uint, IntPtr, void> _glExecuteProgramNV;
        
        public static unsafe void glExecuteProgramNV(VertexAttribEnumNV target, uint id, ref float @params)
        {
            _glExecuteProgramNV(target, id, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glExtGetBufferPointervQCOM;
        
        public static unsafe void glExtGetBufferPointervQCOM(uint target, out IntPtr @params)
        {
            _glExtGetBufferPointervQCOM(target, (IntPtr)@params);
        }
        
        public static unsafe delegate*<IntPtr, int, IntPtr, void> _glExtGetBuffersQCOM;
        
        public static unsafe void glExtGetBuffersQCOM(ref uint buffers, int maxBuffers, ref int numBuffers)
        {
            _glExtGetBuffersQCOM((IntPtr)buffers, maxBuffers, (IntPtr)numBuffers);
        }
        
        public static unsafe delegate*<IntPtr, int, IntPtr, void> _glExtGetFramebuffersQCOM;
        
        public static unsafe void glExtGetFramebuffersQCOM(ref uint framebuffers, int maxFramebuffers, ref int numFramebuffers)
        {
            _glExtGetFramebuffersQCOM((IntPtr)framebuffers, maxFramebuffers, (IntPtr)numFramebuffers);
        }
        
        public static unsafe delegate*<uint, ShaderType, IntPtr, IntPtr, void> _glExtGetProgramBinarySourceQCOM;
        
        public static unsafe void glExtGetProgramBinarySourceQCOM(uint program, ShaderType shadertype, ref sbyte source, ref int length)
        {
            _glExtGetProgramBinarySourceQCOM(program, shadertype, (IntPtr)source, (IntPtr)length);
        }
        
        public static unsafe delegate*<IntPtr, int, IntPtr, void> _glExtGetProgramsQCOM;
        
        public static unsafe void glExtGetProgramsQCOM(ref uint programs, int maxPrograms, ref int numPrograms)
        {
            _glExtGetProgramsQCOM((IntPtr)programs, maxPrograms, (IntPtr)numPrograms);
        }
        
        public static unsafe delegate*<IntPtr, int, IntPtr, void> _glExtGetRenderbuffersQCOM;
        
        public static unsafe void glExtGetRenderbuffersQCOM(ref uint renderbuffers, int maxRenderbuffers, ref int numRenderbuffers)
        {
            _glExtGetRenderbuffersQCOM((IntPtr)renderbuffers, maxRenderbuffers, (IntPtr)numRenderbuffers);
        }
        
        public static unsafe delegate*<IntPtr, int, IntPtr, void> _glExtGetShadersQCOM;
        
        public static unsafe void glExtGetShadersQCOM(ref uint shaders, int maxShaders, ref int numShaders)
        {
            _glExtGetShadersQCOM((IntPtr)shaders, maxShaders, (IntPtr)numShaders);
        }
        
        public static unsafe delegate*<uint, uint, int, uint, IntPtr, void> _glExtGetTexLevelParameterivQCOM;
        
        public static unsafe void glExtGetTexLevelParameterivQCOM(uint texture, uint face, int level, uint pname, ref int @params)
        {
            _glExtGetTexLevelParameterivQCOM(texture, face, level, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glExtGetTexSubImageQCOM;
        
        public static unsafe void glExtGetTexSubImageQCOM(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr texels)
        {
            _glExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (IntPtr)texels);
        }
        
        public static unsafe delegate*<IntPtr, int, IntPtr, void> _glExtGetTexturesQCOM;
        
        public static unsafe void glExtGetTexturesQCOM(ref uint textures, int maxTextures, ref int numTextures)
        {
            _glExtGetTexturesQCOM((IntPtr)textures, maxTextures, (IntPtr)numTextures);
        }
        
        public static unsafe delegate*<uint, byte> _glExtIsProgramBinaryQCOM;
        
        public static unsafe byte glExtIsProgramBinaryQCOM(uint program)
        {
            return _glExtIsProgramBinaryQCOM(program);
        }
        
        public static unsafe delegate*<uint, uint, int, void> _glExtTexObjectStateOverrideiQCOM;
        
        public static unsafe void glExtTexObjectStateOverrideiQCOM(uint target, uint pname, int param)
        {
            _glExtTexObjectStateOverrideiQCOM(target, pname, param);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glExtractComponentEXT;
        
        public static unsafe void glExtractComponentEXT(uint res, uint src, uint num)
        {
            _glExtractComponentEXT(res, src, num);
        }
        
        public static unsafe delegate*<int, FeedbackType, IntPtr, void> _glFeedbackBuffer;
        
        public static unsafe void glFeedbackBuffer(int size, FeedbackType type, ref float buffer)
        {
            _glFeedbackBuffer(size, type, (IntPtr)buffer);
        }
        
        public static unsafe delegate*<int, uint, IntPtr, void> _glFeedbackBufferxOES;
        
        public static unsafe void glFeedbackBufferxOES(int n, uint type, ref int buffer)
        {
            _glFeedbackBufferxOES(n, type, (IntPtr)buffer);
        }
        
        public static unsafe delegate*<SyncCondition, uint, IntPtr> _glFenceSync;
        
        public static unsafe IntPtr glFenceSync(SyncCondition condition, uint flags)
        {
            return _glFenceSync(condition, flags);
        }
        
        public static unsafe delegate*<SyncCondition, uint, IntPtr> _glFenceSyncAPPLE;
        
        public static unsafe IntPtr glFenceSyncAPPLE(SyncCondition condition, uint flags)
        {
            return _glFenceSyncAPPLE(condition, flags);
        }
        
        public static unsafe delegate*<CombinerVariableNV, CombinerRegisterNV, CombinerMappingNV, CombinerComponentUsageNV, void> _glFinalCombinerInputNV;
        
        public static unsafe void glFinalCombinerInputNV(CombinerVariableNV variable, CombinerRegisterNV input, CombinerMappingNV mapping, CombinerComponentUsageNV componentUsage)
        {
            _glFinalCombinerInputNV(variable, input, mapping, componentUsage);
        }
        
        public static unsafe delegate*<void> _glFinish;
        
        public static unsafe void glFinish()
        {
            _glFinish();
        }
        
        public static unsafe delegate*<IntPtr, int> _glFinishAsyncSGIX;
        
        public static unsafe int glFinishAsyncSGIX(ref uint markerp)
        {
            return _glFinishAsyncSGIX((IntPtr)markerp);
        }
        
        public static unsafe delegate*<uint, void> _glFinishFenceAPPLE;
        
        public static unsafe void glFinishFenceAPPLE(uint fence)
        {
            _glFinishFenceAPPLE(fence);
        }
        
        public static unsafe delegate*<uint, void> _glFinishFenceNV;
        
        public static unsafe void glFinishFenceNV(uint fence)
        {
            _glFinishFenceNV(fence);
        }
        
        public static unsafe delegate*<ObjectTypeAPPLE, int, void> _glFinishObjectAPPLE;
        
        public static unsafe void glFinishObjectAPPLE(ObjectTypeAPPLE @object, int name)
        {
            _glFinishObjectAPPLE(@object, name);
        }
        
        public static unsafe delegate*<void> _glFinishTextureSUNX;
        
        public static unsafe void glFinishTextureSUNX()
        {
            _glFinishTextureSUNX();
        }
        
        public static unsafe delegate*<void> _glFlush;
        
        public static unsafe void glFlush()
        {
            _glFlush();
        }
        
        public static unsafe delegate*<BufferTargetARB, long, long, void> _glFlushMappedBufferRange;
        
        public static unsafe void glFlushMappedBufferRange(BufferTargetARB target, long offset, long length)
        {
            _glFlushMappedBufferRange(target, offset, length);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, long, void> _glFlushMappedBufferRangeAPPLE;
        
        public static unsafe void glFlushMappedBufferRangeAPPLE(BufferTargetARB target, long offset, long size)
        {
            _glFlushMappedBufferRangeAPPLE(target, offset, size);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, long, void> _glFlushMappedBufferRangeEXT;
        
        public static unsafe void glFlushMappedBufferRangeEXT(BufferTargetARB target, long offset, long length)
        {
            _glFlushMappedBufferRangeEXT(target, offset, length);
        }
        
        public static unsafe delegate*<uint, long, long, void> _glFlushMappedNamedBufferRange;
        
        public static unsafe void glFlushMappedNamedBufferRange(uint buffer, long offset, long length)
        {
            _glFlushMappedNamedBufferRange(buffer, offset, length);
        }
        
        public static unsafe delegate*<uint, long, long, void> _glFlushMappedNamedBufferRangeEXT;
        
        public static unsafe void glFlushMappedNamedBufferRangeEXT(uint buffer, long offset, long length)
        {
            _glFlushMappedNamedBufferRangeEXT(buffer, offset, length);
        }
        
        public static unsafe delegate*<PixelDataRangeTargetNV, void> _glFlushPixelDataRangeNV;
        
        public static unsafe void glFlushPixelDataRangeNV(PixelDataRangeTargetNV target)
        {
            _glFlushPixelDataRangeNV(target);
        }
        
        public static unsafe delegate*<void> _glFlushRasterSGIX;
        
        public static unsafe void glFlushRasterSGIX()
        {
            _glFlushRasterSGIX();
        }
        
        public static unsafe delegate*<uint, void> _glFlushStaticDataIBM;
        
        public static unsafe void glFlushStaticDataIBM(uint target)
        {
            _glFlushStaticDataIBM(target);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glFlushVertexArrayRangeAPPLE;
        
        public static unsafe void glFlushVertexArrayRangeAPPLE(int length, IntPtr pointer)
        {
            _glFlushVertexArrayRangeAPPLE(length, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<void> _glFlushVertexArrayRangeNV;
        
        public static unsafe void glFlushVertexArrayRangeNV()
        {
            _glFlushVertexArrayRangeNV();
        }
        
        public static unsafe delegate*<uint, int, void> _glFogCoordFormatNV;
        
        public static unsafe void glFogCoordFormatNV(uint type, int stride)
        {
            _glFogCoordFormatNV(type, stride);
        }
        
        public static unsafe delegate*<FogPointerTypeEXT, int, IntPtr, void> _glFogCoordPointer;
        
        public static unsafe void glFogCoordPointer(FogPointerTypeEXT type, int stride, IntPtr pointer)
        {
            _glFogCoordPointer(type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<FogPointerTypeEXT, int, IntPtr, void> _glFogCoordPointerEXT;
        
        public static unsafe void glFogCoordPointerEXT(FogPointerTypeEXT type, int stride, IntPtr pointer)
        {
            _glFogCoordPointerEXT(type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<FogPointerTypeIBM, int, IntPtr, int, void> _glFogCoordPointerListIBM;
        
        public static unsafe void glFogCoordPointerListIBM(FogPointerTypeIBM type, int stride, out IntPtr pointer, int ptrstride)
        {
            _glFogCoordPointerListIBM(type, stride, (IntPtr)pointer, ptrstride);
        }
        
        public static unsafe delegate*<double, void> _glFogCoordd;
        
        public static unsafe void glFogCoordd(double coord)
        {
            _glFogCoordd(coord);
        }
        
        public static unsafe delegate*<double, void> _glFogCoorddEXT;
        
        public static unsafe void glFogCoorddEXT(double coord)
        {
            _glFogCoorddEXT(coord);
        }
        
        public static unsafe delegate*<IntPtr, void> _glFogCoorddv;
        
        public static unsafe void glFogCoorddv(ref double coord)
        {
            _glFogCoorddv((IntPtr)coord);
        }
        
        public static unsafe delegate*<IntPtr, void> _glFogCoorddvEXT;
        
        public static unsafe void glFogCoorddvEXT(ref double coord)
        {
            _glFogCoorddvEXT((IntPtr)coord);
        }
        
        public static unsafe delegate*<float, void> _glFogCoordf;
        
        public static unsafe void glFogCoordf(float coord)
        {
            _glFogCoordf(coord);
        }
        
        public static unsafe delegate*<float, void> _glFogCoordfEXT;
        
        public static unsafe void glFogCoordfEXT(float coord)
        {
            _glFogCoordfEXT(coord);
        }
        
        public static unsafe delegate*<IntPtr, void> _glFogCoordfv;
        
        public static unsafe void glFogCoordfv(ref float coord)
        {
            _glFogCoordfv((IntPtr)coord);
        }
        
        public static unsafe delegate*<IntPtr, void> _glFogCoordfvEXT;
        
        public static unsafe void glFogCoordfvEXT(ref float coord)
        {
            _glFogCoordfvEXT((IntPtr)coord);
        }
        
        public static unsafe delegate*<ushort, void> _glFogCoordhNV;
        
        public static unsafe void glFogCoordhNV(ushort fog)
        {
            _glFogCoordhNV(fog);
        }
        
        public static unsafe delegate*<IntPtr, void> _glFogCoordhvNV;
        
        public static unsafe void glFogCoordhvNV(ref ushort fog)
        {
            _glFogCoordhvNV((IntPtr)fog);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glFogFuncSGIS;
        
        public static unsafe void glFogFuncSGIS(int n, out IntPtr points)
        {
            _glFogFuncSGIS(n, (IntPtr)points);
        }
        
        public static unsafe delegate*<FogParameter, float, void> _glFogf;
        
        public static unsafe void glFogf(FogParameter pname, float param)
        {
            _glFogf(pname, param);
        }
        
        public static unsafe delegate*<FogParameter, IntPtr, void> _glFogfv;
        
        public static unsafe void glFogfv(FogParameter pname, ref float @params)
        {
            _glFogfv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<FogParameter, int, void> _glFogi;
        
        public static unsafe void glFogi(FogParameter pname, int param)
        {
            _glFogi(pname, param);
        }
        
        public static unsafe delegate*<FogParameter, IntPtr, void> _glFogiv;
        
        public static unsafe void glFogiv(FogParameter pname, ref int @params)
        {
            _glFogiv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<FogPName, int, void> _glFogx;
        
        public static unsafe void glFogx(FogPName pname, int param)
        {
            _glFogx(pname, param);
        }
        
        public static unsafe delegate*<FogPName, int, void> _glFogxOES;
        
        public static unsafe void glFogxOES(FogPName pname, int param)
        {
            _glFogxOES(pname, param);
        }
        
        public static unsafe delegate*<FogPName, IntPtr, void> _glFogxv;
        
        public static unsafe void glFogxv(FogPName pname, ref int param)
        {
            _glFogxv(pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<FogPName, IntPtr, void> _glFogxvOES;
        
        public static unsafe void glFogxvOES(FogPName pname, ref int param)
        {
            _glFogxvOES(pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, void> _glFragmentColorMaterialSGIX;
        
        public static unsafe void glFragmentColorMaterialSGIX(MaterialFace face, MaterialParameter mode)
        {
            _glFragmentColorMaterialSGIX(face, mode);
        }
        
        public static unsafe delegate*<uint, void> _glFragmentCoverageColorNV;
        
        public static unsafe void glFragmentCoverageColorNV(uint color)
        {
            _glFragmentCoverageColorNV(color);
        }
        
        public static unsafe delegate*<FragmentLightModelParameterSGIX, float, void> _glFragmentLightModelfSGIX;
        
        public static unsafe void glFragmentLightModelfSGIX(FragmentLightModelParameterSGIX pname, float param)
        {
            _glFragmentLightModelfSGIX(pname, param);
        }
        
        public static unsafe delegate*<FragmentLightModelParameterSGIX, IntPtr, void> _glFragmentLightModelfvSGIX;
        
        public static unsafe void glFragmentLightModelfvSGIX(FragmentLightModelParameterSGIX pname, ref float @params)
        {
            _glFragmentLightModelfvSGIX(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<FragmentLightModelParameterSGIX, int, void> _glFragmentLightModeliSGIX;
        
        public static unsafe void glFragmentLightModeliSGIX(FragmentLightModelParameterSGIX pname, int param)
        {
            _glFragmentLightModeliSGIX(pname, param);
        }
        
        public static unsafe delegate*<FragmentLightModelParameterSGIX, IntPtr, void> _glFragmentLightModelivSGIX;
        
        public static unsafe void glFragmentLightModelivSGIX(FragmentLightModelParameterSGIX pname, ref int @params)
        {
            _glFragmentLightModelivSGIX(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<FragmentLightNameSGIX, FragmentLightParameterSGIX, float, void> _glFragmentLightfSGIX;
        
        public static unsafe void glFragmentLightfSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, float param)
        {
            _glFragmentLightfSGIX(light, pname, param);
        }
        
        public static unsafe delegate*<FragmentLightNameSGIX, FragmentLightParameterSGIX, IntPtr, void> _glFragmentLightfvSGIX;
        
        public static unsafe void glFragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ref float @params)
        {
            _glFragmentLightfvSGIX(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<FragmentLightNameSGIX, FragmentLightParameterSGIX, int, void> _glFragmentLightiSGIX;
        
        public static unsafe void glFragmentLightiSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, int param)
        {
            _glFragmentLightiSGIX(light, pname, param);
        }
        
        public static unsafe delegate*<FragmentLightNameSGIX, FragmentLightParameterSGIX, IntPtr, void> _glFragmentLightivSGIX;
        
        public static unsafe void glFragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ref int @params)
        {
            _glFragmentLightivSGIX(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, float, void> _glFragmentMaterialfSGIX;
        
        public static unsafe void glFragmentMaterialfSGIX(MaterialFace face, MaterialParameter pname, float param)
        {
            _glFragmentMaterialfSGIX(face, pname, param);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glFragmentMaterialfvSGIX;
        
        public static unsafe void glFragmentMaterialfvSGIX(MaterialFace face, MaterialParameter pname, ref float @params)
        {
            _glFragmentMaterialfvSGIX(face, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, int, void> _glFragmentMaterialiSGIX;
        
        public static unsafe void glFragmentMaterialiSGIX(MaterialFace face, MaterialParameter pname, int param)
        {
            _glFragmentMaterialiSGIX(face, pname, param);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glFragmentMaterialivSGIX;
        
        public static unsafe void glFragmentMaterialivSGIX(MaterialFace face, MaterialParameter pname, ref int @params)
        {
            _glFragmentMaterialivSGIX(face, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<void> _glFrameTerminatorGREMEDY;
        
        public static unsafe void glFrameTerminatorGREMEDY()
        {
            _glFrameTerminatorGREMEDY();
        }
        
        public static unsafe delegate*<int, void> _glFrameZoomSGIX;
        
        public static unsafe void glFrameZoomSGIX(int factor)
        {
            _glFrameZoomSGIX(factor);
        }
        
        public static unsafe delegate*<uint, DrawBufferMode, void> _glFramebufferDrawBufferEXT;
        
        public static unsafe void glFramebufferDrawBufferEXT(uint framebuffer, DrawBufferMode mode)
        {
            _glFramebufferDrawBufferEXT(framebuffer, mode);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glFramebufferDrawBuffersEXT;
        
        public static unsafe void glFramebufferDrawBuffersEXT(uint framebuffer, int n, ref DrawBufferMode bufs)
        {
            _glFramebufferDrawBuffersEXT(framebuffer, n, (IntPtr)bufs);
        }
        
        public static unsafe delegate*<void> _glFramebufferFetchBarrierEXT;
        
        public static unsafe void glFramebufferFetchBarrierEXT()
        {
            _glFramebufferFetchBarrierEXT();
        }
        
        public static unsafe delegate*<void> _glFramebufferFetchBarrierQCOM;
        
        public static unsafe void glFramebufferFetchBarrierQCOM()
        {
            _glFramebufferFetchBarrierQCOM();
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, IntPtr, void> _glFramebufferFoveationConfigQCOM;
        
        public static unsafe void glFramebufferFoveationConfigQCOM(uint framebuffer, uint numLayers, uint focalPointsPerLayer, uint requestedFeatures, ref uint providedFeatures)
        {
            _glFramebufferFoveationConfigQCOM(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, (IntPtr)providedFeatures);
        }
        
        public static unsafe delegate*<uint, uint, uint, float, float, float, float, float, void> _glFramebufferFoveationParametersQCOM;
        
        public static unsafe void glFramebufferFoveationParametersQCOM(uint framebuffer, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea)
        {
            _glFramebufferFoveationParametersQCOM(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferParameterName, int, void> _glFramebufferParameteri;
        
        public static unsafe void glFramebufferParameteri(FramebufferTarget target, FramebufferParameterName pname, int param)
        {
            _glFramebufferParameteri(target, pname, param);
        }
        
        public static unsafe delegate*<uint, int, void> _glFramebufferPixelLocalStorageSizeEXT;
        
        public static unsafe void glFramebufferPixelLocalStorageSizeEXT(uint target, int size)
        {
            _glFramebufferPixelLocalStorageSizeEXT(target, size);
        }
        
        public static unsafe delegate*<uint, ReadBufferMode, void> _glFramebufferReadBufferEXT;
        
        public static unsafe void glFramebufferReadBufferEXT(uint framebuffer, ReadBufferMode mode)
        {
            _glFramebufferReadBufferEXT(framebuffer, mode);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, RenderbufferTarget, uint, void> _glFramebufferRenderbuffer;
        
        public static unsafe void glFramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
        {
            _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, RenderbufferTarget, uint, void> _glFramebufferRenderbufferEXT;
        
        public static unsafe void glFramebufferRenderbufferEXT(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
        {
            _glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, RenderbufferTarget, uint, void> _glFramebufferRenderbufferOES;
        
        public static unsafe void glFramebufferRenderbufferOES(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
        {
            _glFramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer);
        }
        
        public static unsafe delegate*<FramebufferTarget, uint, int, IntPtr, void> _glFramebufferSampleLocationsfvARB;
        
        public static unsafe void glFramebufferSampleLocationsfvARB(FramebufferTarget target, uint start, int count, ref float v)
        {
            _glFramebufferSampleLocationsfvARB(target, start, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<FramebufferTarget, uint, int, IntPtr, void> _glFramebufferSampleLocationsfvNV;
        
        public static unsafe void glFramebufferSampleLocationsfvNV(FramebufferTarget target, uint start, int count, ref float v)
        {
            _glFramebufferSampleLocationsfvNV(target, start, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<FramebufferTarget, uint, uint, IntPtr, void> _glFramebufferSamplePositionsfvAMD;
        
        public static unsafe void glFramebufferSamplePositionsfvAMD(FramebufferTarget target, uint numsamples, uint pixelindex, ref float values)
        {
            _glFramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, (IntPtr)values);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, uint, int, void> _glFramebufferTexture;
        
        public static unsafe void glFramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
        {
            _glFramebufferTexture(target, attachment, texture, level);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, void> _glFramebufferTexture1D;
        
        public static unsafe void glFramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
        {
            _glFramebufferTexture1D(target, attachment, textarget, texture, level);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, void> _glFramebufferTexture1DEXT;
        
        public static unsafe void glFramebufferTexture1DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
        {
            _glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, void> _glFramebufferTexture2D;
        
        public static unsafe void glFramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
        {
            _glFramebufferTexture2D(target, attachment, textarget, texture, level);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, void> _glFramebufferTexture2DEXT;
        
        public static unsafe void glFramebufferTexture2DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
        {
            _glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, int, int, void> _glFramebufferTexture2DDownsampleIMG;
        
        public static unsafe void glFramebufferTexture2DDownsampleIMG(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int xscale, int yscale)
        {
            _glFramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, int, void> _glFramebufferTexture2DMultisampleEXT;
        
        public static unsafe void glFramebufferTexture2DMultisampleEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int samples)
        {
            _glFramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, int, void> _glFramebufferTexture2DMultisampleIMG;
        
        public static unsafe void glFramebufferTexture2DMultisampleIMG(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int samples)
        {
            _glFramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, void> _glFramebufferTexture2DOES;
        
        public static unsafe void glFramebufferTexture2DOES(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
        {
            _glFramebufferTexture2DOES(target, attachment, textarget, texture, level);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, int, void> _glFramebufferTexture3D;
        
        public static unsafe void glFramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
        {
            _glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, int, void> _glFramebufferTexture3DEXT;
        
        public static unsafe void glFramebufferTexture3DEXT(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
        {
            _glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, int, void> _glFramebufferTexture3DOES;
        
        public static unsafe void glFramebufferTexture3DOES(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
        {
            _glFramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, uint, int, void> _glFramebufferTextureARB;
        
        public static unsafe void glFramebufferTextureARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
        {
            _glFramebufferTextureARB(target, attachment, texture, level);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, uint, int, void> _glFramebufferTextureEXT;
        
        public static unsafe void glFramebufferTextureEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
        {
            _glFramebufferTextureEXT(target, attachment, texture, level);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, uint, int, TextureTarget, void> _glFramebufferTextureFaceARB;
        
        public static unsafe void glFramebufferTextureFaceARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face)
        {
            _glFramebufferTextureFaceARB(target, attachment, texture, level, face);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, uint, int, TextureTarget, void> _glFramebufferTextureFaceEXT;
        
        public static unsafe void glFramebufferTextureFaceEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, TextureTarget face)
        {
            _glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, uint, int, int, void> _glFramebufferTextureLayer;
        
        public static unsafe void glFramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
        {
            _glFramebufferTextureLayer(target, attachment, texture, level, layer);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, uint, int, int, void> _glFramebufferTextureLayerARB;
        
        public static unsafe void glFramebufferTextureLayerARB(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
        {
            _glFramebufferTextureLayerARB(target, attachment, texture, level, layer);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, uint, int, int, void> _glFramebufferTextureLayerEXT;
        
        public static unsafe void glFramebufferTextureLayerEXT(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
        {
            _glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, uint, int, int, int, int, void> _glFramebufferTextureLayerDownsampleIMG;
        
        public static unsafe void glFramebufferTextureLayerDownsampleIMG(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer, int xscale, int yscale)
        {
            _glFramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, uint, int, int, int, int, void> _glFramebufferTextureMultisampleMultiviewOVR;
        
        public static unsafe void glFramebufferTextureMultisampleMultiviewOVR(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int samples, int baseViewIndex, int numViews)
        {
            _glFramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, uint, int, int, int, void> _glFramebufferTextureMultiviewOVR;
        
        public static unsafe void glFramebufferTextureMultiviewOVR(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int baseViewIndex, int numViews)
        {
            _glFramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, uint, int, void> _glFramebufferTextureOES;
        
        public static unsafe void glFramebufferTextureOES(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
        {
            _glFramebufferTextureOES(target, attachment, texture, level);
        }
        
        public static unsafe delegate*<uint, void> _glFreeObjectBufferATI;
        
        public static unsafe void glFreeObjectBufferATI(uint buffer)
        {
            _glFreeObjectBufferATI(buffer);
        }
        
        public static unsafe delegate*<FrontFaceDirection, void> _glFrontFace;
        
        public static unsafe void glFrontFace(FrontFaceDirection mode)
        {
            _glFrontFace(mode);
        }
        
        public static unsafe delegate*<double, double, double, double, double, double, void> _glFrustum;
        
        public static unsafe void glFrustum(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            _glFrustum(left, right, bottom, top, zNear, zFar);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, void> _glFrustumf;
        
        public static unsafe void glFrustumf(float l, float r, float b, float t, float n, float f)
        {
            _glFrustumf(l, r, b, t, n, f);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, void> _glFrustumfOES;
        
        public static unsafe void glFrustumfOES(float l, float r, float b, float t, float n, float f)
        {
            _glFrustumfOES(l, r, b, t, n, f);
        }
        
        public static unsafe delegate*<int, int, int, int, int, int, void> _glFrustumx;
        
        public static unsafe void glFrustumx(int l, int r, int b, int t, int n, int f)
        {
            _glFrustumx(l, r, b, t, n, f);
        }
        
        public static unsafe delegate*<int, int, int, int, int, int, void> _glFrustumxOES;
        
        public static unsafe void glFrustumxOES(int l, int r, int b, int t, int n, int f)
        {
            _glFrustumxOES(l, r, b, t, n, f);
        }
        
        public static unsafe delegate*<int, uint> _glGenAsyncMarkersSGIX;
        
        public static unsafe uint glGenAsyncMarkersSGIX(int range)
        {
            return _glGenAsyncMarkersSGIX(range);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenBuffers;
        
        public static unsafe void glGenBuffers(int n, ref uint buffers)
        {
            _glGenBuffers(n, (IntPtr)buffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenBuffersARB;
        
        public static unsafe void glGenBuffersARB(int n, ref uint buffers)
        {
            _glGenBuffersARB(n, (IntPtr)buffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenFencesAPPLE;
        
        public static unsafe void glGenFencesAPPLE(int n, ref uint fences)
        {
            _glGenFencesAPPLE(n, (IntPtr)fences);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenFencesNV;
        
        public static unsafe void glGenFencesNV(int n, ref uint fences)
        {
            _glGenFencesNV(n, (IntPtr)fences);
        }
        
        public static unsafe delegate*<uint, uint> _glGenFragmentShadersATI;
        
        public static unsafe uint glGenFragmentShadersATI(uint range)
        {
            return _glGenFragmentShadersATI(range);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenFramebuffers;
        
        public static unsafe void glGenFramebuffers(int n, ref uint framebuffers)
        {
            _glGenFramebuffers(n, (IntPtr)framebuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenFramebuffersEXT;
        
        public static unsafe void glGenFramebuffersEXT(int n, ref uint framebuffers)
        {
            _glGenFramebuffersEXT(n, (IntPtr)framebuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenFramebuffersOES;
        
        public static unsafe void glGenFramebuffersOES(int n, ref uint framebuffers)
        {
            _glGenFramebuffersOES(n, (IntPtr)framebuffers);
        }
        
        public static unsafe delegate*<int, uint> _glGenLists;
        
        public static unsafe uint glGenLists(int range)
        {
            return _glGenLists(range);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGenNamesAMD;
        
        public static unsafe void glGenNamesAMD(uint identifier, uint num, ref uint names)
        {
            _glGenNamesAMD(identifier, num, (IntPtr)names);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenOcclusionQueriesNV;
        
        public static unsafe void glGenOcclusionQueriesNV(int n, ref uint ids)
        {
            _glGenOcclusionQueriesNV(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, uint> _glGenPathsNV;
        
        public static unsafe uint glGenPathsNV(int range)
        {
            return _glGenPathsNV(range);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenPerfMonitorsAMD;
        
        public static unsafe void glGenPerfMonitorsAMD(int n, ref uint monitors)
        {
            _glGenPerfMonitorsAMD(n, (IntPtr)monitors);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenProgramPipelines;
        
        public static unsafe void glGenProgramPipelines(int n, ref uint pipelines)
        {
            _glGenProgramPipelines(n, (IntPtr)pipelines);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenProgramPipelinesEXT;
        
        public static unsafe void glGenProgramPipelinesEXT(int n, ref uint pipelines)
        {
            _glGenProgramPipelinesEXT(n, (IntPtr)pipelines);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenProgramsARB;
        
        public static unsafe void glGenProgramsARB(int n, ref uint programs)
        {
            _glGenProgramsARB(n, (IntPtr)programs);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenProgramsNV;
        
        public static unsafe void glGenProgramsNV(int n, ref uint programs)
        {
            _glGenProgramsNV(n, (IntPtr)programs);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenQueries;
        
        public static unsafe void glGenQueries(int n, ref uint ids)
        {
            _glGenQueries(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenQueriesARB;
        
        public static unsafe void glGenQueriesARB(int n, ref uint ids)
        {
            _glGenQueriesARB(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenQueriesEXT;
        
        public static unsafe void glGenQueriesEXT(int n, ref uint ids)
        {
            _glGenQueriesEXT(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenQueryResourceTagNV;
        
        public static unsafe void glGenQueryResourceTagNV(int n, ref int tagIds)
        {
            _glGenQueryResourceTagNV(n, (IntPtr)tagIds);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenRenderbuffers;
        
        public static unsafe void glGenRenderbuffers(int n, ref uint renderbuffers)
        {
            _glGenRenderbuffers(n, (IntPtr)renderbuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenRenderbuffersEXT;
        
        public static unsafe void glGenRenderbuffersEXT(int n, ref uint renderbuffers)
        {
            _glGenRenderbuffersEXT(n, (IntPtr)renderbuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenRenderbuffersOES;
        
        public static unsafe void glGenRenderbuffersOES(int n, ref uint renderbuffers)
        {
            _glGenRenderbuffersOES(n, (IntPtr)renderbuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenSamplers;
        
        public static unsafe void glGenSamplers(int count, ref uint samplers)
        {
            _glGenSamplers(count, (IntPtr)samplers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenSemaphoresEXT;
        
        public static unsafe void glGenSemaphoresEXT(int n, ref uint semaphores)
        {
            _glGenSemaphoresEXT(n, (IntPtr)semaphores);
        }
        
        public static unsafe delegate*<DataTypeEXT, VertexShaderStorageTypeEXT, ParameterRangeEXT, uint, uint> _glGenSymbolsEXT;
        
        public static unsafe uint glGenSymbolsEXT(DataTypeEXT datatype, VertexShaderStorageTypeEXT storagetype, ParameterRangeEXT range, uint components)
        {
            return _glGenSymbolsEXT(datatype, storagetype, range, components);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenTextures;
        
        public static unsafe void glGenTextures(int n, ref uint textures)
        {
            _glGenTextures(n, (IntPtr)textures);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenTexturesEXT;
        
        public static unsafe void glGenTexturesEXT(int n, ref uint textures)
        {
            _glGenTexturesEXT(n, (IntPtr)textures);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenTransformFeedbacks;
        
        public static unsafe void glGenTransformFeedbacks(int n, ref uint ids)
        {
            _glGenTransformFeedbacks(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenTransformFeedbacksNV;
        
        public static unsafe void glGenTransformFeedbacksNV(int n, ref uint ids)
        {
            _glGenTransformFeedbacksNV(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenVertexArrays;
        
        public static unsafe void glGenVertexArrays(int n, ref uint arrays)
        {
            _glGenVertexArrays(n, (IntPtr)arrays);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenVertexArraysAPPLE;
        
        public static unsafe void glGenVertexArraysAPPLE(int n, ref uint arrays)
        {
            _glGenVertexArraysAPPLE(n, (IntPtr)arrays);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenVertexArraysOES;
        
        public static unsafe void glGenVertexArraysOES(int n, ref uint arrays)
        {
            _glGenVertexArraysOES(n, (IntPtr)arrays);
        }
        
        public static unsafe delegate*<uint, uint> _glGenVertexShadersEXT;
        
        public static unsafe uint glGenVertexShadersEXT(uint range)
        {
            return _glGenVertexShadersEXT(range);
        }
        
        public static unsafe delegate*<TextureTarget, void> _glGenerateMipmap;
        
        public static unsafe void glGenerateMipmap(TextureTarget target)
        {
            _glGenerateMipmap(target);
        }
        
        public static unsafe delegate*<TextureTarget, void> _glGenerateMipmapEXT;
        
        public static unsafe void glGenerateMipmapEXT(TextureTarget target)
        {
            _glGenerateMipmapEXT(target);
        }
        
        public static unsafe delegate*<TextureTarget, void> _glGenerateMipmapOES;
        
        public static unsafe void glGenerateMipmapOES(TextureTarget target)
        {
            _glGenerateMipmapOES(target);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, void> _glGenerateMultiTexMipmapEXT;
        
        public static unsafe void glGenerateMultiTexMipmapEXT(TextureUnit texunit, TextureTarget target)
        {
            _glGenerateMultiTexMipmapEXT(texunit, target);
        }
        
        public static unsafe delegate*<uint, void> _glGenerateTextureMipmap;
        
        public static unsafe void glGenerateTextureMipmap(uint texture)
        {
            _glGenerateTextureMipmap(texture);
        }
        
        public static unsafe delegate*<uint, TextureTarget, void> _glGenerateTextureMipmapEXT;
        
        public static unsafe void glGenerateTextureMipmapEXT(uint texture, TextureTarget target)
        {
            _glGenerateTextureMipmapEXT(texture, target);
        }
        
        public static unsafe delegate*<uint, uint, AtomicCounterBufferPName, IntPtr, void> _glGetActiveAtomicCounterBufferiv;
        
        public static unsafe void glGetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, AtomicCounterBufferPName pname, ref int @params)
        {
            _glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, IntPtr, IntPtr, void> _glGetActiveAttrib;
        
        public static unsafe void glGetActiveAttrib(uint program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type, ref sbyte name)
        {
            _glGetActiveAttrib(program, index, bufSize, (IntPtr)length, (IntPtr)size, (IntPtr)type, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, IntPtr, IntPtr, void> _glGetActiveAttribARB;
        
        public static unsafe void glGetActiveAttribARB(uint programObj, uint index, int maxLength, ref int length, ref int size, ref AttributeType type, ref sbyte name)
        {
            _glGetActiveAttribARB(programObj, index, maxLength, (IntPtr)length, (IntPtr)size, (IntPtr)type, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ShaderType, uint, int, IntPtr, IntPtr, void> _glGetActiveSubroutineName;
        
        public static unsafe void glGetActiveSubroutineName(uint program, ShaderType shadertype, uint index, int bufSize, ref int length, ref sbyte name)
        {
            _glGetActiveSubroutineName(program, shadertype, index, bufSize, (IntPtr)length, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ShaderType, uint, int, IntPtr, IntPtr, void> _glGetActiveSubroutineUniformName;
        
        public static unsafe void glGetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, int bufSize, ref int length, ref sbyte name)
        {
            _glGetActiveSubroutineUniformName(program, shadertype, index, bufSize, (IntPtr)length, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ShaderType, uint, SubroutineParameterName, IntPtr, void> _glGetActiveSubroutineUniformiv;
        
        public static unsafe void glGetActiveSubroutineUniformiv(uint program, ShaderType shadertype, uint index, SubroutineParameterName pname, ref int values)
        {
            _glGetActiveSubroutineUniformiv(program, shadertype, index, pname, (IntPtr)values);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, IntPtr, IntPtr, void> _glGetActiveUniform;
        
        public static unsafe void glGetActiveUniform(uint program, uint index, int bufSize, ref int length, ref int size, ref UniformType type, ref sbyte name)
        {
            _glGetActiveUniform(program, index, bufSize, (IntPtr)length, (IntPtr)size, (IntPtr)type, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, IntPtr, IntPtr, void> _glGetActiveUniformARB;
        
        public static unsafe void glGetActiveUniformARB(uint programObj, uint index, int maxLength, ref int length, ref int size, ref UniformType type, ref sbyte name)
        {
            _glGetActiveUniformARB(programObj, index, maxLength, (IntPtr)length, (IntPtr)size, (IntPtr)type, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, void> _glGetActiveUniformBlockName;
        
        public static unsafe void glGetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, ref int length, ref sbyte uniformBlockName)
        {
            _glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, (IntPtr)length, (IntPtr)uniformBlockName);
        }
        
        public static unsafe delegate*<uint, uint, UniformBlockPName, IntPtr, void> _glGetActiveUniformBlockiv;
        
        public static unsafe void glGetActiveUniformBlockiv(uint program, uint uniformBlockIndex, UniformBlockPName pname, ref int @params)
        {
            _glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, void> _glGetActiveUniformName;
        
        public static unsafe void glGetActiveUniformName(uint program, uint uniformIndex, int bufSize, ref int length, ref sbyte uniformName)
        {
            _glGetActiveUniformName(program, uniformIndex, bufSize, (IntPtr)length, (IntPtr)uniformName);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, UniformPName, IntPtr, void> _glGetActiveUniformsiv;
        
        public static unsafe void glGetActiveUniformsiv(uint program, int uniformCount, ref uint uniformIndices, UniformPName pname, ref int @params)
        {
            _glGetActiveUniformsiv(program, uniformCount, (IntPtr)uniformIndices, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, IntPtr, IntPtr, void> _glGetActiveVaryingNV;
        
        public static unsafe void glGetActiveVaryingNV(uint program, uint index, int bufSize, ref int length, ref int size, ref uint type, ref sbyte name)
        {
            _glGetActiveVaryingNV(program, index, bufSize, (IntPtr)length, (IntPtr)size, (IntPtr)type, (IntPtr)name);
        }
        
        public static unsafe delegate*<EnableCap, ArrayObjectPNameATI, IntPtr, void> _glGetArrayObjectfvATI;
        
        public static unsafe void glGetArrayObjectfvATI(EnableCap array, ArrayObjectPNameATI pname, ref float @params)
        {
            _glGetArrayObjectfvATI(array, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<EnableCap, ArrayObjectPNameATI, IntPtr, void> _glGetArrayObjectivATI;
        
        public static unsafe void glGetArrayObjectivATI(EnableCap array, ArrayObjectPNameATI pname, ref int @params)
        {
            _glGetArrayObjectivATI(array, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetAttachedObjectsARB;
        
        public static unsafe void glGetAttachedObjectsARB(uint containerObj, int maxCount, ref int count, ref uint obj)
        {
            _glGetAttachedObjectsARB(containerObj, maxCount, (IntPtr)count, (IntPtr)obj);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetAttachedShaders;
        
        public static unsafe void glGetAttachedShaders(uint program, int maxCount, ref int count, ref uint shaders)
        {
            _glGetAttachedShaders(program, maxCount, (IntPtr)count, (IntPtr)shaders);
        }
        
        public static unsafe delegate*<uint, IntPtr, int> _glGetAttribLocation;
        
        public static unsafe int glGetAttribLocation(uint program, ref sbyte name)
        {
            return _glGetAttribLocation(program, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, IntPtr, int> _glGetAttribLocationARB;
        
        public static unsafe int glGetAttribLocationARB(uint programObj, ref sbyte name)
        {
            return _glGetAttribLocationARB(programObj, (IntPtr)name);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, IntPtr, void> _glGetBooleanIndexedvEXT;
        
        public static unsafe void glGetBooleanIndexedvEXT(BufferTargetARB target, uint index, ref byte data)
        {
            _glGetBooleanIndexedvEXT(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, IntPtr, void> _glGetBooleani_v;
        
        public static unsafe void glGetBooleani_v(BufferTargetARB target, uint index, ref byte data)
        {
            _glGetBooleani_v(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetBooleanv;
        
        public static unsafe void glGetBooleanv(GetPName pname, ref byte data)
        {
            _glGetBooleanv(pname, (IntPtr)data);
        }
        
        public static unsafe delegate*<BufferTargetARB, BufferPNameARB, IntPtr, void> _glGetBufferParameteri64v;
        
        public static unsafe void glGetBufferParameteri64v(BufferTargetARB target, BufferPNameARB pname, ref long @params)
        {
            _glGetBufferParameteri64v(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<BufferTargetARB, BufferPNameARB, IntPtr, void> _glGetBufferParameteriv;
        
        public static unsafe void glGetBufferParameteriv(BufferTargetARB target, BufferPNameARB pname, ref int @params)
        {
            _glGetBufferParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<BufferTargetARB, BufferPNameARB, IntPtr, void> _glGetBufferParameterivARB;
        
        public static unsafe void glGetBufferParameterivARB(BufferTargetARB target, BufferPNameARB pname, ref int @params)
        {
            _glGetBufferParameterivARB(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, IntPtr, void> _glGetBufferParameterui64vNV;
        
        public static unsafe void glGetBufferParameterui64vNV(BufferTargetARB target, uint pname, ref ulong @params)
        {
            _glGetBufferParameterui64vNV(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<BufferTargetARB, BufferPointerNameARB, IntPtr, void> _glGetBufferPointerv;
        
        public static unsafe void glGetBufferPointerv(BufferTargetARB target, BufferPointerNameARB pname, out IntPtr @params)
        {
            _glGetBufferPointerv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<BufferTargetARB, BufferPointerNameARB, IntPtr, void> _glGetBufferPointervARB;
        
        public static unsafe void glGetBufferPointervARB(BufferTargetARB target, BufferPointerNameARB pname, out IntPtr @params)
        {
            _glGetBufferPointervARB(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<BufferTargetARB, BufferPointerNameARB, IntPtr, void> _glGetBufferPointervOES;
        
        public static unsafe void glGetBufferPointervOES(BufferTargetARB target, BufferPointerNameARB pname, out IntPtr @params)
        {
            _glGetBufferPointervOES(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, long, IntPtr, void> _glGetBufferSubData;
        
        public static unsafe void glGetBufferSubData(BufferTargetARB target, long offset, long size, IntPtr data)
        {
            _glGetBufferSubData(target, offset, size, (IntPtr)data);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, long, IntPtr, void> _glGetBufferSubDataARB;
        
        public static unsafe void glGetBufferSubDataARB(BufferTargetARB target, long offset, long size, IntPtr data)
        {
            _glGetBufferSubDataARB(target, offset, size, (IntPtr)data);
        }
        
        public static unsafe delegate*<ClipPlaneName, IntPtr, void> _glGetClipPlane;
        
        public static unsafe void glGetClipPlane(ClipPlaneName plane, ref double equation)
        {
            _glGetClipPlane(plane, (IntPtr)equation);
        }
        
        public static unsafe delegate*<ClipPlaneName, IntPtr, void> _glGetClipPlanef;
        
        public static unsafe void glGetClipPlanef(ClipPlaneName plane, ref float equation)
        {
            _glGetClipPlanef(plane, (IntPtr)equation);
        }
        
        public static unsafe delegate*<ClipPlaneName, IntPtr, void> _glGetClipPlanefOES;
        
        public static unsafe void glGetClipPlanefOES(ClipPlaneName plane, ref float equation)
        {
            _glGetClipPlanefOES(plane, (IntPtr)equation);
        }
        
        public static unsafe delegate*<ClipPlaneName, IntPtr, void> _glGetClipPlanex;
        
        public static unsafe void glGetClipPlanex(ClipPlaneName plane, ref int equation)
        {
            _glGetClipPlanex(plane, (IntPtr)equation);
        }
        
        public static unsafe delegate*<ClipPlaneName, IntPtr, void> _glGetClipPlanexOES;
        
        public static unsafe void glGetClipPlanexOES(ClipPlaneName plane, ref int equation)
        {
            _glGetClipPlanexOES(plane, (IntPtr)equation);
        }
        
        public static unsafe delegate*<ColorTableTarget, PixelFormat, PixelType, IntPtr, void> _glGetColorTable;
        
        public static unsafe void glGetColorTable(ColorTableTarget target, PixelFormat format, PixelType type, IntPtr table)
        {
            _glGetColorTable(target, format, type, (IntPtr)table);
        }
        
        public static unsafe delegate*<ColorTableTarget, PixelFormat, PixelType, IntPtr, void> _glGetColorTableEXT;
        
        public static unsafe void glGetColorTableEXT(ColorTableTarget target, PixelFormat format, PixelType type, IntPtr data)
        {
            _glGetColorTableEXT(target, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<ColorTableTarget, GetColorTableParameterPNameSGI, IntPtr, void> _glGetColorTableParameterfv;
        
        public static unsafe void glGetColorTableParameterfv(ColorTableTarget target, GetColorTableParameterPNameSGI pname, ref float @params)
        {
            _glGetColorTableParameterfv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ColorTableTarget, GetColorTableParameterPNameSGI, IntPtr, void> _glGetColorTableParameterfvEXT;
        
        public static unsafe void glGetColorTableParameterfvEXT(ColorTableTarget target, GetColorTableParameterPNameSGI pname, ref float @params)
        {
            _glGetColorTableParameterfvEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ColorTableTargetSGI, GetColorTableParameterPNameSGI, IntPtr, void> _glGetColorTableParameterfvSGI;
        
        public static unsafe void glGetColorTableParameterfvSGI(ColorTableTargetSGI target, GetColorTableParameterPNameSGI pname, ref float @params)
        {
            _glGetColorTableParameterfvSGI(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ColorTableTarget, GetColorTableParameterPNameSGI, IntPtr, void> _glGetColorTableParameteriv;
        
        public static unsafe void glGetColorTableParameteriv(ColorTableTarget target, GetColorTableParameterPNameSGI pname, ref int @params)
        {
            _glGetColorTableParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ColorTableTarget, GetColorTableParameterPNameSGI, IntPtr, void> _glGetColorTableParameterivEXT;
        
        public static unsafe void glGetColorTableParameterivEXT(ColorTableTarget target, GetColorTableParameterPNameSGI pname, ref int @params)
        {
            _glGetColorTableParameterivEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ColorTableTargetSGI, GetColorTableParameterPNameSGI, IntPtr, void> _glGetColorTableParameterivSGI;
        
        public static unsafe void glGetColorTableParameterivSGI(ColorTableTargetSGI target, GetColorTableParameterPNameSGI pname, ref int @params)
        {
            _glGetColorTableParameterivSGI(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ColorTableTargetSGI, PixelFormat, PixelType, IntPtr, void> _glGetColorTableSGI;
        
        public static unsafe void glGetColorTableSGI(ColorTableTargetSGI target, PixelFormat format, PixelType type, IntPtr table)
        {
            _glGetColorTableSGI(target, format, type, (IntPtr)table);
        }
        
        public static unsafe delegate*<CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, IntPtr, void> _glGetCombinerInputParameterfvNV;
        
        public static unsafe void glGetCombinerInputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, ref float @params)
        {
            _glGetCombinerInputParameterfvNV(stage, portion, variable, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<CombinerStageNV, CombinerPortionNV, CombinerVariableNV, CombinerParameterNV, IntPtr, void> _glGetCombinerInputParameterivNV;
        
        public static unsafe void glGetCombinerInputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerVariableNV variable, CombinerParameterNV pname, ref int @params)
        {
            _glGetCombinerInputParameterivNV(stage, portion, variable, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<CombinerStageNV, CombinerPortionNV, CombinerParameterNV, IntPtr, void> _glGetCombinerOutputParameterfvNV;
        
        public static unsafe void glGetCombinerOutputParameterfvNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, ref float @params)
        {
            _glGetCombinerOutputParameterfvNV(stage, portion, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<CombinerStageNV, CombinerPortionNV, CombinerParameterNV, IntPtr, void> _glGetCombinerOutputParameterivNV;
        
        public static unsafe void glGetCombinerOutputParameterivNV(CombinerStageNV stage, CombinerPortionNV portion, CombinerParameterNV pname, ref int @params)
        {
            _glGetCombinerOutputParameterivNV(stage, portion, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<CombinerStageNV, CombinerParameterNV, IntPtr, void> _glGetCombinerStageParameterfvNV;
        
        public static unsafe void glGetCombinerStageParameterfvNV(CombinerStageNV stage, CombinerParameterNV pname, ref float @params)
        {
            _glGetCombinerStageParameterfvNV(stage, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, uint> _glGetCommandHeaderNV;
        
        public static unsafe uint glGetCommandHeaderNV(uint tokenID, uint size)
        {
            return _glGetCommandHeaderNV(tokenID, size);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, IntPtr, void> _glGetCompressedMultiTexImageEXT;
        
        public static unsafe void glGetCompressedMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int lod, IntPtr img)
        {
            _glGetCompressedMultiTexImageEXT(texunit, target, lod, (IntPtr)img);
        }
        
        public static unsafe delegate*<TextureTarget, int, IntPtr, void> _glGetCompressedTexImage;
        
        public static unsafe void glGetCompressedTexImage(TextureTarget target, int level, IntPtr img)
        {
            _glGetCompressedTexImage(target, level, (IntPtr)img);
        }
        
        public static unsafe delegate*<TextureTarget, int, IntPtr, void> _glGetCompressedTexImageARB;
        
        public static unsafe void glGetCompressedTexImageARB(TextureTarget target, int level, IntPtr img)
        {
            _glGetCompressedTexImageARB(target, level, (IntPtr)img);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetCompressedTextureImage;
        
        public static unsafe void glGetCompressedTextureImage(uint texture, int level, int bufSize, IntPtr pixels)
        {
            _glGetCompressedTextureImage(texture, level, bufSize, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, IntPtr, void> _glGetCompressedTextureImageEXT;
        
        public static unsafe void glGetCompressedTextureImageEXT(uint texture, TextureTarget target, int lod, IntPtr img)
        {
            _glGetCompressedTextureImageEXT(texture, target, lod, (IntPtr)img);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, int, IntPtr, void> _glGetCompressedTextureSubImage;
        
        public static unsafe void glGetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels)
        {
            _glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<ConvolutionTarget, PixelFormat, PixelType, IntPtr, void> _glGetConvolutionFilter;
        
        public static unsafe void glGetConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, IntPtr image)
        {
            _glGetConvolutionFilter(target, format, type, (IntPtr)image);
        }
        
        public static unsafe delegate*<ConvolutionTargetEXT, PixelFormat, PixelType, IntPtr, void> _glGetConvolutionFilterEXT;
        
        public static unsafe void glGetConvolutionFilterEXT(ConvolutionTargetEXT target, PixelFormat format, PixelType type, IntPtr image)
        {
            _glGetConvolutionFilterEXT(target, format, type, (IntPtr)image);
        }
        
        public static unsafe delegate*<ConvolutionTarget, ConvolutionParameterEXT, IntPtr, void> _glGetConvolutionParameterfv;
        
        public static unsafe void glGetConvolutionParameterfv(ConvolutionTarget target, ConvolutionParameterEXT pname, ref float @params)
        {
            _glGetConvolutionParameterfv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ConvolutionTargetEXT, ConvolutionParameterEXT, IntPtr, void> _glGetConvolutionParameterfvEXT;
        
        public static unsafe void glGetConvolutionParameterfvEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, ref float @params)
        {
            _glGetConvolutionParameterfvEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ConvolutionTarget, ConvolutionParameterEXT, IntPtr, void> _glGetConvolutionParameteriv;
        
        public static unsafe void glGetConvolutionParameteriv(ConvolutionTarget target, ConvolutionParameterEXT pname, ref int @params)
        {
            _glGetConvolutionParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ConvolutionTargetEXT, ConvolutionParameterEXT, IntPtr, void> _glGetConvolutionParameterivEXT;
        
        public static unsafe void glGetConvolutionParameterivEXT(ConvolutionTargetEXT target, ConvolutionParameterEXT pname, ref int @params)
        {
            _glGetConvolutionParameterivEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetConvolutionParameterxvOES;
        
        public static unsafe void glGetConvolutionParameterxvOES(uint target, uint pname, ref int @params)
        {
            _glGetConvolutionParameterxvOES(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGetCoverageModulationTableNV;
        
        public static unsafe void glGetCoverageModulationTableNV(int bufSize, ref float v)
        {
            _glGetCoverageModulationTableNV(bufSize, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, uint> _glGetDebugMessageLog;
        
        public static unsafe uint glGetDebugMessageLog(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, ref sbyte messageLog)
        {
            return _glGetDebugMessageLog(count, bufSize, (IntPtr)sources, (IntPtr)types, (IntPtr)ids, (IntPtr)severities, (IntPtr)lengths, (IntPtr)messageLog);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, uint> _glGetDebugMessageLogAMD;
        
        public static unsafe uint glGetDebugMessageLogAMD(uint count, int bufSize, ref uint categories, ref uint severities, ref uint ids, ref int lengths, ref sbyte message)
        {
            return _glGetDebugMessageLogAMD(count, bufSize, (IntPtr)categories, (IntPtr)severities, (IntPtr)ids, (IntPtr)lengths, (IntPtr)message);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, uint> _glGetDebugMessageLogARB;
        
        public static unsafe uint glGetDebugMessageLogARB(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, ref sbyte messageLog)
        {
            return _glGetDebugMessageLogARB(count, bufSize, (IntPtr)sources, (IntPtr)types, (IntPtr)ids, (IntPtr)severities, (IntPtr)lengths, (IntPtr)messageLog);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, uint> _glGetDebugMessageLogKHR;
        
        public static unsafe uint glGetDebugMessageLogKHR(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, ref sbyte messageLog)
        {
            return _glGetDebugMessageLogKHR(count, bufSize, (IntPtr)sources, (IntPtr)types, (IntPtr)ids, (IntPtr)severities, (IntPtr)lengths, (IntPtr)messageLog);
        }
        
        public static unsafe delegate*<TextureTarget, IntPtr, void> _glGetDetailTexFuncSGIS;
        
        public static unsafe void glGetDetailTexFuncSGIS(TextureTarget target, ref float points)
        {
            _glGetDetailTexFuncSGIS(target, (IntPtr)points);
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetDoubleIndexedvEXT;
        
        public static unsafe void glGetDoubleIndexedvEXT(GetPName target, uint index, ref double data)
        {
            _glGetDoubleIndexedvEXT(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetDoublei_v;
        
        public static unsafe void glGetDoublei_v(GetPName target, uint index, ref double data)
        {
            _glGetDoublei_v(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetDoublei_vEXT;
        
        public static unsafe void glGetDoublei_vEXT(GetPName pname, uint index, ref double @params)
        {
            _glGetDoublei_vEXT(pname, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetDoublev;
        
        public static unsafe void glGetDoublev(GetPName pname, ref double data)
        {
            _glGetDoublev(pname, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetDriverControlStringQCOM;
        
        public static unsafe void glGetDriverControlStringQCOM(uint driverControl, int bufSize, ref int length, ref sbyte driverControlString)
        {
            _glGetDriverControlStringQCOM(driverControl, bufSize, (IntPtr)length, (IntPtr)driverControlString);
        }
        
        public static unsafe delegate*<IntPtr, int, IntPtr, void> _glGetDriverControlsQCOM;
        
        public static unsafe void glGetDriverControlsQCOM(ref int num, int size, ref uint driverControls)
        {
            _glGetDriverControlsQCOM((IntPtr)num, size, (IntPtr)driverControls);
        }
        
        public static unsafe delegate*<uint> _glGetError;
        
        public static unsafe uint glGetError()
        {
            return _glGetError();
        }
        
        public static unsafe delegate*<uint, FenceParameterNameNV, IntPtr, void> _glGetFenceivNV;
        
        public static unsafe void glGetFenceivNV(uint fence, FenceParameterNameNV pname, ref int @params)
        {
            _glGetFenceivNV(fence, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<CombinerVariableNV, CombinerParameterNV, IntPtr, void> _glGetFinalCombinerInputParameterfvNV;
        
        public static unsafe void glGetFinalCombinerInputParameterfvNV(CombinerVariableNV variable, CombinerParameterNV pname, ref float @params)
        {
            _glGetFinalCombinerInputParameterfvNV(variable, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<CombinerVariableNV, CombinerParameterNV, IntPtr, void> _glGetFinalCombinerInputParameterivNV;
        
        public static unsafe void glGetFinalCombinerInputParameterivNV(CombinerVariableNV variable, CombinerParameterNV pname, ref int @params)
        {
            _glGetFinalCombinerInputParameterivNV(variable, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<IntPtr, void> _glGetFirstPerfQueryIdINTEL;
        
        public static unsafe void glGetFirstPerfQueryIdINTEL(ref uint queryId)
        {
            _glGetFirstPerfQueryIdINTEL((IntPtr)queryId);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetFixedv;
        
        public static unsafe void glGetFixedv(GetPName pname, ref int @params)
        {
            _glGetFixedv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetFixedvOES;
        
        public static unsafe void glGetFixedvOES(GetPName pname, ref int @params)
        {
            _glGetFixedvOES(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetFloatIndexedvEXT;
        
        public static unsafe void glGetFloatIndexedvEXT(GetPName target, uint index, ref float data)
        {
            _glGetFloatIndexedvEXT(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetFloati_v;
        
        public static unsafe void glGetFloati_v(GetPName target, uint index, ref float data)
        {
            _glGetFloati_v(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetFloati_vEXT;
        
        public static unsafe void glGetFloati_vEXT(GetPName pname, uint index, ref float @params)
        {
            _glGetFloati_vEXT(pname, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetFloati_vNV;
        
        public static unsafe void glGetFloati_vNV(GetPName target, uint index, ref float data)
        {
            _glGetFloati_vNV(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetFloati_vOES;
        
        public static unsafe void glGetFloati_vOES(GetPName target, uint index, ref float data)
        {
            _glGetFloati_vOES(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetFloatv;
        
        public static unsafe void glGetFloatv(GetPName pname, ref float data)
        {
            _glGetFloatv(pname, (IntPtr)data);
        }
        
        public static unsafe delegate*<IntPtr, void> _glGetFogFuncSGIS;
        
        public static unsafe void glGetFogFuncSGIS(ref float points)
        {
            _glGetFogFuncSGIS((IntPtr)points);
        }
        
        public static unsafe delegate*<uint, IntPtr, int> _glGetFragDataIndex;
        
        public static unsafe int glGetFragDataIndex(uint program, ref sbyte name)
        {
            return _glGetFragDataIndex(program, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, IntPtr, int> _glGetFragDataIndexEXT;
        
        public static unsafe int glGetFragDataIndexEXT(uint program, ref sbyte name)
        {
            return _glGetFragDataIndexEXT(program, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, IntPtr, int> _glGetFragDataLocation;
        
        public static unsafe int glGetFragDataLocation(uint program, ref sbyte name)
        {
            return _glGetFragDataLocation(program, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, IntPtr, int> _glGetFragDataLocationEXT;
        
        public static unsafe int glGetFragDataLocationEXT(uint program, ref sbyte name)
        {
            return _glGetFragDataLocationEXT(program, (IntPtr)name);
        }
        
        public static unsafe delegate*<FragmentLightNameSGIX, FragmentLightParameterSGIX, IntPtr, void> _glGetFragmentLightfvSGIX;
        
        public static unsafe void glGetFragmentLightfvSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ref float @params)
        {
            _glGetFragmentLightfvSGIX(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<FragmentLightNameSGIX, FragmentLightParameterSGIX, IntPtr, void> _glGetFragmentLightivSGIX;
        
        public static unsafe void glGetFragmentLightivSGIX(FragmentLightNameSGIX light, FragmentLightParameterSGIX pname, ref int @params)
        {
            _glGetFragmentLightivSGIX(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glGetFragmentMaterialfvSGIX;
        
        public static unsafe void glGetFragmentMaterialfvSGIX(MaterialFace face, MaterialParameter pname, ref float @params)
        {
            _glGetFragmentMaterialfvSGIX(face, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glGetFragmentMaterialivSGIX;
        
        public static unsafe void glGetFragmentMaterialivSGIX(MaterialFace face, MaterialParameter pname, ref int @params)
        {
            _glGetFragmentMaterialivSGIX(face, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, IntPtr, void> _glGetFramebufferAttachmentParameteriv;
        
        public static unsafe void glGetFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int @params)
        {
            _glGetFramebufferAttachmentParameteriv(target, attachment, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, IntPtr, void> _glGetFramebufferAttachmentParameterivEXT;
        
        public static unsafe void glGetFramebufferAttachmentParameterivEXT(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int @params)
        {
            _glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, IntPtr, void> _glGetFramebufferAttachmentParameterivOES;
        
        public static unsafe void glGetFramebufferAttachmentParameterivOES(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int @params)
        {
            _glGetFramebufferAttachmentParameterivOES(target, attachment, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachmentParameterName, uint, uint, int, IntPtr, void> _glGetFramebufferParameterfvAMD;
        
        public static unsafe void glGetFramebufferParameterfvAMD(FramebufferTarget target, FramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, ref float values)
        {
            _glGetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, (IntPtr)values);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachmentParameterName, IntPtr, void> _glGetFramebufferParameteriv;
        
        public static unsafe void glGetFramebufferParameteriv(FramebufferTarget target, FramebufferAttachmentParameterName pname, ref int @params)
        {
            _glGetFramebufferParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, GetFramebufferParameter, IntPtr, void> _glGetFramebufferParameterivEXT;
        
        public static unsafe void glGetFramebufferParameterivEXT(uint framebuffer, GetFramebufferParameter pname, ref int @params)
        {
            _glGetFramebufferParameterivEXT(framebuffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int> _glGetFramebufferPixelLocalStorageSizeEXT;
        
        public static unsafe int glGetFramebufferPixelLocalStorageSizeEXT(uint target)
        {
            return _glGetFramebufferPixelLocalStorageSizeEXT(target);
        }
        
        public static unsafe delegate*<uint> _glGetGraphicsResetStatus;
        
        public static unsafe uint glGetGraphicsResetStatus()
        {
            return _glGetGraphicsResetStatus();
        }
        
        public static unsafe delegate*<uint> _glGetGraphicsResetStatusARB;
        
        public static unsafe uint glGetGraphicsResetStatusARB()
        {
            return _glGetGraphicsResetStatusARB();
        }
        
        public static unsafe delegate*<uint> _glGetGraphicsResetStatusEXT;
        
        public static unsafe uint glGetGraphicsResetStatusEXT()
        {
            return _glGetGraphicsResetStatusEXT();
        }
        
        public static unsafe delegate*<uint> _glGetGraphicsResetStatusKHR;
        
        public static unsafe uint glGetGraphicsResetStatusKHR()
        {
            return _glGetGraphicsResetStatusKHR();
        }
        
        public static unsafe delegate*<uint, uint> _glGetHandleARB;
        
        public static unsafe uint glGetHandleARB(uint pname)
        {
            return _glGetHandleARB(pname);
        }
        
        public static unsafe delegate*<HistogramTargetEXT, byte, PixelFormat, PixelType, IntPtr, void> _glGetHistogram;
        
        public static unsafe void glGetHistogram(HistogramTargetEXT target, byte reset, PixelFormat format, PixelType type, IntPtr values)
        {
            _glGetHistogram(target, reset, format, type, (IntPtr)values);
        }
        
        public static unsafe delegate*<HistogramTargetEXT, byte, PixelFormat, PixelType, IntPtr, void> _glGetHistogramEXT;
        
        public static unsafe void glGetHistogramEXT(HistogramTargetEXT target, byte reset, PixelFormat format, PixelType type, IntPtr values)
        {
            _glGetHistogramEXT(target, reset, format, type, (IntPtr)values);
        }
        
        public static unsafe delegate*<HistogramTargetEXT, GetHistogramParameterPNameEXT, IntPtr, void> _glGetHistogramParameterfv;
        
        public static unsafe void glGetHistogramParameterfv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref float @params)
        {
            _glGetHistogramParameterfv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<HistogramTargetEXT, GetHistogramParameterPNameEXT, IntPtr, void> _glGetHistogramParameterfvEXT;
        
        public static unsafe void glGetHistogramParameterfvEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref float @params)
        {
            _glGetHistogramParameterfvEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<HistogramTargetEXT, GetHistogramParameterPNameEXT, IntPtr, void> _glGetHistogramParameteriv;
        
        public static unsafe void glGetHistogramParameteriv(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref int @params)
        {
            _glGetHistogramParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<HistogramTargetEXT, GetHistogramParameterPNameEXT, IntPtr, void> _glGetHistogramParameterivEXT;
        
        public static unsafe void glGetHistogramParameterivEXT(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref int @params)
        {
            _glGetHistogramParameterivEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<HistogramTargetEXT, GetHistogramParameterPNameEXT, IntPtr, void> _glGetHistogramParameterxvOES;
        
        public static unsafe void glGetHistogramParameterxvOES(HistogramTargetEXT target, GetHistogramParameterPNameEXT pname, ref int @params)
        {
            _glGetHistogramParameterxvOES(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, byte, int, PixelFormat, ulong> _glGetImageHandleARB;
        
        public static unsafe ulong glGetImageHandleARB(uint texture, int level, byte layered, int layer, PixelFormat format)
        {
            return _glGetImageHandleARB(texture, level, layered, layer, format);
        }
        
        public static unsafe delegate*<uint, int, byte, int, PixelFormat, ulong> _glGetImageHandleNV;
        
        public static unsafe ulong glGetImageHandleNV(uint texture, int level, byte layered, int layer, PixelFormat format)
        {
            return _glGetImageHandleNV(texture, level, layered, layer, format);
        }
        
        public static unsafe delegate*<ImageTransformTargetHP, ImageTransformPNameHP, IntPtr, void> _glGetImageTransformParameterfvHP;
        
        public static unsafe void glGetImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, ref float @params)
        {
            _glGetImageTransformParameterfvHP(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ImageTransformTargetHP, ImageTransformPNameHP, IntPtr, void> _glGetImageTransformParameterivHP;
        
        public static unsafe void glGetImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, ref int @params)
        {
            _glGetImageTransformParameterivHP(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetInfoLogARB;
        
        public static unsafe void glGetInfoLogARB(uint obj, int maxLength, ref int length, ref sbyte infoLog)
        {
            _glGetInfoLogARB(obj, maxLength, (IntPtr)length, (IntPtr)infoLog);
        }
        
        public static unsafe delegate*<int> _glGetInstrumentsSGIX;
        
        public static unsafe int glGetInstrumentsSGIX()
        {
            return _glGetInstrumentsSGIX();
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetInteger64i_v;
        
        public static unsafe void glGetInteger64i_v(GetPName target, uint index, ref long data)
        {
            _glGetInteger64i_v(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetInteger64v;
        
        public static unsafe void glGetInteger64v(GetPName pname, ref long data)
        {
            _glGetInteger64v(pname, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetInteger64vAPPLE;
        
        public static unsafe void glGetInteger64vAPPLE(GetPName pname, ref long @params)
        {
            _glGetInteger64vAPPLE(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetInteger64vEXT;
        
        public static unsafe void glGetInteger64vEXT(GetPName pname, ref long data)
        {
            _glGetInteger64vEXT(pname, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetIntegerIndexedvEXT;
        
        public static unsafe void glGetIntegerIndexedvEXT(GetPName target, uint index, ref int data)
        {
            _glGetIntegerIndexedvEXT(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetIntegeri_v;
        
        public static unsafe void glGetIntegeri_v(GetPName target, uint index, ref int data)
        {
            _glGetIntegeri_v(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetIntegeri_vEXT;
        
        public static unsafe void glGetIntegeri_vEXT(GetPName target, uint index, ref int data)
        {
            _glGetIntegeri_vEXT(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetIntegerui64i_vNV;
        
        public static unsafe void glGetIntegerui64i_vNV(uint value, uint index, ref ulong result)
        {
            _glGetIntegerui64i_vNV(value, index, (IntPtr)result);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glGetIntegerui64vNV;
        
        public static unsafe void glGetIntegerui64vNV(uint value, ref ulong result)
        {
            _glGetIntegerui64vNV(value, (IntPtr)result);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetIntegerv;
        
        public static unsafe void glGetIntegerv(GetPName pname, ref int data)
        {
            _glGetIntegerv(pname, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, InternalFormat, int, InternalFormatPName, int, IntPtr, void> _glGetInternalformatSampleivNV;
        
        public static unsafe void glGetInternalformatSampleivNV(TextureTarget target, InternalFormat internalformat, int samples, InternalFormatPName pname, int count, ref int @params)
        {
            _glGetInternalformatSampleivNV(target, internalformat, samples, pname, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, InternalFormat, InternalFormatPName, int, IntPtr, void> _glGetInternalformati64v;
        
        public static unsafe void glGetInternalformati64v(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref long @params)
        {
            _glGetInternalformati64v(target, internalformat, pname, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, InternalFormat, InternalFormatPName, int, IntPtr, void> _glGetInternalformativ;
        
        public static unsafe void glGetInternalformativ(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref int @params)
        {
            _glGetInternalformativ(target, internalformat, pname, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, GetVariantValueEXT, IntPtr, void> _glGetInvariantBooleanvEXT;
        
        public static unsafe void glGetInvariantBooleanvEXT(uint id, GetVariantValueEXT value, ref byte data)
        {
            _glGetInvariantBooleanvEXT(id, value, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, GetVariantValueEXT, IntPtr, void> _glGetInvariantFloatvEXT;
        
        public static unsafe void glGetInvariantFloatvEXT(uint id, GetVariantValueEXT value, ref float data)
        {
            _glGetInvariantFloatvEXT(id, value, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, GetVariantValueEXT, IntPtr, void> _glGetInvariantIntegervEXT;
        
        public static unsafe void glGetInvariantIntegervEXT(uint id, GetVariantValueEXT value, ref int data)
        {
            _glGetInvariantIntegervEXT(id, value, (IntPtr)data);
        }
        
        public static unsafe delegate*<LightName, LightParameter, IntPtr, void> _glGetLightfv;
        
        public static unsafe void glGetLightfv(LightName light, LightParameter pname, ref float @params)
        {
            _glGetLightfv(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<LightName, LightParameter, IntPtr, void> _glGetLightiv;
        
        public static unsafe void glGetLightiv(LightName light, LightParameter pname, ref int @params)
        {
            _glGetLightiv(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<LightName, LightParameter, IntPtr, void> _glGetLightxOES;
        
        public static unsafe void glGetLightxOES(LightName light, LightParameter pname, ref int @params)
        {
            _glGetLightxOES(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<LightName, LightParameter, IntPtr, void> _glGetLightxv;
        
        public static unsafe void glGetLightxv(LightName light, LightParameter pname, ref int @params)
        {
            _glGetLightxv(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<LightName, LightParameter, IntPtr, void> _glGetLightxvOES;
        
        public static unsafe void glGetLightxvOES(LightName light, LightParameter pname, ref int @params)
        {
            _glGetLightxvOES(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ListParameterName, IntPtr, void> _glGetListParameterfvSGIX;
        
        public static unsafe void glGetListParameterfvSGIX(uint list, ListParameterName pname, ref float @params)
        {
            _glGetListParameterfvSGIX(list, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ListParameterName, IntPtr, void> _glGetListParameterivSGIX;
        
        public static unsafe void glGetListParameterivSGIX(uint list, ListParameterName pname, ref int @params)
        {
            _glGetListParameterivSGIX(list, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, GetVariantValueEXT, IntPtr, void> _glGetLocalConstantBooleanvEXT;
        
        public static unsafe void glGetLocalConstantBooleanvEXT(uint id, GetVariantValueEXT value, ref byte data)
        {
            _glGetLocalConstantBooleanvEXT(id, value, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, GetVariantValueEXT, IntPtr, void> _glGetLocalConstantFloatvEXT;
        
        public static unsafe void glGetLocalConstantFloatvEXT(uint id, GetVariantValueEXT value, ref float data)
        {
            _glGetLocalConstantFloatvEXT(id, value, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, GetVariantValueEXT, IntPtr, void> _glGetLocalConstantIntegervEXT;
        
        public static unsafe void glGetLocalConstantIntegervEXT(uint id, GetVariantValueEXT value, ref int data)
        {
            _glGetLocalConstantIntegervEXT(id, value, (IntPtr)data);
        }
        
        public static unsafe delegate*<EvalTargetNV, uint, MapAttribParameterNV, IntPtr, void> _glGetMapAttribParameterfvNV;
        
        public static unsafe void glGetMapAttribParameterfvNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, ref float @params)
        {
            _glGetMapAttribParameterfvNV(target, index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<EvalTargetNV, uint, MapAttribParameterNV, IntPtr, void> _glGetMapAttribParameterivNV;
        
        public static unsafe void glGetMapAttribParameterivNV(EvalTargetNV target, uint index, MapAttribParameterNV pname, ref int @params)
        {
            _glGetMapAttribParameterivNV(target, index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<EvalTargetNV, uint, MapTypeNV, int, int, byte, IntPtr, void> _glGetMapControlPointsNV;
        
        public static unsafe void glGetMapControlPointsNV(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, byte packed, IntPtr points)
        {
            _glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, (IntPtr)points);
        }
        
        public static unsafe delegate*<EvalTargetNV, MapParameterNV, IntPtr, void> _glGetMapParameterfvNV;
        
        public static unsafe void glGetMapParameterfvNV(EvalTargetNV target, MapParameterNV pname, ref float @params)
        {
            _glGetMapParameterfvNV(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<EvalTargetNV, MapParameterNV, IntPtr, void> _glGetMapParameterivNV;
        
        public static unsafe void glGetMapParameterivNV(EvalTargetNV target, MapParameterNV pname, ref int @params)
        {
            _glGetMapParameterivNV(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MapTarget, GetMapQuery, IntPtr, void> _glGetMapdv;
        
        public static unsafe void glGetMapdv(MapTarget target, GetMapQuery query, ref double v)
        {
            _glGetMapdv(target, query, (IntPtr)v);
        }
        
        public static unsafe delegate*<MapTarget, GetMapQuery, IntPtr, void> _glGetMapfv;
        
        public static unsafe void glGetMapfv(MapTarget target, GetMapQuery query, ref float v)
        {
            _glGetMapfv(target, query, (IntPtr)v);
        }
        
        public static unsafe delegate*<MapTarget, GetMapQuery, IntPtr, void> _glGetMapiv;
        
        public static unsafe void glGetMapiv(MapTarget target, GetMapQuery query, ref int v)
        {
            _glGetMapiv(target, query, (IntPtr)v);
        }
        
        public static unsafe delegate*<MapTarget, GetMapQuery, IntPtr, void> _glGetMapxvOES;
        
        public static unsafe void glGetMapxvOES(MapTarget target, GetMapQuery query, ref int v)
        {
            _glGetMapxvOES(target, query, (IntPtr)v);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glGetMaterialfv;
        
        public static unsafe void glGetMaterialfv(MaterialFace face, MaterialParameter pname, ref float @params)
        {
            _glGetMaterialfv(face, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glGetMaterialiv;
        
        public static unsafe void glGetMaterialiv(MaterialFace face, MaterialParameter pname, ref int @params)
        {
            _glGetMaterialiv(face, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, int, void> _glGetMaterialxOES;
        
        public static unsafe void glGetMaterialxOES(MaterialFace face, MaterialParameter pname, int param)
        {
            _glGetMaterialxOES(face, pname, param);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glGetMaterialxv;
        
        public static unsafe void glGetMaterialxv(MaterialFace face, MaterialParameter pname, ref int @params)
        {
            _glGetMaterialxv(face, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glGetMaterialxvOES;
        
        public static unsafe void glGetMaterialxvOES(MaterialFace face, MaterialParameter pname, ref int @params)
        {
            _glGetMaterialxvOES(face, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, int, int, IntPtr, void> _glGetMemoryObjectDetachedResourcesuivNV;
        
        public static unsafe void glGetMemoryObjectDetachedResourcesuivNV(uint memory, uint pname, int first, int count, ref uint @params)
        {
            _glGetMemoryObjectDetachedResourcesuivNV(memory, pname, first, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, MemoryObjectParameterName, IntPtr, void> _glGetMemoryObjectParameterivEXT;
        
        public static unsafe void glGetMemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname, ref int @params)
        {
            _glGetMemoryObjectParameterivEXT(memoryObject, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MinmaxTargetEXT, byte, PixelFormat, PixelType, IntPtr, void> _glGetMinmax;
        
        public static unsafe void glGetMinmax(MinmaxTargetEXT target, byte reset, PixelFormat format, PixelType type, IntPtr values)
        {
            _glGetMinmax(target, reset, format, type, (IntPtr)values);
        }
        
        public static unsafe delegate*<MinmaxTargetEXT, byte, PixelFormat, PixelType, IntPtr, void> _glGetMinmaxEXT;
        
        public static unsafe void glGetMinmaxEXT(MinmaxTargetEXT target, byte reset, PixelFormat format, PixelType type, IntPtr values)
        {
            _glGetMinmaxEXT(target, reset, format, type, (IntPtr)values);
        }
        
        public static unsafe delegate*<MinmaxTargetEXT, GetMinmaxParameterPNameEXT, IntPtr, void> _glGetMinmaxParameterfv;
        
        public static unsafe void glGetMinmaxParameterfv(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, ref float @params)
        {
            _glGetMinmaxParameterfv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MinmaxTargetEXT, GetMinmaxParameterPNameEXT, IntPtr, void> _glGetMinmaxParameterfvEXT;
        
        public static unsafe void glGetMinmaxParameterfvEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, ref float @params)
        {
            _glGetMinmaxParameterfvEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MinmaxTargetEXT, GetMinmaxParameterPNameEXT, IntPtr, void> _glGetMinmaxParameteriv;
        
        public static unsafe void glGetMinmaxParameteriv(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, ref int @params)
        {
            _glGetMinmaxParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MinmaxTargetEXT, GetMinmaxParameterPNameEXT, IntPtr, void> _glGetMinmaxParameterivEXT;
        
        public static unsafe void glGetMinmaxParameterivEXT(MinmaxTargetEXT target, GetMinmaxParameterPNameEXT pname, ref int @params)
        {
            _glGetMinmaxParameterivEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glGetMultiTexEnvfvEXT;
        
        public static unsafe void glGetMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ref float @params)
        {
            _glGetMultiTexEnvfvEXT(texunit, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glGetMultiTexEnvivEXT;
        
        public static unsafe void glGetMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ref int @params)
        {
            _glGetMultiTexEnvivEXT(texunit, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureCoordName, TextureGenParameter, IntPtr, void> _glGetMultiTexGendvEXT;
        
        public static unsafe void glGetMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref double @params)
        {
            _glGetMultiTexGendvEXT(texunit, coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureCoordName, TextureGenParameter, IntPtr, void> _glGetMultiTexGenfvEXT;
        
        public static unsafe void glGetMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref float @params)
        {
            _glGetMultiTexGenfvEXT(texunit, coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureCoordName, TextureGenParameter, IntPtr, void> _glGetMultiTexGenivEXT;
        
        public static unsafe void glGetMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref int @params)
        {
            _glGetMultiTexGenivEXT(texunit, coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, PixelFormat, PixelType, IntPtr, void> _glGetMultiTexImageEXT;
        
        public static unsafe void glGetMultiTexImageEXT(TextureUnit texunit, TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glGetMultiTexImageEXT(texunit, target, level, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, GetTextureParameter, IntPtr, void> _glGetMultiTexLevelParameterfvEXT;
        
        public static unsafe void glGetMultiTexLevelParameterfvEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, ref float @params)
        {
            _glGetMultiTexLevelParameterfvEXT(texunit, target, level, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, GetTextureParameter, IntPtr, void> _glGetMultiTexLevelParameterivEXT;
        
        public static unsafe void glGetMultiTexLevelParameterivEXT(TextureUnit texunit, TextureTarget target, int level, GetTextureParameter pname, ref int @params)
        {
            _glGetMultiTexLevelParameterivEXT(texunit, target, level, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, GetTextureParameter, IntPtr, void> _glGetMultiTexParameterIivEXT;
        
        public static unsafe void glGetMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref int @params)
        {
            _glGetMultiTexParameterIivEXT(texunit, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, GetTextureParameter, IntPtr, void> _glGetMultiTexParameterIuivEXT;
        
        public static unsafe void glGetMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref uint @params)
        {
            _glGetMultiTexParameterIuivEXT(texunit, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, GetTextureParameter, IntPtr, void> _glGetMultiTexParameterfvEXT;
        
        public static unsafe void glGetMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref float @params)
        {
            _glGetMultiTexParameterfvEXT(texunit, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, GetTextureParameter, IntPtr, void> _glGetMultiTexParameterivEXT;
        
        public static unsafe void glGetMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, GetTextureParameter pname, ref int @params)
        {
            _glGetMultiTexParameterivEXT(texunit, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<GetMultisamplePNameNV, uint, IntPtr, void> _glGetMultisamplefv;
        
        public static unsafe void glGetMultisamplefv(GetMultisamplePNameNV pname, uint index, ref float val)
        {
            _glGetMultisamplefv(pname, index, (IntPtr)val);
        }
        
        public static unsafe delegate*<GetMultisamplePNameNV, uint, IntPtr, void> _glGetMultisamplefvNV;
        
        public static unsafe void glGetMultisamplefvNV(GetMultisamplePNameNV pname, uint index, ref float val)
        {
            _glGetMultisamplefvNV(pname, index, (IntPtr)val);
        }
        
        public static unsafe delegate*<uint, BufferPNameARB, IntPtr, void> _glGetNamedBufferParameteri64v;
        
        public static unsafe void glGetNamedBufferParameteri64v(uint buffer, BufferPNameARB pname, ref long @params)
        {
            _glGetNamedBufferParameteri64v(buffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, BufferPNameARB, IntPtr, void> _glGetNamedBufferParameteriv;
        
        public static unsafe void glGetNamedBufferParameteriv(uint buffer, BufferPNameARB pname, ref int @params)
        {
            _glGetNamedBufferParameteriv(buffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, BufferPNameARB, IntPtr, void> _glGetNamedBufferParameterivEXT;
        
        public static unsafe void glGetNamedBufferParameterivEXT(uint buffer, BufferPNameARB pname, ref int @params)
        {
            _glGetNamedBufferParameterivEXT(buffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, BufferPNameARB, IntPtr, void> _glGetNamedBufferParameterui64vNV;
        
        public static unsafe void glGetNamedBufferParameterui64vNV(uint buffer, BufferPNameARB pname, ref ulong @params)
        {
            _glGetNamedBufferParameterui64vNV(buffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, BufferPointerNameARB, IntPtr, void> _glGetNamedBufferPointerv;
        
        public static unsafe void glGetNamedBufferPointerv(uint buffer, BufferPointerNameARB pname, out IntPtr @params)
        {
            _glGetNamedBufferPointerv(buffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, BufferPointerNameARB, IntPtr, void> _glGetNamedBufferPointervEXT;
        
        public static unsafe void glGetNamedBufferPointervEXT(uint buffer, BufferPointerNameARB pname, out IntPtr @params)
        {
            _glGetNamedBufferPointervEXT(buffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, long, long, IntPtr, void> _glGetNamedBufferSubData;
        
        public static unsafe void glGetNamedBufferSubData(uint buffer, long offset, long size, IntPtr data)
        {
            _glGetNamedBufferSubData(buffer, offset, size, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, long, long, IntPtr, void> _glGetNamedBufferSubDataEXT;
        
        public static unsafe void glGetNamedBufferSubDataEXT(uint buffer, long offset, long size, IntPtr data)
        {
            _glGetNamedBufferSubDataEXT(buffer, offset, size, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, int, IntPtr, void> _glGetNamedFramebufferParameterfvAMD;
        
        public static unsafe void glGetNamedFramebufferParameterfvAMD(uint framebuffer, uint pname, uint numsamples, uint pixelindex, int size, ref float values)
        {
            _glGetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, (IntPtr)values);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, FramebufferAttachmentParameterName, IntPtr, void> _glGetNamedFramebufferAttachmentParameteriv;
        
        public static unsafe void glGetNamedFramebufferAttachmentParameteriv(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int @params)
        {
            _glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, FramebufferAttachmentParameterName, IntPtr, void> _glGetNamedFramebufferAttachmentParameterivEXT;
        
        public static unsafe void glGetNamedFramebufferAttachmentParameterivEXT(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int @params)
        {
            _glGetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, GetFramebufferParameter, IntPtr, void> _glGetNamedFramebufferParameteriv;
        
        public static unsafe void glGetNamedFramebufferParameteriv(uint framebuffer, GetFramebufferParameter pname, ref int param)
        {
            _glGetNamedFramebufferParameteriv(framebuffer, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, GetFramebufferParameter, IntPtr, void> _glGetNamedFramebufferParameterivEXT;
        
        public static unsafe void glGetNamedFramebufferParameterivEXT(uint framebuffer, GetFramebufferParameter pname, ref int @params)
        {
            _glGetNamedFramebufferParameterivEXT(framebuffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, IntPtr, void> _glGetNamedProgramLocalParameterIivEXT;
        
        public static unsafe void glGetNamedProgramLocalParameterIivEXT(uint program, ProgramTarget target, uint index, ref int @params)
        {
            _glGetNamedProgramLocalParameterIivEXT(program, target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, IntPtr, void> _glGetNamedProgramLocalParameterIuivEXT;
        
        public static unsafe void glGetNamedProgramLocalParameterIuivEXT(uint program, ProgramTarget target, uint index, ref uint @params)
        {
            _glGetNamedProgramLocalParameterIuivEXT(program, target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, IntPtr, void> _glGetNamedProgramLocalParameterdvEXT;
        
        public static unsafe void glGetNamedProgramLocalParameterdvEXT(uint program, ProgramTarget target, uint index, ref double @params)
        {
            _glGetNamedProgramLocalParameterdvEXT(program, target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, IntPtr, void> _glGetNamedProgramLocalParameterfvEXT;
        
        public static unsafe void glGetNamedProgramLocalParameterfvEXT(uint program, ProgramTarget target, uint index, ref float @params)
        {
            _glGetNamedProgramLocalParameterfvEXT(program, target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, ProgramStringProperty, IntPtr, void> _glGetNamedProgramStringEXT;
        
        public static unsafe void glGetNamedProgramStringEXT(uint program, ProgramTarget target, ProgramStringProperty pname, IntPtr @string)
        {
            _glGetNamedProgramStringEXT(program, target, pname, (IntPtr)@string);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, ProgramPropertyARB, IntPtr, void> _glGetNamedProgramivEXT;
        
        public static unsafe void glGetNamedProgramivEXT(uint program, ProgramTarget target, ProgramPropertyARB pname, ref int @params)
        {
            _glGetNamedProgramivEXT(program, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, RenderbufferParameterName, IntPtr, void> _glGetNamedRenderbufferParameteriv;
        
        public static unsafe void glGetNamedRenderbufferParameteriv(uint renderbuffer, RenderbufferParameterName pname, ref int @params)
        {
            _glGetNamedRenderbufferParameteriv(renderbuffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, RenderbufferParameterName, IntPtr, void> _glGetNamedRenderbufferParameterivEXT;
        
        public static unsafe void glGetNamedRenderbufferParameterivEXT(uint renderbuffer, RenderbufferParameterName pname, ref int @params)
        {
            _glGetNamedRenderbufferParameterivEXT(renderbuffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<int, IntPtr, int, IntPtr, IntPtr, void> _glGetNamedStringARB;
        
        public static unsafe void glGetNamedStringARB(int namelen, ref sbyte name, int bufSize, ref int stringlen, ref sbyte @string)
        {
            _glGetNamedStringARB(namelen, (IntPtr)name, bufSize, (IntPtr)stringlen, (IntPtr)@string);
        }
        
        public static unsafe delegate*<int, IntPtr, uint, IntPtr, void> _glGetNamedStringivARB;
        
        public static unsafe void glGetNamedStringivARB(int namelen, ref sbyte name, uint pname, ref int @params)
        {
            _glGetNamedStringivARB(namelen, (IntPtr)name, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glGetNextPerfQueryIdINTEL;
        
        public static unsafe void glGetNextPerfQueryIdINTEL(uint queryId, ref uint nextQueryId)
        {
            _glGetNextPerfQueryIdINTEL(queryId, (IntPtr)nextQueryId);
        }
        
        public static unsafe delegate*<uint, ArrayObjectPNameATI, IntPtr, void> _glGetObjectBufferfvATI;
        
        public static unsafe void glGetObjectBufferfvATI(uint buffer, ArrayObjectPNameATI pname, ref float @params)
        {
            _glGetObjectBufferfvATI(buffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ArrayObjectPNameATI, IntPtr, void> _glGetObjectBufferivATI;
        
        public static unsafe void glGetObjectBufferivATI(uint buffer, ArrayObjectPNameATI pname, ref int @params)
        {
            _glGetObjectBufferivATI(buffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ObjectIdentifier, uint, int, IntPtr, IntPtr, void> _glGetObjectLabel;
        
        public static unsafe void glGetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, ref int length, ref sbyte label)
        {
            _glGetObjectLabel(identifier, name, bufSize, (IntPtr)length, (IntPtr)label);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, void> _glGetObjectLabelEXT;
        
        public static unsafe void glGetObjectLabelEXT(uint type, uint @object, int bufSize, ref int length, ref sbyte label)
        {
            _glGetObjectLabelEXT(type, @object, bufSize, (IntPtr)length, (IntPtr)label);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, void> _glGetObjectLabelKHR;
        
        public static unsafe void glGetObjectLabelKHR(uint identifier, uint name, int bufSize, ref int length, ref sbyte label)
        {
            _glGetObjectLabelKHR(identifier, name, bufSize, (IntPtr)length, (IntPtr)label);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetObjectParameterfvARB;
        
        public static unsafe void glGetObjectParameterfvARB(uint obj, uint pname, ref float @params)
        {
            _glGetObjectParameterfvARB(obj, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glGetObjectParameterivAPPLE;
        
        public static unsafe void glGetObjectParameterivAPPLE(uint objectType, uint name, uint pname, ref int @params)
        {
            _glGetObjectParameterivAPPLE(objectType, name, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetObjectParameterivARB;
        
        public static unsafe void glGetObjectParameterivARB(uint obj, uint pname, ref int @params)
        {
            _glGetObjectParameterivARB(obj, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<IntPtr, int, IntPtr, IntPtr, void> _glGetObjectPtrLabel;
        
        public static unsafe void glGetObjectPtrLabel(IntPtr ptr, int bufSize, ref int length, ref sbyte label)
        {
            _glGetObjectPtrLabel((IntPtr)ptr, bufSize, (IntPtr)length, (IntPtr)label);
        }
        
        public static unsafe delegate*<IntPtr, int, IntPtr, IntPtr, void> _glGetObjectPtrLabelKHR;
        
        public static unsafe void glGetObjectPtrLabelKHR(IntPtr ptr, int bufSize, ref int length, ref sbyte label)
        {
            _glGetObjectPtrLabelKHR((IntPtr)ptr, bufSize, (IntPtr)length, (IntPtr)label);
        }
        
        public static unsafe delegate*<uint, OcclusionQueryParameterNameNV, IntPtr, void> _glGetOcclusionQueryivNV;
        
        public static unsafe void glGetOcclusionQueryivNV(uint id, OcclusionQueryParameterNameNV pname, ref int @params)
        {
            _glGetOcclusionQueryivNV(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, OcclusionQueryParameterNameNV, IntPtr, void> _glGetOcclusionQueryuivNV;
        
        public static unsafe void glGetOcclusionQueryuivNV(uint id, OcclusionQueryParameterNameNV pname, ref uint @params)
        {
            _glGetOcclusionQueryuivNV(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<PathColor, PathGenMode, IntPtr, void> _glGetPathColorGenfvNV;
        
        public static unsafe void glGetPathColorGenfvNV(PathColor color, PathGenMode pname, ref float value)
        {
            _glGetPathColorGenfvNV(color, pname, (IntPtr)value);
        }
        
        public static unsafe delegate*<PathColor, PathGenMode, IntPtr, void> _glGetPathColorGenivNV;
        
        public static unsafe void glGetPathColorGenivNV(PathColor color, PathGenMode pname, ref int value)
        {
            _glGetPathColorGenivNV(color, pname, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glGetPathCommandsNV;
        
        public static unsafe void glGetPathCommandsNV(uint path, ref byte commands)
        {
            _glGetPathCommandsNV(path, (IntPtr)commands);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glGetPathCoordsNV;
        
        public static unsafe void glGetPathCoordsNV(uint path, ref float coords)
        {
            _glGetPathCoordsNV(path, (IntPtr)coords);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glGetPathDashArrayNV;
        
        public static unsafe void glGetPathDashArrayNV(uint path, ref float dashArray)
        {
            _glGetPathDashArrayNV(path, (IntPtr)dashArray);
        }
        
        public static unsafe delegate*<uint, int, int, float> _glGetPathLengthNV;
        
        public static unsafe float glGetPathLengthNV(uint path, int startSegment, int numSegments)
        {
            return _glGetPathLengthNV(path, startSegment, numSegments);
        }
        
        public static unsafe delegate*<uint, uint, int, int, IntPtr, void> _glGetPathMetricRangeNV;
        
        public static unsafe void glGetPathMetricRangeNV(uint metricQueryMask, uint firstPathName, int numPaths, int stride, ref float metrics)
        {
            _glGetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, (IntPtr)metrics);
        }
        
        public static unsafe delegate*<uint, int, PathElementType, IntPtr, uint, int, IntPtr, void> _glGetPathMetricsNV;
        
        public static unsafe void glGetPathMetricsNV(uint metricQueryMask, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int stride, ref float metrics)
        {
            _glGetPathMetricsNV(metricQueryMask, numPaths, pathNameType, (IntPtr)paths, pathBase, stride, (IntPtr)metrics);
        }
        
        public static unsafe delegate*<uint, PathParameter, IntPtr, void> _glGetPathParameterfvNV;
        
        public static unsafe void glGetPathParameterfvNV(uint path, PathParameter pname, ref float value)
        {
            _glGetPathParameterfvNV(path, pname, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, PathParameter, IntPtr, void> _glGetPathParameterivNV;
        
        public static unsafe void glGetPathParameterivNV(uint path, PathParameter pname, ref int value)
        {
            _glGetPathParameterivNV(path, pname, (IntPtr)value);
        }
        
        public static unsafe delegate*<PathListMode, int, PathElementType, IntPtr, uint, float, float, PathTransformType, IntPtr, void> _glGetPathSpacingNV;
        
        public static unsafe void glGetPathSpacingNV(PathListMode pathListMode, int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, float advanceScale, float kerningScale, PathTransformType transformType, ref float returnedSpacing)
        {
            _glGetPathSpacingNV(pathListMode, numPaths, pathNameType, (IntPtr)paths, pathBase, advanceScale, kerningScale, transformType, (IntPtr)returnedSpacing);
        }
        
        public static unsafe delegate*<TextureUnit, PathGenMode, IntPtr, void> _glGetPathTexGenfvNV;
        
        public static unsafe void glGetPathTexGenfvNV(TextureUnit texCoordSet, PathGenMode pname, ref float value)
        {
            _glGetPathTexGenfvNV(texCoordSet, pname, (IntPtr)value);
        }
        
        public static unsafe delegate*<TextureUnit, PathGenMode, IntPtr, void> _glGetPathTexGenivNV;
        
        public static unsafe void glGetPathTexGenivNV(TextureUnit texCoordSet, PathGenMode pname, ref int value)
        {
            _glGetPathTexGenivNV(texCoordSet, pname, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, uint, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, void> _glGetPerfCounterInfoINTEL;
        
        public static unsafe void glGetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref sbyte counterName, uint counterDescLength, ref sbyte counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
        {
            _glGetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, (IntPtr)counterName, counterDescLength, (IntPtr)counterDesc, (IntPtr)counterOffset, (IntPtr)counterDataSize, (IntPtr)counterTypeEnum, (IntPtr)counterDataTypeEnum, (IntPtr)rawCounterMaxValue);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, void> _glGetPerfMonitorCounterDataAMD;
        
        public static unsafe void glGetPerfMonitorCounterDataAMD(uint monitor, uint pname, int dataSize, ref uint data, ref int bytesWritten)
        {
            _glGetPerfMonitorCounterDataAMD(monitor, pname, dataSize, (IntPtr)data, (IntPtr)bytesWritten);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glGetPerfMonitorCounterInfoAMD;
        
        public static unsafe void glGetPerfMonitorCounterInfoAMD(uint group, uint counter, uint pname, IntPtr data)
        {
            _glGetPerfMonitorCounterInfoAMD(group, counter, pname, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, void> _glGetPerfMonitorCounterStringAMD;
        
        public static unsafe void glGetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, ref int length, ref sbyte counterString)
        {
            _glGetPerfMonitorCounterStringAMD(group, counter, bufSize, (IntPtr)length, (IntPtr)counterString);
        }
        
        public static unsafe delegate*<uint, IntPtr, IntPtr, int, IntPtr, void> _glGetPerfMonitorCountersAMD;
        
        public static unsafe void glGetPerfMonitorCountersAMD(uint group, ref int numCounters, ref int maxActiveCounters, int counterSize, ref uint counters)
        {
            _glGetPerfMonitorCountersAMD(group, (IntPtr)numCounters, (IntPtr)maxActiveCounters, counterSize, (IntPtr)counters);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetPerfMonitorGroupStringAMD;
        
        public static unsafe void glGetPerfMonitorGroupStringAMD(uint group, int bufSize, ref int length, ref sbyte groupString)
        {
            _glGetPerfMonitorGroupStringAMD(group, bufSize, (IntPtr)length, (IntPtr)groupString);
        }
        
        public static unsafe delegate*<IntPtr, int, IntPtr, void> _glGetPerfMonitorGroupsAMD;
        
        public static unsafe void glGetPerfMonitorGroupsAMD(ref int numGroups, int groupsSize, ref uint groups)
        {
            _glGetPerfMonitorGroupsAMD((IntPtr)numGroups, groupsSize, (IntPtr)groups);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, void> _glGetPerfQueryDataINTEL;
        
        public static unsafe void glGetPerfQueryDataINTEL(uint queryHandle, uint flags, int dataSize, IntPtr data, ref uint bytesWritten)
        {
            _glGetPerfQueryDataINTEL(queryHandle, flags, dataSize, (IntPtr)data, (IntPtr)bytesWritten);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glGetPerfQueryIdByNameINTEL;
        
        public static unsafe void glGetPerfQueryIdByNameINTEL(ref sbyte queryName, ref uint queryId)
        {
            _glGetPerfQueryIdByNameINTEL((IntPtr)queryName, (IntPtr)queryId);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, void> _glGetPerfQueryInfoINTEL;
        
        public static unsafe void glGetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, ref sbyte queryName, ref uint dataSize, ref uint noCounters, ref uint noInstances, ref uint capsMask)
        {
            _glGetPerfQueryInfoINTEL(queryId, queryNameLength, (IntPtr)queryName, (IntPtr)dataSize, (IntPtr)noCounters, (IntPtr)noInstances, (IntPtr)capsMask);
        }
        
        public static unsafe delegate*<PixelMap, IntPtr, void> _glGetPixelMapfv;
        
        public static unsafe void glGetPixelMapfv(PixelMap map, ref float values)
        {
            _glGetPixelMapfv(map, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, IntPtr, void> _glGetPixelMapuiv;
        
        public static unsafe void glGetPixelMapuiv(PixelMap map, ref uint values)
        {
            _glGetPixelMapuiv(map, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, IntPtr, void> _glGetPixelMapusv;
        
        public static unsafe void glGetPixelMapusv(PixelMap map, ref ushort values)
        {
            _glGetPixelMapusv(map, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glGetPixelMapxv;
        
        public static unsafe void glGetPixelMapxv(PixelMap map, int size, ref int values)
        {
            _glGetPixelMapxv(map, size, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelTexGenParameterNameSGIS, IntPtr, void> _glGetPixelTexGenParameterfvSGIS;
        
        public static unsafe void glGetPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, ref float @params)
        {
            _glGetPixelTexGenParameterfvSGIS(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<PixelTexGenParameterNameSGIS, IntPtr, void> _glGetPixelTexGenParameterivSGIS;
        
        public static unsafe void glGetPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, ref int @params)
        {
            _glGetPixelTexGenParameterivSGIS(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetPixelTransformParameterfvEXT;
        
        public static unsafe void glGetPixelTransformParameterfvEXT(uint target, uint pname, ref float @params)
        {
            _glGetPixelTransformParameterfvEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetPixelTransformParameterivEXT;
        
        public static unsafe void glGetPixelTransformParameterivEXT(uint target, uint pname, ref int @params)
        {
            _glGetPixelTransformParameterivEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetPointerIndexedvEXT;
        
        public static unsafe void glGetPointerIndexedvEXT(uint target, uint index, out IntPtr data)
        {
            _glGetPointerIndexedvEXT(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetPointeri_vEXT;
        
        public static unsafe void glGetPointeri_vEXT(uint pname, uint index, out IntPtr @params)
        {
            _glGetPointeri_vEXT(pname, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<GetPointervPName, IntPtr, void> _glGetPointerv;
        
        public static unsafe void glGetPointerv(GetPointervPName pname, out IntPtr @params)
        {
            _glGetPointerv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<GetPointervPName, IntPtr, void> _glGetPointervEXT;
        
        public static unsafe void glGetPointervEXT(GetPointervPName pname, out IntPtr @params)
        {
            _glGetPointervEXT(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glGetPointervKHR;
        
        public static unsafe void glGetPointervKHR(uint pname, out IntPtr @params)
        {
            _glGetPointervKHR(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<IntPtr, void> _glGetPolygonStipple;
        
        public static unsafe void glGetPolygonStipple(ref byte mask)
        {
            _glGetPolygonStipple((IntPtr)mask);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, IntPtr, void> _glGetProgramBinary;
        
        public static unsafe void glGetProgramBinary(uint program, int bufSize, ref int length, ref uint binaryFormat, IntPtr binary)
        {
            _glGetProgramBinary(program, bufSize, (IntPtr)length, (IntPtr)binaryFormat, (IntPtr)binary);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, IntPtr, void> _glGetProgramBinaryOES;
        
        public static unsafe void glGetProgramBinaryOES(uint program, int bufSize, ref int length, ref uint binaryFormat, IntPtr binary)
        {
            _glGetProgramBinaryOES(program, bufSize, (IntPtr)length, (IntPtr)binaryFormat, (IntPtr)binary);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glGetProgramEnvParameterIivNV;
        
        public static unsafe void glGetProgramEnvParameterIivNV(ProgramTarget target, uint index, ref int @params)
        {
            _glGetProgramEnvParameterIivNV(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glGetProgramEnvParameterIuivNV;
        
        public static unsafe void glGetProgramEnvParameterIuivNV(ProgramTarget target, uint index, ref uint @params)
        {
            _glGetProgramEnvParameterIuivNV(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glGetProgramEnvParameterdvARB;
        
        public static unsafe void glGetProgramEnvParameterdvARB(ProgramTarget target, uint index, ref double @params)
        {
            _glGetProgramEnvParameterdvARB(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glGetProgramEnvParameterfvARB;
        
        public static unsafe void glGetProgramEnvParameterfvARB(ProgramTarget target, uint index, ref float @params)
        {
            _glGetProgramEnvParameterfvARB(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetProgramInfoLog;
        
        public static unsafe void glGetProgramInfoLog(uint program, int bufSize, ref int length, ref sbyte infoLog)
        {
            _glGetProgramInfoLog(program, bufSize, (IntPtr)length, (IntPtr)infoLog);
        }
        
        public static unsafe delegate*<uint, ProgramInterface, ProgramInterfacePName, IntPtr, void> _glGetProgramInterfaceiv;
        
        public static unsafe void glGetProgramInterfaceiv(uint program, ProgramInterface programInterface, ProgramInterfacePName pname, ref int @params)
        {
            _glGetProgramInterfaceiv(program, programInterface, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glGetProgramLocalParameterIivNV;
        
        public static unsafe void glGetProgramLocalParameterIivNV(ProgramTarget target, uint index, ref int @params)
        {
            _glGetProgramLocalParameterIivNV(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glGetProgramLocalParameterIuivNV;
        
        public static unsafe void glGetProgramLocalParameterIuivNV(ProgramTarget target, uint index, ref uint @params)
        {
            _glGetProgramLocalParameterIuivNV(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glGetProgramLocalParameterdvARB;
        
        public static unsafe void glGetProgramLocalParameterdvARB(ProgramTarget target, uint index, ref double @params)
        {
            _glGetProgramLocalParameterdvARB(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glGetProgramLocalParameterfvARB;
        
        public static unsafe void glGetProgramLocalParameterfvARB(ProgramTarget target, uint index, ref float @params)
        {
            _glGetProgramLocalParameterfvARB(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetProgramNamedParameterdvNV;
        
        public static unsafe void glGetProgramNamedParameterdvNV(uint id, int len, ref byte name, ref double @params)
        {
            _glGetProgramNamedParameterdvNV(id, len, (IntPtr)name, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetProgramNamedParameterfvNV;
        
        public static unsafe void glGetProgramNamedParameterfvNV(uint id, int len, ref byte name, ref float @params)
        {
            _glGetProgramNamedParameterfvNV(id, len, (IntPtr)name, (IntPtr)@params);
        }
        
        public static unsafe delegate*<VertexAttribEnumNV, uint, VertexAttribEnumNV, IntPtr, void> _glGetProgramParameterdvNV;
        
        public static unsafe void glGetProgramParameterdvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, ref double @params)
        {
            _glGetProgramParameterdvNV(target, index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<VertexAttribEnumNV, uint, VertexAttribEnumNV, IntPtr, void> _glGetProgramParameterfvNV;
        
        public static unsafe void glGetProgramParameterfvNV(VertexAttribEnumNV target, uint index, VertexAttribEnumNV pname, ref float @params)
        {
            _glGetProgramParameterfvNV(target, index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetProgramPipelineInfoLog;
        
        public static unsafe void glGetProgramPipelineInfoLog(uint pipeline, int bufSize, ref int length, ref sbyte infoLog)
        {
            _glGetProgramPipelineInfoLog(pipeline, bufSize, (IntPtr)length, (IntPtr)infoLog);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetProgramPipelineInfoLogEXT;
        
        public static unsafe void glGetProgramPipelineInfoLogEXT(uint pipeline, int bufSize, ref int length, ref sbyte infoLog)
        {
            _glGetProgramPipelineInfoLogEXT(pipeline, bufSize, (IntPtr)length, (IntPtr)infoLog);
        }
        
        public static unsafe delegate*<uint, PipelineParameterName, IntPtr, void> _glGetProgramPipelineiv;
        
        public static unsafe void glGetProgramPipelineiv(uint pipeline, PipelineParameterName pname, ref int @params)
        {
            _glGetProgramPipelineiv(pipeline, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, PipelineParameterName, IntPtr, void> _glGetProgramPipelineivEXT;
        
        public static unsafe void glGetProgramPipelineivEXT(uint pipeline, PipelineParameterName pname, ref int @params)
        {
            _glGetProgramPipelineivEXT(pipeline, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramInterface, IntPtr, uint> _glGetProgramResourceIndex;
        
        public static unsafe uint glGetProgramResourceIndex(uint program, ProgramInterface programInterface, ref sbyte name)
        {
            return _glGetProgramResourceIndex(program, programInterface, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ProgramInterface, IntPtr, int> _glGetProgramResourceLocation;
        
        public static unsafe int glGetProgramResourceLocation(uint program, ProgramInterface programInterface, ref sbyte name)
        {
            return _glGetProgramResourceLocation(program, programInterface, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ProgramInterface, IntPtr, int> _glGetProgramResourceLocationIndex;
        
        public static unsafe int glGetProgramResourceLocationIndex(uint program, ProgramInterface programInterface, ref sbyte name)
        {
            return _glGetProgramResourceLocationIndex(program, programInterface, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ProgramInterface, IntPtr, int> _glGetProgramResourceLocationIndexEXT;
        
        public static unsafe int glGetProgramResourceLocationIndexEXT(uint program, ProgramInterface programInterface, ref sbyte name)
        {
            return _glGetProgramResourceLocationIndexEXT(program, programInterface, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ProgramInterface, uint, int, IntPtr, IntPtr, void> _glGetProgramResourceName;
        
        public static unsafe void glGetProgramResourceName(uint program, ProgramInterface programInterface, uint index, int bufSize, ref int length, ref sbyte name)
        {
            _glGetProgramResourceName(program, programInterface, index, bufSize, (IntPtr)length, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ProgramInterface, uint, int, IntPtr, int, IntPtr, IntPtr, void> _glGetProgramResourcefvNV;
        
        public static unsafe void glGetProgramResourcefvNV(uint program, ProgramInterface programInterface, uint index, int propCount, ref uint props, int count, ref int length, ref float @params)
        {
            _glGetProgramResourcefvNV(program, programInterface, index, propCount, (IntPtr)props, count, (IntPtr)length, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramInterface, uint, int, IntPtr, int, IntPtr, IntPtr, void> _glGetProgramResourceiv;
        
        public static unsafe void glGetProgramResourceiv(uint program, ProgramInterface programInterface, uint index, int propCount, ref ProgramResourceProperty props, int count, ref int length, ref int @params)
        {
            _glGetProgramResourceiv(program, programInterface, index, propCount, (IntPtr)props, count, (IntPtr)length, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ShaderType, ProgramStagePName, IntPtr, void> _glGetProgramStageiv;
        
        public static unsafe void glGetProgramStageiv(uint program, ShaderType shadertype, ProgramStagePName pname, ref int values)
        {
            _glGetProgramStageiv(program, shadertype, pname, (IntPtr)values);
        }
        
        public static unsafe delegate*<ProgramTarget, ProgramStringProperty, IntPtr, void> _glGetProgramStringARB;
        
        public static unsafe void glGetProgramStringARB(ProgramTarget target, ProgramStringProperty pname, IntPtr @string)
        {
            _glGetProgramStringARB(target, pname, (IntPtr)@string);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnumNV, IntPtr, void> _glGetProgramStringNV;
        
        public static unsafe void glGetProgramStringNV(uint id, VertexAttribEnumNV pname, ref byte program)
        {
            _glGetProgramStringNV(id, pname, (IntPtr)program);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetProgramSubroutineParameteruivNV;
        
        public static unsafe void glGetProgramSubroutineParameteruivNV(uint target, uint index, ref uint param)
        {
            _glGetProgramSubroutineParameteruivNV(target, index, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, ProgramPropertyARB, IntPtr, void> _glGetProgramiv;
        
        public static unsafe void glGetProgramiv(uint program, ProgramPropertyARB pname, ref int @params)
        {
            _glGetProgramiv(program, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, ProgramPropertyARB, IntPtr, void> _glGetProgramivARB;
        
        public static unsafe void glGetProgramivARB(ProgramTarget target, ProgramPropertyARB pname, ref int @params)
        {
            _glGetProgramivARB(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnumNV, IntPtr, void> _glGetProgramivNV;
        
        public static unsafe void glGetProgramivNV(uint id, VertexAttribEnumNV pname, ref int @params)
        {
            _glGetProgramivNV(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, QueryObjectParameterName, long, void> _glGetQueryBufferObjecti64v;
        
        public static unsafe void glGetQueryBufferObjecti64v(uint id, uint buffer, QueryObjectParameterName pname, long offset)
        {
            _glGetQueryBufferObjecti64v(id, buffer, pname, offset);
        }
        
        public static unsafe delegate*<uint, uint, QueryObjectParameterName, long, void> _glGetQueryBufferObjectiv;
        
        public static unsafe void glGetQueryBufferObjectiv(uint id, uint buffer, QueryObjectParameterName pname, long offset)
        {
            _glGetQueryBufferObjectiv(id, buffer, pname, offset);
        }
        
        public static unsafe delegate*<uint, uint, QueryObjectParameterName, long, void> _glGetQueryBufferObjectui64v;
        
        public static unsafe void glGetQueryBufferObjectui64v(uint id, uint buffer, QueryObjectParameterName pname, long offset)
        {
            _glGetQueryBufferObjectui64v(id, buffer, pname, offset);
        }
        
        public static unsafe delegate*<uint, uint, QueryObjectParameterName, long, void> _glGetQueryBufferObjectuiv;
        
        public static unsafe void glGetQueryBufferObjectuiv(uint id, uint buffer, QueryObjectParameterName pname, long offset)
        {
            _glGetQueryBufferObjectuiv(id, buffer, pname, offset);
        }
        
        public static unsafe delegate*<QueryTarget, uint, QueryParameterName, IntPtr, void> _glGetQueryIndexediv;
        
        public static unsafe void glGetQueryIndexediv(QueryTarget target, uint index, QueryParameterName pname, ref int @params)
        {
            _glGetQueryIndexediv(target, index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, QueryObjectParameterName, IntPtr, void> _glGetQueryObjecti64v;
        
        public static unsafe void glGetQueryObjecti64v(uint id, QueryObjectParameterName pname, ref long @params)
        {
            _glGetQueryObjecti64v(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, QueryObjectParameterName, IntPtr, void> _glGetQueryObjecti64vEXT;
        
        public static unsafe void glGetQueryObjecti64vEXT(uint id, QueryObjectParameterName pname, ref long @params)
        {
            _glGetQueryObjecti64vEXT(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, QueryObjectParameterName, IntPtr, void> _glGetQueryObjectiv;
        
        public static unsafe void glGetQueryObjectiv(uint id, QueryObjectParameterName pname, ref int @params)
        {
            _glGetQueryObjectiv(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, QueryObjectParameterName, IntPtr, void> _glGetQueryObjectivARB;
        
        public static unsafe void glGetQueryObjectivARB(uint id, QueryObjectParameterName pname, ref int @params)
        {
            _glGetQueryObjectivARB(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, QueryObjectParameterName, IntPtr, void> _glGetQueryObjectivEXT;
        
        public static unsafe void glGetQueryObjectivEXT(uint id, QueryObjectParameterName pname, ref int @params)
        {
            _glGetQueryObjectivEXT(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, QueryObjectParameterName, IntPtr, void> _glGetQueryObjectui64v;
        
        public static unsafe void glGetQueryObjectui64v(uint id, QueryObjectParameterName pname, ref ulong @params)
        {
            _glGetQueryObjectui64v(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, QueryObjectParameterName, IntPtr, void> _glGetQueryObjectui64vEXT;
        
        public static unsafe void glGetQueryObjectui64vEXT(uint id, QueryObjectParameterName pname, ref ulong @params)
        {
            _glGetQueryObjectui64vEXT(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, QueryObjectParameterName, IntPtr, void> _glGetQueryObjectuiv;
        
        public static unsafe void glGetQueryObjectuiv(uint id, QueryObjectParameterName pname, ref uint @params)
        {
            _glGetQueryObjectuiv(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, QueryObjectParameterName, IntPtr, void> _glGetQueryObjectuivARB;
        
        public static unsafe void glGetQueryObjectuivARB(uint id, QueryObjectParameterName pname, ref uint @params)
        {
            _glGetQueryObjectuivARB(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, QueryObjectParameterName, IntPtr, void> _glGetQueryObjectuivEXT;
        
        public static unsafe void glGetQueryObjectuivEXT(uint id, QueryObjectParameterName pname, ref uint @params)
        {
            _glGetQueryObjectuivEXT(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<QueryTarget, QueryParameterName, IntPtr, void> _glGetQueryiv;
        
        public static unsafe void glGetQueryiv(QueryTarget target, QueryParameterName pname, ref int @params)
        {
            _glGetQueryiv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<QueryTarget, QueryParameterName, IntPtr, void> _glGetQueryivARB;
        
        public static unsafe void glGetQueryivARB(QueryTarget target, QueryParameterName pname, ref int @params)
        {
            _glGetQueryivARB(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<QueryTarget, QueryParameterName, IntPtr, void> _glGetQueryivEXT;
        
        public static unsafe void glGetQueryivEXT(QueryTarget target, QueryParameterName pname, ref int @params)
        {
            _glGetQueryivEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<RenderbufferTarget, RenderbufferParameterName, IntPtr, void> _glGetRenderbufferParameteriv;
        
        public static unsafe void glGetRenderbufferParameteriv(RenderbufferTarget target, RenderbufferParameterName pname, ref int @params)
        {
            _glGetRenderbufferParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<RenderbufferTarget, RenderbufferParameterName, IntPtr, void> _glGetRenderbufferParameterivEXT;
        
        public static unsafe void glGetRenderbufferParameterivEXT(RenderbufferTarget target, RenderbufferParameterName pname, ref int @params)
        {
            _glGetRenderbufferParameterivEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<RenderbufferTarget, RenderbufferParameterName, IntPtr, void> _glGetRenderbufferParameterivOES;
        
        public static unsafe void glGetRenderbufferParameterivOES(RenderbufferTarget target, RenderbufferParameterName pname, ref int @params)
        {
            _glGetRenderbufferParameterivOES(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glGetSamplerParameterIiv;
        
        public static unsafe void glGetSamplerParameterIiv(uint sampler, SamplerParameterI pname, ref int @params)
        {
            _glGetSamplerParameterIiv(sampler, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glGetSamplerParameterIivEXT;
        
        public static unsafe void glGetSamplerParameterIivEXT(uint sampler, SamplerParameterI pname, ref int @params)
        {
            _glGetSamplerParameterIivEXT(sampler, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glGetSamplerParameterIivOES;
        
        public static unsafe void glGetSamplerParameterIivOES(uint sampler, SamplerParameterI pname, ref int @params)
        {
            _glGetSamplerParameterIivOES(sampler, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glGetSamplerParameterIuiv;
        
        public static unsafe void glGetSamplerParameterIuiv(uint sampler, SamplerParameterI pname, ref uint @params)
        {
            _glGetSamplerParameterIuiv(sampler, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glGetSamplerParameterIuivEXT;
        
        public static unsafe void glGetSamplerParameterIuivEXT(uint sampler, SamplerParameterI pname, ref uint @params)
        {
            _glGetSamplerParameterIuivEXT(sampler, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glGetSamplerParameterIuivOES;
        
        public static unsafe void glGetSamplerParameterIuivOES(uint sampler, SamplerParameterI pname, ref uint @params)
        {
            _glGetSamplerParameterIuivOES(sampler, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SamplerParameterF, IntPtr, void> _glGetSamplerParameterfv;
        
        public static unsafe void glGetSamplerParameterfv(uint sampler, SamplerParameterF pname, ref float @params)
        {
            _glGetSamplerParameterfv(sampler, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glGetSamplerParameteriv;
        
        public static unsafe void glGetSamplerParameteriv(uint sampler, SamplerParameterI pname, ref int @params)
        {
            _glGetSamplerParameteriv(sampler, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SemaphoreParameterName, IntPtr, void> _glGetSemaphoreParameterivNV;
        
        public static unsafe void glGetSemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, ref int @params)
        {
            _glGetSemaphoreParameterivNV(semaphore, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SemaphoreParameterName, IntPtr, void> _glGetSemaphoreParameterui64vEXT;
        
        public static unsafe void glGetSemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname, ref ulong @params)
        {
            _glGetSemaphoreParameterui64vEXT(semaphore, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<SeparableTargetEXT, PixelFormat, PixelType, IntPtr, IntPtr, IntPtr, void> _glGetSeparableFilter;
        
        public static unsafe void glGetSeparableFilter(SeparableTargetEXT target, PixelFormat format, PixelType type, IntPtr row, IntPtr column, IntPtr span)
        {
            _glGetSeparableFilter(target, format, type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
        }
        
        public static unsafe delegate*<SeparableTargetEXT, PixelFormat, PixelType, IntPtr, IntPtr, IntPtr, void> _glGetSeparableFilterEXT;
        
        public static unsafe void glGetSeparableFilterEXT(SeparableTargetEXT target, PixelFormat format, PixelType type, IntPtr row, IntPtr column, IntPtr span)
        {
            _glGetSeparableFilterEXT(target, format, type, (IntPtr)row, (IntPtr)column, (IntPtr)span);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetShaderInfoLog;
        
        public static unsafe void glGetShaderInfoLog(uint shader, int bufSize, ref int length, ref sbyte infoLog)
        {
            _glGetShaderInfoLog(shader, bufSize, (IntPtr)length, (IntPtr)infoLog);
        }
        
        public static unsafe delegate*<ShaderType, PrecisionType, IntPtr, IntPtr, void> _glGetShaderPrecisionFormat;
        
        public static unsafe void glGetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, ref int range, ref int precision)
        {
            _glGetShaderPrecisionFormat(shadertype, precisiontype, (IntPtr)range, (IntPtr)precision);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetShaderSource;
        
        public static unsafe void glGetShaderSource(uint shader, int bufSize, ref int length, ref sbyte source)
        {
            _glGetShaderSource(shader, bufSize, (IntPtr)length, (IntPtr)source);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetShaderSourceARB;
        
        public static unsafe void glGetShaderSourceARB(uint obj, int maxLength, ref int length, ref sbyte source)
        {
            _glGetShaderSourceARB(obj, maxLength, (IntPtr)length, (IntPtr)source);
        }
        
        public static unsafe delegate*<uint, ShaderParameterName, IntPtr, void> _glGetShaderiv;
        
        public static unsafe void glGetShaderiv(uint shader, ShaderParameterName pname, ref int @params)
        {
            _glGetShaderiv(shader, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetShadingRateImagePaletteNV;
        
        public static unsafe void glGetShadingRateImagePaletteNV(uint viewport, uint entry, ref uint rate)
        {
            _glGetShadingRateImagePaletteNV(viewport, entry, (IntPtr)rate);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glGetShadingRateSampleLocationivNV;
        
        public static unsafe void glGetShadingRateSampleLocationivNV(uint rate, uint samples, uint index, ref int location)
        {
            _glGetShadingRateSampleLocationivNV(rate, samples, index, (IntPtr)location);
        }
        
        public static unsafe delegate*<TextureTarget, IntPtr, void> _glGetSharpenTexFuncSGIS;
        
        public static unsafe void glGetSharpenTexFuncSGIS(TextureTarget target, ref float points)
        {
            _glGetSharpenTexFuncSGIS(target, (IntPtr)points);
        }
        
        public static unsafe delegate*<ShaderType, ushort> _glGetStageIndexNV;
        
        public static unsafe ushort glGetStageIndexNV(ShaderType shadertype)
        {
            return _glGetStageIndexNV(shadertype);
        }
        
        public static unsafe delegate*<StringName, byte> _glGetString;
        
        public static unsafe byte glGetString(StringName name)
        {
            return _glGetString(name);
        }
        
        public static unsafe delegate*<StringName, uint, byte> _glGetStringi;
        
        public static unsafe byte glGetStringi(StringName name, uint index)
        {
            return _glGetStringi(name, index);
        }
        
        public static unsafe delegate*<uint, ShaderType, IntPtr, uint> _glGetSubroutineIndex;
        
        public static unsafe uint glGetSubroutineIndex(uint program, ShaderType shadertype, ref sbyte name)
        {
            return _glGetSubroutineIndex(program, shadertype, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ShaderType, IntPtr, int> _glGetSubroutineUniformLocation;
        
        public static unsafe int glGetSubroutineUniformLocation(uint program, ShaderType shadertype, ref sbyte name)
        {
            return _glGetSubroutineUniformLocation(program, shadertype, (IntPtr)name);
        }
        
        public static unsafe delegate*<IntPtr, SyncParameterName, int, IntPtr, IntPtr, void> _glGetSynciv;
        
        public static unsafe void glGetSynciv(IntPtr sync, SyncParameterName pname, int count, ref int length, ref int values)
        {
            _glGetSynciv(sync, pname, count, (IntPtr)length, (IntPtr)values);
        }
        
        public static unsafe delegate*<IntPtr, SyncParameterName, int, IntPtr, IntPtr, void> _glGetSyncivAPPLE;
        
        public static unsafe void glGetSyncivAPPLE(IntPtr sync, SyncParameterName pname, int count, ref int length, ref int values)
        {
            _glGetSyncivAPPLE(sync, pname, count, (IntPtr)length, (IntPtr)values);
        }
        
        public static unsafe delegate*<GetTexBumpParameterATI, IntPtr, void> _glGetTexBumpParameterfvATI;
        
        public static unsafe void glGetTexBumpParameterfvATI(GetTexBumpParameterATI pname, ref float param)
        {
            _glGetTexBumpParameterfvATI(pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<GetTexBumpParameterATI, IntPtr, void> _glGetTexBumpParameterivATI;
        
        public static unsafe void glGetTexBumpParameterivATI(GetTexBumpParameterATI pname, ref int param)
        {
            _glGetTexBumpParameterivATI(pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glGetTexEnvfv;
        
        public static unsafe void glGetTexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, ref float @params)
        {
            _glGetTexEnvfv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glGetTexEnviv;
        
        public static unsafe void glGetTexEnviv(TextureEnvTarget target, TextureEnvParameter pname, ref int @params)
        {
            _glGetTexEnviv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glGetTexEnvxv;
        
        public static unsafe void glGetTexEnvxv(TextureEnvTarget target, TextureEnvParameter pname, ref int @params)
        {
            _glGetTexEnvxv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glGetTexEnvxvOES;
        
        public static unsafe void glGetTexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, ref int @params)
        {
            _glGetTexEnvxvOES(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, TextureFilterSGIS, IntPtr, void> _glGetTexFilterFuncSGIS;
        
        public static unsafe void glGetTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, ref float weights)
        {
            _glGetTexFilterFuncSGIS(target, filter, (IntPtr)weights);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glGetTexGendv;
        
        public static unsafe void glGetTexGendv(TextureCoordName coord, TextureGenParameter pname, ref double @params)
        {
            _glGetTexGendv(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glGetTexGenfv;
        
        public static unsafe void glGetTexGenfv(TextureCoordName coord, TextureGenParameter pname, ref float @params)
        {
            _glGetTexGenfv(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glGetTexGenfvOES;
        
        public static unsafe void glGetTexGenfvOES(TextureCoordName coord, TextureGenParameter pname, ref float @params)
        {
            _glGetTexGenfvOES(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glGetTexGeniv;
        
        public static unsafe void glGetTexGeniv(TextureCoordName coord, TextureGenParameter pname, ref int @params)
        {
            _glGetTexGeniv(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glGetTexGenivOES;
        
        public static unsafe void glGetTexGenivOES(TextureCoordName coord, TextureGenParameter pname, ref int @params)
        {
            _glGetTexGenivOES(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glGetTexGenxvOES;
        
        public static unsafe void glGetTexGenxvOES(TextureCoordName coord, TextureGenParameter pname, ref int @params)
        {
            _glGetTexGenxvOES(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, int, PixelFormat, PixelType, IntPtr, void> _glGetTexImage;
        
        public static unsafe void glGetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glGetTexImage(target, level, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, GetTextureParameter, IntPtr, void> _glGetTexLevelParameterfv;
        
        public static unsafe void glGetTexLevelParameterfv(TextureTarget target, int level, GetTextureParameter pname, ref float @params)
        {
            _glGetTexLevelParameterfv(target, level, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, int, GetTextureParameter, IntPtr, void> _glGetTexLevelParameteriv;
        
        public static unsafe void glGetTexLevelParameteriv(TextureTarget target, int level, GetTextureParameter pname, ref int @params)
        {
            _glGetTexLevelParameteriv(target, level, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, int, GetTextureParameter, IntPtr, void> _glGetTexLevelParameterxvOES;
        
        public static unsafe void glGetTexLevelParameterxvOES(TextureTarget target, int level, GetTextureParameter pname, ref int @params)
        {
            _glGetTexLevelParameterxvOES(target, level, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glGetTexParameterIiv;
        
        public static unsafe void glGetTexParameterIiv(TextureTarget target, GetTextureParameter pname, ref int @params)
        {
            _glGetTexParameterIiv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glGetTexParameterIivEXT;
        
        public static unsafe void glGetTexParameterIivEXT(TextureTarget target, GetTextureParameter pname, ref int @params)
        {
            _glGetTexParameterIivEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glGetTexParameterIivOES;
        
        public static unsafe void glGetTexParameterIivOES(TextureTarget target, GetTextureParameter pname, ref int @params)
        {
            _glGetTexParameterIivOES(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glGetTexParameterIuiv;
        
        public static unsafe void glGetTexParameterIuiv(TextureTarget target, GetTextureParameter pname, ref uint @params)
        {
            _glGetTexParameterIuiv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glGetTexParameterIuivEXT;
        
        public static unsafe void glGetTexParameterIuivEXT(TextureTarget target, GetTextureParameter pname, ref uint @params)
        {
            _glGetTexParameterIuivEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glGetTexParameterIuivOES;
        
        public static unsafe void glGetTexParameterIuivOES(TextureTarget target, GetTextureParameter pname, ref uint @params)
        {
            _glGetTexParameterIuivOES(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetTexParameterPointervAPPLE;
        
        public static unsafe void glGetTexParameterPointervAPPLE(uint target, uint pname, out IntPtr @params)
        {
            _glGetTexParameterPointervAPPLE(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glGetTexParameterfv;
        
        public static unsafe void glGetTexParameterfv(TextureTarget target, GetTextureParameter pname, ref float @params)
        {
            _glGetTexParameterfv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glGetTexParameteriv;
        
        public static unsafe void glGetTexParameteriv(TextureTarget target, GetTextureParameter pname, ref int @params)
        {
            _glGetTexParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glGetTexParameterxv;
        
        public static unsafe void glGetTexParameterxv(TextureTarget target, GetTextureParameter pname, ref int @params)
        {
            _glGetTexParameterxv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glGetTexParameterxvOES;
        
        public static unsafe void glGetTexParameterxvOES(TextureTarget target, GetTextureParameter pname, ref int @params)
        {
            _glGetTexParameterxvOES(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ulong> _glGetTextureHandleARB;
        
        public static unsafe ulong glGetTextureHandleARB(uint texture)
        {
            return _glGetTextureHandleARB(texture);
        }
        
        public static unsafe delegate*<uint, ulong> _glGetTextureHandleIMG;
        
        public static unsafe ulong glGetTextureHandleIMG(uint texture)
        {
            return _glGetTextureHandleIMG(texture);
        }
        
        public static unsafe delegate*<uint, ulong> _glGetTextureHandleNV;
        
        public static unsafe ulong glGetTextureHandleNV(uint texture)
        {
            return _glGetTextureHandleNV(texture);
        }
        
        public static unsafe delegate*<uint, int, PixelFormat, PixelType, int, IntPtr, void> _glGetTextureImage;
        
        public static unsafe void glGetTextureImage(uint texture, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            _glGetTextureImage(texture, level, format, type, bufSize, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, PixelFormat, PixelType, IntPtr, void> _glGetTextureImageEXT;
        
        public static unsafe void glGetTextureImageEXT(uint texture, TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glGetTextureImageEXT(texture, target, level, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, int, GetTextureParameter, IntPtr, void> _glGetTextureLevelParameterfv;
        
        public static unsafe void glGetTextureLevelParameterfv(uint texture, int level, GetTextureParameter pname, ref float @params)
        {
            _glGetTextureLevelParameterfv(texture, level, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, GetTextureParameter, IntPtr, void> _glGetTextureLevelParameterfvEXT;
        
        public static unsafe void glGetTextureLevelParameterfvEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, ref float @params)
        {
            _glGetTextureLevelParameterfvEXT(texture, target, level, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, GetTextureParameter, IntPtr, void> _glGetTextureLevelParameteriv;
        
        public static unsafe void glGetTextureLevelParameteriv(uint texture, int level, GetTextureParameter pname, ref int @params)
        {
            _glGetTextureLevelParameteriv(texture, level, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, GetTextureParameter, IntPtr, void> _glGetTextureLevelParameterivEXT;
        
        public static unsafe void glGetTextureLevelParameterivEXT(uint texture, TextureTarget target, int level, GetTextureParameter pname, ref int @params)
        {
            _glGetTextureLevelParameterivEXT(texture, target, level, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, GetTextureParameter, IntPtr, void> _glGetTextureParameterIiv;
        
        public static unsafe void glGetTextureParameterIiv(uint texture, GetTextureParameter pname, ref int @params)
        {
            _glGetTextureParameterIiv(texture, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, TextureTarget, GetTextureParameter, IntPtr, void> _glGetTextureParameterIivEXT;
        
        public static unsafe void glGetTextureParameterIivEXT(uint texture, TextureTarget target, GetTextureParameter pname, ref int @params)
        {
            _glGetTextureParameterIivEXT(texture, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, GetTextureParameter, IntPtr, void> _glGetTextureParameterIuiv;
        
        public static unsafe void glGetTextureParameterIuiv(uint texture, GetTextureParameter pname, ref uint @params)
        {
            _glGetTextureParameterIuiv(texture, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, TextureTarget, GetTextureParameter, IntPtr, void> _glGetTextureParameterIuivEXT;
        
        public static unsafe void glGetTextureParameterIuivEXT(uint texture, TextureTarget target, GetTextureParameter pname, ref uint @params)
        {
            _glGetTextureParameterIuivEXT(texture, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, GetTextureParameter, IntPtr, void> _glGetTextureParameterfv;
        
        public static unsafe void glGetTextureParameterfv(uint texture, GetTextureParameter pname, ref float @params)
        {
            _glGetTextureParameterfv(texture, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, TextureTarget, GetTextureParameter, IntPtr, void> _glGetTextureParameterfvEXT;
        
        public static unsafe void glGetTextureParameterfvEXT(uint texture, TextureTarget target, GetTextureParameter pname, ref float @params)
        {
            _glGetTextureParameterfvEXT(texture, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, GetTextureParameter, IntPtr, void> _glGetTextureParameteriv;
        
        public static unsafe void glGetTextureParameteriv(uint texture, GetTextureParameter pname, ref int @params)
        {
            _glGetTextureParameteriv(texture, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, TextureTarget, GetTextureParameter, IntPtr, void> _glGetTextureParameterivEXT;
        
        public static unsafe void glGetTextureParameterivEXT(uint texture, TextureTarget target, GetTextureParameter pname, ref int @params)
        {
            _glGetTextureParameterivEXT(texture, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, ulong> _glGetTextureSamplerHandleARB;
        
        public static unsafe ulong glGetTextureSamplerHandleARB(uint texture, uint sampler)
        {
            return _glGetTextureSamplerHandleARB(texture, sampler);
        }
        
        public static unsafe delegate*<uint, uint, ulong> _glGetTextureSamplerHandleIMG;
        
        public static unsafe ulong glGetTextureSamplerHandleIMG(uint texture, uint sampler)
        {
            return _glGetTextureSamplerHandleIMG(texture, sampler);
        }
        
        public static unsafe delegate*<uint, uint, ulong> _glGetTextureSamplerHandleNV;
        
        public static unsafe ulong glGetTextureSamplerHandleNV(uint texture, uint sampler)
        {
            return _glGetTextureSamplerHandleNV(texture, sampler);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, PixelFormat, PixelType, int, IntPtr, void> _glGetTextureSubImage;
        
        public static unsafe void glGetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            _glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<VertexAttribEnumNV, uint, VertexAttribEnumNV, IntPtr, void> _glGetTrackMatrixivNV;
        
        public static unsafe void glGetTrackMatrixivNV(VertexAttribEnumNV target, uint address, VertexAttribEnumNV pname, ref int @params)
        {
            _glGetTrackMatrixivNV(target, address, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, IntPtr, IntPtr, void> _glGetTransformFeedbackVarying;
        
        public static unsafe void glGetTransformFeedbackVarying(uint program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type, ref sbyte name)
        {
            _glGetTransformFeedbackVarying(program, index, bufSize, (IntPtr)length, (IntPtr)size, (IntPtr)type, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, IntPtr, IntPtr, void> _glGetTransformFeedbackVaryingEXT;
        
        public static unsafe void glGetTransformFeedbackVaryingEXT(uint program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type, ref sbyte name)
        {
            _glGetTransformFeedbackVaryingEXT(program, index, bufSize, (IntPtr)length, (IntPtr)size, (IntPtr)type, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetTransformFeedbackVaryingNV;
        
        public static unsafe void glGetTransformFeedbackVaryingNV(uint program, uint index, ref int location)
        {
            _glGetTransformFeedbackVaryingNV(program, index, (IntPtr)location);
        }
        
        public static unsafe delegate*<uint, TransformFeedbackPName, uint, IntPtr, void> _glGetTransformFeedbacki64_v;
        
        public static unsafe void glGetTransformFeedbacki64_v(uint xfb, TransformFeedbackPName pname, uint index, ref long param)
        {
            _glGetTransformFeedbacki64_v(xfb, pname, index, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, TransformFeedbackPName, uint, IntPtr, void> _glGetTransformFeedbacki_v;
        
        public static unsafe void glGetTransformFeedbacki_v(uint xfb, TransformFeedbackPName pname, uint index, ref int param)
        {
            _glGetTransformFeedbacki_v(xfb, pname, index, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, TransformFeedbackPName, IntPtr, void> _glGetTransformFeedbackiv;
        
        public static unsafe void glGetTransformFeedbackiv(uint xfb, TransformFeedbackPName pname, ref int param)
        {
            _glGetTransformFeedbackiv(xfb, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetTranslatedShaderSourceANGLE;
        
        public static unsafe void glGetTranslatedShaderSourceANGLE(uint shader, int bufSize, ref int length, ref sbyte source)
        {
            _glGetTranslatedShaderSourceANGLE(shader, bufSize, (IntPtr)length, (IntPtr)source);
        }
        
        public static unsafe delegate*<uint, IntPtr, uint> _glGetUniformBlockIndex;
        
        public static unsafe uint glGetUniformBlockIndex(uint program, ref sbyte uniformBlockName)
        {
            return _glGetUniformBlockIndex(program, (IntPtr)uniformBlockName);
        }
        
        public static unsafe delegate*<uint, int, int> _glGetUniformBufferSizeEXT;
        
        public static unsafe int glGetUniformBufferSizeEXT(uint program, int location)
        {
            return _glGetUniformBufferSizeEXT(program, location);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetUniformIndices;
        
        public static unsafe void glGetUniformIndices(uint program, int uniformCount, out IntPtr uniformNames, ref uint uniformIndices)
        {
            _glGetUniformIndices(program, uniformCount, (IntPtr)uniformNames, (IntPtr)uniformIndices);
        }
        
        public static unsafe delegate*<uint, IntPtr, int> _glGetUniformLocation;
        
        public static unsafe int glGetUniformLocation(uint program, ref sbyte name)
        {
            return _glGetUniformLocation(program, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, IntPtr, int> _glGetUniformLocationARB;
        
        public static unsafe int glGetUniformLocationARB(uint programObj, ref sbyte name)
        {
            return _glGetUniformLocationARB(programObj, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, int, long> _glGetUniformOffsetEXT;
        
        public static unsafe long glGetUniformOffsetEXT(uint program, int location)
        {
            return _glGetUniformOffsetEXT(program, location);
        }
        
        public static unsafe delegate*<ShaderType, int, IntPtr, void> _glGetUniformSubroutineuiv;
        
        public static unsafe void glGetUniformSubroutineuiv(ShaderType shadertype, int location, ref uint @params)
        {
            _glGetUniformSubroutineuiv(shadertype, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformdv;
        
        public static unsafe void glGetUniformdv(uint program, int location, ref double @params)
        {
            _glGetUniformdv(program, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformfv;
        
        public static unsafe void glGetUniformfv(uint program, int location, ref float @params)
        {
            _glGetUniformfv(program, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformfvARB;
        
        public static unsafe void glGetUniformfvARB(uint programObj, int location, ref float @params)
        {
            _glGetUniformfvARB(programObj, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformi64vARB;
        
        public static unsafe void glGetUniformi64vARB(uint program, int location, ref long @params)
        {
            _glGetUniformi64vARB(program, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformi64vNV;
        
        public static unsafe void glGetUniformi64vNV(uint program, int location, ref long @params)
        {
            _glGetUniformi64vNV(program, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformiv;
        
        public static unsafe void glGetUniformiv(uint program, int location, ref int @params)
        {
            _glGetUniformiv(program, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformivARB;
        
        public static unsafe void glGetUniformivARB(uint programObj, int location, ref int @params)
        {
            _glGetUniformivARB(programObj, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformui64vARB;
        
        public static unsafe void glGetUniformui64vARB(uint program, int location, ref ulong @params)
        {
            _glGetUniformui64vARB(program, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformui64vNV;
        
        public static unsafe void glGetUniformui64vNV(uint program, int location, ref ulong @params)
        {
            _glGetUniformui64vNV(program, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformuiv;
        
        public static unsafe void glGetUniformuiv(uint program, int location, ref uint @params)
        {
            _glGetUniformuiv(program, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformuivEXT;
        
        public static unsafe void glGetUniformuivEXT(uint program, int location, ref uint @params)
        {
            _glGetUniformuivEXT(program, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetUnsignedBytevEXT;
        
        public static unsafe void glGetUnsignedBytevEXT(GetPName pname, ref byte data)
        {
            _glGetUnsignedBytevEXT(pname, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetUnsignedBytei_vEXT;
        
        public static unsafe void glGetUnsignedBytei_vEXT(uint target, uint index, ref byte data)
        {
            _glGetUnsignedBytei_vEXT(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, ArrayObjectPNameATI, IntPtr, void> _glGetVariantArrayObjectfvATI;
        
        public static unsafe void glGetVariantArrayObjectfvATI(uint id, ArrayObjectPNameATI pname, ref float @params)
        {
            _glGetVariantArrayObjectfvATI(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ArrayObjectPNameATI, IntPtr, void> _glGetVariantArrayObjectivATI;
        
        public static unsafe void glGetVariantArrayObjectivATI(uint id, ArrayObjectPNameATI pname, ref int @params)
        {
            _glGetVariantArrayObjectivATI(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, GetVariantValueEXT, IntPtr, void> _glGetVariantBooleanvEXT;
        
        public static unsafe void glGetVariantBooleanvEXT(uint id, GetVariantValueEXT value, ref byte data)
        {
            _glGetVariantBooleanvEXT(id, value, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, GetVariantValueEXT, IntPtr, void> _glGetVariantFloatvEXT;
        
        public static unsafe void glGetVariantFloatvEXT(uint id, GetVariantValueEXT value, ref float data)
        {
            _glGetVariantFloatvEXT(id, value, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, GetVariantValueEXT, IntPtr, void> _glGetVariantIntegervEXT;
        
        public static unsafe void glGetVariantIntegervEXT(uint id, GetVariantValueEXT value, ref int data)
        {
            _glGetVariantIntegervEXT(id, value, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, GetVariantValueEXT, IntPtr, void> _glGetVariantPointervEXT;
        
        public static unsafe void glGetVariantPointervEXT(uint id, GetVariantValueEXT value, out IntPtr data)
        {
            _glGetVariantPointervEXT(id, value, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, IntPtr, int> _glGetVaryingLocationNV;
        
        public static unsafe int glGetVaryingLocationNV(uint program, ref sbyte name)
        {
            return _glGetVaryingLocationNV(program, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, uint, VertexArrayPName, IntPtr, void> _glGetVertexArrayIndexed64iv;
        
        public static unsafe void glGetVertexArrayIndexed64iv(uint vaobj, uint index, VertexArrayPName pname, ref long param)
        {
            _glGetVertexArrayIndexed64iv(vaobj, index, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, uint, VertexArrayPName, IntPtr, void> _glGetVertexArrayIndexediv;
        
        public static unsafe void glGetVertexArrayIndexediv(uint vaobj, uint index, VertexArrayPName pname, ref int param)
        {
            _glGetVertexArrayIndexediv(vaobj, index, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, uint, VertexArrayPName, IntPtr, void> _glGetVertexArrayIntegeri_vEXT;
        
        public static unsafe void glGetVertexArrayIntegeri_vEXT(uint vaobj, uint index, VertexArrayPName pname, ref int param)
        {
            _glGetVertexArrayIntegeri_vEXT(vaobj, index, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, VertexArrayPName, IntPtr, void> _glGetVertexArrayIntegervEXT;
        
        public static unsafe void glGetVertexArrayIntegervEXT(uint vaobj, VertexArrayPName pname, ref int param)
        {
            _glGetVertexArrayIntegervEXT(vaobj, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, uint, VertexArrayPName, IntPtr, void> _glGetVertexArrayPointeri_vEXT;
        
        public static unsafe void glGetVertexArrayPointeri_vEXT(uint vaobj, uint index, VertexArrayPName pname, out IntPtr param)
        {
            _glGetVertexArrayPointeri_vEXT(vaobj, index, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, VertexArrayPName, IntPtr, void> _glGetVertexArrayPointervEXT;
        
        public static unsafe void glGetVertexArrayPointervEXT(uint vaobj, VertexArrayPName pname, out IntPtr param)
        {
            _glGetVertexArrayPointervEXT(vaobj, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, VertexArrayPName, IntPtr, void> _glGetVertexArrayiv;
        
        public static unsafe void glGetVertexArrayiv(uint vaobj, VertexArrayPName pname, ref int param)
        {
            _glGetVertexArrayiv(vaobj, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, ArrayObjectPNameATI, IntPtr, void> _glGetVertexAttribArrayObjectfvATI;
        
        public static unsafe void glGetVertexAttribArrayObjectfvATI(uint index, ArrayObjectPNameATI pname, ref float @params)
        {
            _glGetVertexAttribArrayObjectfvATI(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ArrayObjectPNameATI, IntPtr, void> _glGetVertexAttribArrayObjectivATI;
        
        public static unsafe void glGetVertexAttribArrayObjectivATI(uint index, ArrayObjectPNameATI pname, ref int @params)
        {
            _glGetVertexAttribArrayObjectivATI(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnum, IntPtr, void> _glGetVertexAttribIiv;
        
        public static unsafe void glGetVertexAttribIiv(uint index, VertexAttribEnum pname, ref int @params)
        {
            _glGetVertexAttribIiv(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnum, IntPtr, void> _glGetVertexAttribIivEXT;
        
        public static unsafe void glGetVertexAttribIivEXT(uint index, VertexAttribEnum pname, ref int @params)
        {
            _glGetVertexAttribIivEXT(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnum, IntPtr, void> _glGetVertexAttribIuiv;
        
        public static unsafe void glGetVertexAttribIuiv(uint index, VertexAttribEnum pname, ref uint @params)
        {
            _glGetVertexAttribIuiv(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnum, IntPtr, void> _glGetVertexAttribIuivEXT;
        
        public static unsafe void glGetVertexAttribIuivEXT(uint index, VertexAttribEnum pname, ref uint @params)
        {
            _glGetVertexAttribIuivEXT(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnum, IntPtr, void> _glGetVertexAttribLdv;
        
        public static unsafe void glGetVertexAttribLdv(uint index, VertexAttribEnum pname, ref double @params)
        {
            _glGetVertexAttribLdv(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnum, IntPtr, void> _glGetVertexAttribLdvEXT;
        
        public static unsafe void glGetVertexAttribLdvEXT(uint index, VertexAttribEnum pname, ref double @params)
        {
            _glGetVertexAttribLdvEXT(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnum, IntPtr, void> _glGetVertexAttribLi64vNV;
        
        public static unsafe void glGetVertexAttribLi64vNV(uint index, VertexAttribEnum pname, ref long @params)
        {
            _glGetVertexAttribLi64vNV(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnum, IntPtr, void> _glGetVertexAttribLui64vARB;
        
        public static unsafe void glGetVertexAttribLui64vARB(uint index, VertexAttribEnum pname, ref ulong @params)
        {
            _glGetVertexAttribLui64vARB(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnum, IntPtr, void> _glGetVertexAttribLui64vNV;
        
        public static unsafe void glGetVertexAttribLui64vNV(uint index, VertexAttribEnum pname, ref ulong @params)
        {
            _glGetVertexAttribLui64vNV(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerPropertyARB, IntPtr, void> _glGetVertexAttribPointerv;
        
        public static unsafe void glGetVertexAttribPointerv(uint index, VertexAttribPointerPropertyARB pname, out IntPtr pointer)
        {
            _glGetVertexAttribPointerv(index, pname, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerPropertyARB, IntPtr, void> _glGetVertexAttribPointervARB;
        
        public static unsafe void glGetVertexAttribPointervARB(uint index, VertexAttribPointerPropertyARB pname, out IntPtr pointer)
        {
            _glGetVertexAttribPointervARB(index, pname, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnumNV, IntPtr, void> _glGetVertexAttribPointervNV;
        
        public static unsafe void glGetVertexAttribPointervNV(uint index, VertexAttribEnumNV pname, out IntPtr pointer)
        {
            _glGetVertexAttribPointervNV(index, pname, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, VertexAttribPropertyARB, IntPtr, void> _glGetVertexAttribdv;
        
        public static unsafe void glGetVertexAttribdv(uint index, VertexAttribPropertyARB pname, ref double @params)
        {
            _glGetVertexAttribdv(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribPropertyARB, IntPtr, void> _glGetVertexAttribdvARB;
        
        public static unsafe void glGetVertexAttribdvARB(uint index, VertexAttribPropertyARB pname, ref double @params)
        {
            _glGetVertexAttribdvARB(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnumNV, IntPtr, void> _glGetVertexAttribdvNV;
        
        public static unsafe void glGetVertexAttribdvNV(uint index, VertexAttribEnumNV pname, ref double @params)
        {
            _glGetVertexAttribdvNV(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribPropertyARB, IntPtr, void> _glGetVertexAttribfv;
        
        public static unsafe void glGetVertexAttribfv(uint index, VertexAttribPropertyARB pname, ref float @params)
        {
            _glGetVertexAttribfv(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribPropertyARB, IntPtr, void> _glGetVertexAttribfvARB;
        
        public static unsafe void glGetVertexAttribfvARB(uint index, VertexAttribPropertyARB pname, ref float @params)
        {
            _glGetVertexAttribfvARB(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnumNV, IntPtr, void> _glGetVertexAttribfvNV;
        
        public static unsafe void glGetVertexAttribfvNV(uint index, VertexAttribEnumNV pname, ref float @params)
        {
            _glGetVertexAttribfvNV(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribPropertyARB, IntPtr, void> _glGetVertexAttribiv;
        
        public static unsafe void glGetVertexAttribiv(uint index, VertexAttribPropertyARB pname, ref int @params)
        {
            _glGetVertexAttribiv(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribPropertyARB, IntPtr, void> _glGetVertexAttribivARB;
        
        public static unsafe void glGetVertexAttribivARB(uint index, VertexAttribPropertyARB pname, ref int @params)
        {
            _glGetVertexAttribivARB(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnumNV, IntPtr, void> _glGetVertexAttribivNV;
        
        public static unsafe void glGetVertexAttribivNV(uint index, VertexAttribEnumNV pname, ref int @params)
        {
            _glGetVertexAttribivNV(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glGetVideoCaptureStreamdvNV;
        
        public static unsafe void glGetVideoCaptureStreamdvNV(uint video_capture_slot, uint stream, uint pname, ref double @params)
        {
            _glGetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glGetVideoCaptureStreamfvNV;
        
        public static unsafe void glGetVideoCaptureStreamfvNV(uint video_capture_slot, uint stream, uint pname, ref float @params)
        {
            _glGetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glGetVideoCaptureStreamivNV;
        
        public static unsafe void glGetVideoCaptureStreamivNV(uint video_capture_slot, uint stream, uint pname, ref int @params)
        {
            _glGetVideoCaptureStreamivNV(video_capture_slot, stream, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetVideoCaptureivNV;
        
        public static unsafe void glGetVideoCaptureivNV(uint video_capture_slot, uint pname, ref int @params)
        {
            _glGetVideoCaptureivNV(video_capture_slot, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetVideoi64vNV;
        
        public static unsafe void glGetVideoi64vNV(uint video_slot, uint pname, ref long @params)
        {
            _glGetVideoi64vNV(video_slot, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetVideoivNV;
        
        public static unsafe void glGetVideoivNV(uint video_slot, uint pname, ref int @params)
        {
            _glGetVideoivNV(video_slot, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetVideoui64vNV;
        
        public static unsafe void glGetVideoui64vNV(uint video_slot, uint pname, ref ulong @params)
        {
            _glGetVideoui64vNV(video_slot, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glGetVideouivNV;
        
        public static unsafe void glGetVideouivNV(uint video_slot, uint pname, ref uint @params)
        {
            _glGetVideouivNV(video_slot, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ColorTableTarget, PixelFormat, PixelType, int, IntPtr, void> _glGetnColorTable;
        
        public static unsafe void glGetnColorTable(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr table)
        {
            _glGetnColorTable(target, format, type, bufSize, (IntPtr)table);
        }
        
        public static unsafe delegate*<ColorTableTarget, PixelFormat, PixelType, int, IntPtr, void> _glGetnColorTableARB;
        
        public static unsafe void glGetnColorTableARB(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr table)
        {
            _glGetnColorTableARB(target, format, type, bufSize, (IntPtr)table);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, IntPtr, void> _glGetnCompressedTexImage;
        
        public static unsafe void glGetnCompressedTexImage(TextureTarget target, int lod, int bufSize, IntPtr pixels)
        {
            _glGetnCompressedTexImage(target, lod, bufSize, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, IntPtr, void> _glGetnCompressedTexImageARB;
        
        public static unsafe void glGetnCompressedTexImageARB(TextureTarget target, int lod, int bufSize, IntPtr img)
        {
            _glGetnCompressedTexImageARB(target, lod, bufSize, (IntPtr)img);
        }
        
        public static unsafe delegate*<ConvolutionTarget, PixelFormat, PixelType, int, IntPtr, void> _glGetnConvolutionFilter;
        
        public static unsafe void glGetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr image)
        {
            _glGetnConvolutionFilter(target, format, type, bufSize, (IntPtr)image);
        }
        
        public static unsafe delegate*<ConvolutionTarget, PixelFormat, PixelType, int, IntPtr, void> _glGetnConvolutionFilterARB;
        
        public static unsafe void glGetnConvolutionFilterARB(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr image)
        {
            _glGetnConvolutionFilterARB(target, format, type, bufSize, (IntPtr)image);
        }
        
        public static unsafe delegate*<HistogramTarget, byte, PixelFormat, PixelType, int, IntPtr, void> _glGetnHistogram;
        
        public static unsafe void glGetnHistogram(HistogramTarget target, byte reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
        {
            _glGetnHistogram(target, reset, format, type, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<HistogramTargetEXT, byte, PixelFormat, PixelType, int, IntPtr, void> _glGetnHistogramARB;
        
        public static unsafe void glGetnHistogramARB(HistogramTargetEXT target, byte reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
        {
            _glGetnHistogramARB(target, reset, format, type, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<MapTarget, MapQuery, int, IntPtr, void> _glGetnMapdv;
        
        public static unsafe void glGetnMapdv(MapTarget target, MapQuery query, int bufSize, ref double v)
        {
            _glGetnMapdv(target, query, bufSize, (IntPtr)v);
        }
        
        public static unsafe delegate*<MapTarget, MapQuery, int, IntPtr, void> _glGetnMapdvARB;
        
        public static unsafe void glGetnMapdvARB(MapTarget target, MapQuery query, int bufSize, ref double v)
        {
            _glGetnMapdvARB(target, query, bufSize, (IntPtr)v);
        }
        
        public static unsafe delegate*<MapTarget, MapQuery, int, IntPtr, void> _glGetnMapfv;
        
        public static unsafe void glGetnMapfv(MapTarget target, MapQuery query, int bufSize, ref float v)
        {
            _glGetnMapfv(target, query, bufSize, (IntPtr)v);
        }
        
        public static unsafe delegate*<MapTarget, MapQuery, int, IntPtr, void> _glGetnMapfvARB;
        
        public static unsafe void glGetnMapfvARB(MapTarget target, MapQuery query, int bufSize, ref float v)
        {
            _glGetnMapfvARB(target, query, bufSize, (IntPtr)v);
        }
        
        public static unsafe delegate*<MapTarget, MapQuery, int, IntPtr, void> _glGetnMapiv;
        
        public static unsafe void glGetnMapiv(MapTarget target, MapQuery query, int bufSize, ref int v)
        {
            _glGetnMapiv(target, query, bufSize, (IntPtr)v);
        }
        
        public static unsafe delegate*<MapTarget, MapQuery, int, IntPtr, void> _glGetnMapivARB;
        
        public static unsafe void glGetnMapivARB(MapTarget target, MapQuery query, int bufSize, ref int v)
        {
            _glGetnMapivARB(target, query, bufSize, (IntPtr)v);
        }
        
        public static unsafe delegate*<MinmaxTarget, byte, PixelFormat, PixelType, int, IntPtr, void> _glGetnMinmax;
        
        public static unsafe void glGetnMinmax(MinmaxTarget target, byte reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
        {
            _glGetnMinmax(target, reset, format, type, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<MinmaxTargetEXT, byte, PixelFormat, PixelType, int, IntPtr, void> _glGetnMinmaxARB;
        
        public static unsafe void glGetnMinmaxARB(MinmaxTargetEXT target, byte reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
        {
            _glGetnMinmaxARB(target, reset, format, type, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glGetnPixelMapfv;
        
        public static unsafe void glGetnPixelMapfv(PixelMap map, int bufSize, ref float values)
        {
            _glGetnPixelMapfv(map, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glGetnPixelMapfvARB;
        
        public static unsafe void glGetnPixelMapfvARB(PixelMap map, int bufSize, ref float values)
        {
            _glGetnPixelMapfvARB(map, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glGetnPixelMapuiv;
        
        public static unsafe void glGetnPixelMapuiv(PixelMap map, int bufSize, ref uint values)
        {
            _glGetnPixelMapuiv(map, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glGetnPixelMapuivARB;
        
        public static unsafe void glGetnPixelMapuivARB(PixelMap map, int bufSize, ref uint values)
        {
            _glGetnPixelMapuivARB(map, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glGetnPixelMapusv;
        
        public static unsafe void glGetnPixelMapusv(PixelMap map, int bufSize, ref ushort values)
        {
            _glGetnPixelMapusv(map, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glGetnPixelMapusvARB;
        
        public static unsafe void glGetnPixelMapusvARB(PixelMap map, int bufSize, ref ushort values)
        {
            _glGetnPixelMapusvARB(map, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGetnPolygonStipple;
        
        public static unsafe void glGetnPolygonStipple(int bufSize, ref byte pattern)
        {
            _glGetnPolygonStipple(bufSize, (IntPtr)pattern);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGetnPolygonStippleARB;
        
        public static unsafe void glGetnPolygonStippleARB(int bufSize, ref byte pattern)
        {
            _glGetnPolygonStippleARB(bufSize, (IntPtr)pattern);
        }
        
        public static unsafe delegate*<SeparableTarget, PixelFormat, PixelType, int, IntPtr, int, IntPtr, IntPtr, void> _glGetnSeparableFilter;
        
        public static unsafe void glGetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span)
        {
            _glGetnSeparableFilter(target, format, type, rowBufSize, (IntPtr)row, columnBufSize, (IntPtr)column, (IntPtr)span);
        }
        
        public static unsafe delegate*<SeparableTargetEXT, PixelFormat, PixelType, int, IntPtr, int, IntPtr, IntPtr, void> _glGetnSeparableFilterARB;
        
        public static unsafe void glGetnSeparableFilterARB(SeparableTargetEXT target, PixelFormat format, PixelType type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span)
        {
            _glGetnSeparableFilterARB(target, format, type, rowBufSize, (IntPtr)row, columnBufSize, (IntPtr)column, (IntPtr)span);
        }
        
        public static unsafe delegate*<TextureTarget, int, PixelFormat, PixelType, int, IntPtr, void> _glGetnTexImage;
        
        public static unsafe void glGetnTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            _glGetnTexImage(target, level, format, type, bufSize, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, PixelFormat, PixelType, int, IntPtr, void> _glGetnTexImageARB;
        
        public static unsafe void glGetnTexImageARB(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, IntPtr img)
        {
            _glGetnTexImageARB(target, level, format, type, bufSize, (IntPtr)img);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformdv;
        
        public static unsafe void glGetnUniformdv(uint program, int location, int bufSize, ref double @params)
        {
            _glGetnUniformdv(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformdvARB;
        
        public static unsafe void glGetnUniformdvARB(uint program, int location, int bufSize, ref double @params)
        {
            _glGetnUniformdvARB(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformfv;
        
        public static unsafe void glGetnUniformfv(uint program, int location, int bufSize, ref float @params)
        {
            _glGetnUniformfv(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformfvARB;
        
        public static unsafe void glGetnUniformfvARB(uint program, int location, int bufSize, ref float @params)
        {
            _glGetnUniformfvARB(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformfvEXT;
        
        public static unsafe void glGetnUniformfvEXT(uint program, int location, int bufSize, ref float @params)
        {
            _glGetnUniformfvEXT(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformfvKHR;
        
        public static unsafe void glGetnUniformfvKHR(uint program, int location, int bufSize, ref float @params)
        {
            _glGetnUniformfvKHR(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformi64vARB;
        
        public static unsafe void glGetnUniformi64vARB(uint program, int location, int bufSize, ref long @params)
        {
            _glGetnUniformi64vARB(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformiv;
        
        public static unsafe void glGetnUniformiv(uint program, int location, int bufSize, ref int @params)
        {
            _glGetnUniformiv(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformivARB;
        
        public static unsafe void glGetnUniformivARB(uint program, int location, int bufSize, ref int @params)
        {
            _glGetnUniformivARB(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformivEXT;
        
        public static unsafe void glGetnUniformivEXT(uint program, int location, int bufSize, ref int @params)
        {
            _glGetnUniformivEXT(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformivKHR;
        
        public static unsafe void glGetnUniformivKHR(uint program, int location, int bufSize, ref int @params)
        {
            _glGetnUniformivKHR(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformui64vARB;
        
        public static unsafe void glGetnUniformui64vARB(uint program, int location, int bufSize, ref ulong @params)
        {
            _glGetnUniformui64vARB(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformuiv;
        
        public static unsafe void glGetnUniformuiv(uint program, int location, int bufSize, ref uint @params)
        {
            _glGetnUniformuiv(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformuivARB;
        
        public static unsafe void glGetnUniformuivARB(uint program, int location, int bufSize, ref uint @params)
        {
            _glGetnUniformuivARB(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformuivKHR;
        
        public static unsafe void glGetnUniformuivKHR(uint program, int location, int bufSize, ref uint @params)
        {
            _glGetnUniformuivKHR(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<sbyte, void> _glGlobalAlphaFactorbSUN;
        
        public static unsafe void glGlobalAlphaFactorbSUN(sbyte factor)
        {
            _glGlobalAlphaFactorbSUN(factor);
        }
        
        public static unsafe delegate*<double, void> _glGlobalAlphaFactordSUN;
        
        public static unsafe void glGlobalAlphaFactordSUN(double factor)
        {
            _glGlobalAlphaFactordSUN(factor);
        }
        
        public static unsafe delegate*<float, void> _glGlobalAlphaFactorfSUN;
        
        public static unsafe void glGlobalAlphaFactorfSUN(float factor)
        {
            _glGlobalAlphaFactorfSUN(factor);
        }
        
        public static unsafe delegate*<int, void> _glGlobalAlphaFactoriSUN;
        
        public static unsafe void glGlobalAlphaFactoriSUN(int factor)
        {
            _glGlobalAlphaFactoriSUN(factor);
        }
        
        public static unsafe delegate*<short, void> _glGlobalAlphaFactorsSUN;
        
        public static unsafe void glGlobalAlphaFactorsSUN(short factor)
        {
            _glGlobalAlphaFactorsSUN(factor);
        }
        
        public static unsafe delegate*<byte, void> _glGlobalAlphaFactorubSUN;
        
        public static unsafe void glGlobalAlphaFactorubSUN(byte factor)
        {
            _glGlobalAlphaFactorubSUN(factor);
        }
        
        public static unsafe delegate*<uint, void> _glGlobalAlphaFactoruiSUN;
        
        public static unsafe void glGlobalAlphaFactoruiSUN(uint factor)
        {
            _glGlobalAlphaFactoruiSUN(factor);
        }
        
        public static unsafe delegate*<ushort, void> _glGlobalAlphaFactorusSUN;
        
        public static unsafe void glGlobalAlphaFactorusSUN(ushort factor)
        {
            _glGlobalAlphaFactorusSUN(factor);
        }
        
        public static unsafe delegate*<HintTarget, HintMode, void> _glHint;
        
        public static unsafe void glHint(HintTarget target, HintMode mode)
        {
            _glHint(target, mode);
        }
        
        public static unsafe delegate*<HintTargetPGI, int, void> _glHintPGI;
        
        public static unsafe void glHintPGI(HintTargetPGI target, int mode)
        {
            _glHintPGI(target, mode);
        }
        
        public static unsafe delegate*<HistogramTargetEXT, int, InternalFormat, byte, void> _glHistogram;
        
        public static unsafe void glHistogram(HistogramTargetEXT target, int width, InternalFormat internalformat, byte sink)
        {
            _glHistogram(target, width, internalformat, sink);
        }
        
        public static unsafe delegate*<HistogramTargetEXT, int, InternalFormat, byte, void> _glHistogramEXT;
        
        public static unsafe void glHistogramEXT(HistogramTargetEXT target, int width, InternalFormat internalformat, byte sink)
        {
            _glHistogramEXT(target, width, internalformat, sink);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glIglooInterfaceSGIX;
        
        public static unsafe void glIglooInterfaceSGIX(uint pname, IntPtr @params)
        {
            _glIglooInterfaceSGIX(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ImageTransformTargetHP, ImageTransformPNameHP, float, void> _glImageTransformParameterfHP;
        
        public static unsafe void glImageTransformParameterfHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, float param)
        {
            _glImageTransformParameterfHP(target, pname, param);
        }
        
        public static unsafe delegate*<ImageTransformTargetHP, ImageTransformPNameHP, IntPtr, void> _glImageTransformParameterfvHP;
        
        public static unsafe void glImageTransformParameterfvHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, ref float @params)
        {
            _glImageTransformParameterfvHP(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ImageTransformTargetHP, ImageTransformPNameHP, int, void> _glImageTransformParameteriHP;
        
        public static unsafe void glImageTransformParameteriHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, int param)
        {
            _glImageTransformParameteriHP(target, pname, param);
        }
        
        public static unsafe delegate*<ImageTransformTargetHP, ImageTransformPNameHP, IntPtr, void> _glImageTransformParameterivHP;
        
        public static unsafe void glImageTransformParameterivHP(ImageTransformTargetHP target, ImageTransformPNameHP pname, ref int @params)
        {
            _glImageTransformParameterivHP(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ulong, ExternalHandleType, int, void> _glImportMemoryFdEXT;
        
        public static unsafe void glImportMemoryFdEXT(uint memory, ulong size, ExternalHandleType handleType, int fd)
        {
            _glImportMemoryFdEXT(memory, size, handleType, fd);
        }
        
        public static unsafe delegate*<uint, ulong, ExternalHandleType, IntPtr, void> _glImportMemoryWin32HandleEXT;
        
        public static unsafe void glImportMemoryWin32HandleEXT(uint memory, ulong size, ExternalHandleType handleType, IntPtr handle)
        {
            _glImportMemoryWin32HandleEXT(memory, size, handleType, (IntPtr)handle);
        }
        
        public static unsafe delegate*<uint, ulong, ExternalHandleType, IntPtr, void> _glImportMemoryWin32NameEXT;
        
        public static unsafe void glImportMemoryWin32NameEXT(uint memory, ulong size, ExternalHandleType handleType, IntPtr name)
        {
            _glImportMemoryWin32NameEXT(memory, size, handleType, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ExternalHandleType, int, void> _glImportSemaphoreFdEXT;
        
        public static unsafe void glImportSemaphoreFdEXT(uint semaphore, ExternalHandleType handleType, int fd)
        {
            _glImportSemaphoreFdEXT(semaphore, handleType, fd);
        }
        
        public static unsafe delegate*<uint, ExternalHandleType, IntPtr, void> _glImportSemaphoreWin32HandleEXT;
        
        public static unsafe void glImportSemaphoreWin32HandleEXT(uint semaphore, ExternalHandleType handleType, IntPtr handle)
        {
            _glImportSemaphoreWin32HandleEXT(semaphore, handleType, (IntPtr)handle);
        }
        
        public static unsafe delegate*<uint, ExternalHandleType, IntPtr, void> _glImportSemaphoreWin32NameEXT;
        
        public static unsafe void glImportSemaphoreWin32NameEXT(uint semaphore, ExternalHandleType handleType, IntPtr name)
        {
            _glImportSemaphoreWin32NameEXT(semaphore, handleType, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, long, uint, IntPtr> _glImportSyncEXT;
        
        public static unsafe IntPtr glImportSyncEXT(uint external_sync_type, long external_sync, uint flags)
        {
            return _glImportSyncEXT(external_sync_type, external_sync, flags);
        }
        
        public static unsafe delegate*<uint, int, void> _glIndexFormatNV;
        
        public static unsafe void glIndexFormatNV(uint type, int stride)
        {
            _glIndexFormatNV(type, stride);
        }
        
        public static unsafe delegate*<IndexFunctionEXT, float, void> _glIndexFuncEXT;
        
        public static unsafe void glIndexFuncEXT(IndexFunctionEXT func, float @ref)
        {
            _glIndexFuncEXT(func, @ref);
        }
        
        public static unsafe delegate*<uint, void> _glIndexMask;
        
        public static unsafe void glIndexMask(uint mask)
        {
            _glIndexMask(mask);
        }
        
        public static unsafe delegate*<MaterialFace, IndexMaterialParameterEXT, void> _glIndexMaterialEXT;
        
        public static unsafe void glIndexMaterialEXT(MaterialFace face, IndexMaterialParameterEXT mode)
        {
            _glIndexMaterialEXT(face, mode);
        }
        
        public static unsafe delegate*<IndexPointerType, int, IntPtr, void> _glIndexPointer;
        
        public static unsafe void glIndexPointer(IndexPointerType type, int stride, IntPtr pointer)
        {
            _glIndexPointer(type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<IndexPointerType, int, int, IntPtr, void> _glIndexPointerEXT;
        
        public static unsafe void glIndexPointerEXT(IndexPointerType type, int stride, int count, IntPtr pointer)
        {
            _glIndexPointerEXT(type, stride, count, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<IndexPointerType, int, IntPtr, int, void> _glIndexPointerListIBM;
        
        public static unsafe void glIndexPointerListIBM(IndexPointerType type, int stride, out IntPtr pointer, int ptrstride)
        {
            _glIndexPointerListIBM(type, stride, (IntPtr)pointer, ptrstride);
        }
        
        public static unsafe delegate*<double, void> _glIndexd;
        
        public static unsafe void glIndexd(double c)
        {
            _glIndexd(c);
        }
        
        public static unsafe delegate*<IntPtr, void> _glIndexdv;
        
        public static unsafe void glIndexdv(ref double c)
        {
            _glIndexdv((IntPtr)c);
        }
        
        public static unsafe delegate*<float, void> _glIndexf;
        
        public static unsafe void glIndexf(float c)
        {
            _glIndexf(c);
        }
        
        public static unsafe delegate*<IntPtr, void> _glIndexfv;
        
        public static unsafe void glIndexfv(ref float c)
        {
            _glIndexfv((IntPtr)c);
        }
        
        public static unsafe delegate*<int, void> _glIndexi;
        
        public static unsafe void glIndexi(int c)
        {
            _glIndexi(c);
        }
        
        public static unsafe delegate*<IntPtr, void> _glIndexiv;
        
        public static unsafe void glIndexiv(ref int c)
        {
            _glIndexiv((IntPtr)c);
        }
        
        public static unsafe delegate*<short, void> _glIndexs;
        
        public static unsafe void glIndexs(short c)
        {
            _glIndexs(c);
        }
        
        public static unsafe delegate*<IntPtr, void> _glIndexsv;
        
        public static unsafe void glIndexsv(ref short c)
        {
            _glIndexsv((IntPtr)c);
        }
        
        public static unsafe delegate*<byte, void> _glIndexub;
        
        public static unsafe void glIndexub(byte c)
        {
            _glIndexub(c);
        }
        
        public static unsafe delegate*<IntPtr, void> _glIndexubv;
        
        public static unsafe void glIndexubv(ref byte c)
        {
            _glIndexubv((IntPtr)c);
        }
        
        public static unsafe delegate*<int, void> _glIndexxOES;
        
        public static unsafe void glIndexxOES(int component)
        {
            _glIndexxOES(component);
        }
        
        public static unsafe delegate*<IntPtr, void> _glIndexxvOES;
        
        public static unsafe void glIndexxvOES(ref int component)
        {
            _glIndexxvOES((IntPtr)component);
        }
        
        public static unsafe delegate*<void> _glInitNames;
        
        public static unsafe void glInitNames()
        {
            _glInitNames();
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glInsertComponentEXT;
        
        public static unsafe void glInsertComponentEXT(uint res, uint src, uint num)
        {
            _glInsertComponentEXT(res, src, num);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glInsertEventMarkerEXT;
        
        public static unsafe void glInsertEventMarkerEXT(int length, ref sbyte marker)
        {
            _glInsertEventMarkerEXT(length, (IntPtr)marker);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glInstrumentsBufferSGIX;
        
        public static unsafe void glInstrumentsBufferSGIX(int size, ref int buffer)
        {
            _glInstrumentsBufferSGIX(size, (IntPtr)buffer);
        }
        
        public static unsafe delegate*<InterleavedArrayFormat, int, IntPtr, void> _glInterleavedArrays;
        
        public static unsafe void glInterleavedArrays(InterleavedArrayFormat format, int stride, IntPtr pointer)
        {
            _glInterleavedArrays(format, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, uint, uint, float, void> _glInterpolatePathsNV;
        
        public static unsafe void glInterpolatePathsNV(uint resultPath, uint pathA, uint pathB, float weight)
        {
            _glInterpolatePathsNV(resultPath, pathA, pathB, weight);
        }
        
        public static unsafe delegate*<uint, void> _glInvalidateBufferData;
        
        public static unsafe void glInvalidateBufferData(uint buffer)
        {
            _glInvalidateBufferData(buffer);
        }
        
        public static unsafe delegate*<uint, long, long, void> _glInvalidateBufferSubData;
        
        public static unsafe void glInvalidateBufferSubData(uint buffer, long offset, long length)
        {
            _glInvalidateBufferSubData(buffer, offset, length);
        }
        
        public static unsafe delegate*<FramebufferTarget, int, IntPtr, void> _glInvalidateFramebuffer;
        
        public static unsafe void glInvalidateFramebuffer(FramebufferTarget target, int numAttachments, ref InvalidateFramebufferAttachment attachments)
        {
            _glInvalidateFramebuffer(target, numAttachments, (IntPtr)attachments);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glInvalidateNamedFramebufferData;
        
        public static unsafe void glInvalidateNamedFramebufferData(uint framebuffer, int numAttachments, ref FramebufferAttachment attachments)
        {
            _glInvalidateNamedFramebufferData(framebuffer, numAttachments, (IntPtr)attachments);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, int, int, int, int, void> _glInvalidateNamedFramebufferSubData;
        
        public static unsafe void glInvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, ref FramebufferAttachment attachments, int x, int y, int width, int height)
        {
            _glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, (IntPtr)attachments, x, y, width, height);
        }
        
        public static unsafe delegate*<FramebufferTarget, int, IntPtr, int, int, int, int, void> _glInvalidateSubFramebuffer;
        
        public static unsafe void glInvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, ref InvalidateFramebufferAttachment attachments, int x, int y, int width, int height)
        {
            _glInvalidateSubFramebuffer(target, numAttachments, (IntPtr)attachments, x, y, width, height);
        }
        
        public static unsafe delegate*<uint, int, void> _glInvalidateTexImage;
        
        public static unsafe void glInvalidateTexImage(uint texture, int level)
        {
            _glInvalidateTexImage(texture, level);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, void> _glInvalidateTexSubImage;
        
        public static unsafe void glInvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
        {
            _glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
        }
        
        public static unsafe delegate*<uint, byte> _glIsAsyncMarkerSGIX;
        
        public static unsafe byte glIsAsyncMarkerSGIX(uint marker)
        {
            return _glIsAsyncMarkerSGIX(marker);
        }
        
        public static unsafe delegate*<uint, byte> _glIsBuffer;
        
        public static unsafe byte glIsBuffer(uint buffer)
        {
            return _glIsBuffer(buffer);
        }
        
        public static unsafe delegate*<uint, byte> _glIsBufferARB;
        
        public static unsafe byte glIsBufferARB(uint buffer)
        {
            return _glIsBufferARB(buffer);
        }
        
        public static unsafe delegate*<uint, byte> _glIsBufferResidentNV;
        
        public static unsafe byte glIsBufferResidentNV(uint target)
        {
            return _glIsBufferResidentNV(target);
        }
        
        public static unsafe delegate*<uint, byte> _glIsCommandListNV;
        
        public static unsafe byte glIsCommandListNV(uint list)
        {
            return _glIsCommandListNV(list);
        }
        
        public static unsafe delegate*<EnableCap, byte> _glIsEnabled;
        
        public static unsafe byte glIsEnabled(EnableCap cap)
        {
            return _glIsEnabled(cap);
        }
        
        public static unsafe delegate*<EnableCap, uint, byte> _glIsEnabledIndexedEXT;
        
        public static unsafe byte glIsEnabledIndexedEXT(EnableCap target, uint index)
        {
            return _glIsEnabledIndexedEXT(target, index);
        }
        
        public static unsafe delegate*<EnableCap, uint, byte> _glIsEnabledi;
        
        public static unsafe byte glIsEnabledi(EnableCap target, uint index)
        {
            return _glIsEnabledi(target, index);
        }
        
        public static unsafe delegate*<EnableCap, uint, byte> _glIsEnablediEXT;
        
        public static unsafe byte glIsEnablediEXT(EnableCap target, uint index)
        {
            return _glIsEnablediEXT(target, index);
        }
        
        public static unsafe delegate*<EnableCap, uint, byte> _glIsEnablediNV;
        
        public static unsafe byte glIsEnablediNV(EnableCap target, uint index)
        {
            return _glIsEnablediNV(target, index);
        }
        
        public static unsafe delegate*<EnableCap, uint, byte> _glIsEnablediOES;
        
        public static unsafe byte glIsEnablediOES(EnableCap target, uint index)
        {
            return _glIsEnablediOES(target, index);
        }
        
        public static unsafe delegate*<uint, byte> _glIsFenceAPPLE;
        
        public static unsafe byte glIsFenceAPPLE(uint fence)
        {
            return _glIsFenceAPPLE(fence);
        }
        
        public static unsafe delegate*<uint, byte> _glIsFenceNV;
        
        public static unsafe byte glIsFenceNV(uint fence)
        {
            return _glIsFenceNV(fence);
        }
        
        public static unsafe delegate*<uint, byte> _glIsFramebuffer;
        
        public static unsafe byte glIsFramebuffer(uint framebuffer)
        {
            return _glIsFramebuffer(framebuffer);
        }
        
        public static unsafe delegate*<uint, byte> _glIsFramebufferEXT;
        
        public static unsafe byte glIsFramebufferEXT(uint framebuffer)
        {
            return _glIsFramebufferEXT(framebuffer);
        }
        
        public static unsafe delegate*<uint, byte> _glIsFramebufferOES;
        
        public static unsafe byte glIsFramebufferOES(uint framebuffer)
        {
            return _glIsFramebufferOES(framebuffer);
        }
        
        public static unsafe delegate*<ulong, byte> _glIsImageHandleResidentARB;
        
        public static unsafe byte glIsImageHandleResidentARB(ulong handle)
        {
            return _glIsImageHandleResidentARB(handle);
        }
        
        public static unsafe delegate*<ulong, byte> _glIsImageHandleResidentNV;
        
        public static unsafe byte glIsImageHandleResidentNV(ulong handle)
        {
            return _glIsImageHandleResidentNV(handle);
        }
        
        public static unsafe delegate*<uint, byte> _glIsList;
        
        public static unsafe byte glIsList(uint list)
        {
            return _glIsList(list);
        }
        
        public static unsafe delegate*<uint, byte> _glIsMemoryObjectEXT;
        
        public static unsafe byte glIsMemoryObjectEXT(uint memoryObject)
        {
            return _glIsMemoryObjectEXT(memoryObject);
        }
        
        public static unsafe delegate*<uint, uint, byte> _glIsNameAMD;
        
        public static unsafe byte glIsNameAMD(uint identifier, uint name)
        {
            return _glIsNameAMD(identifier, name);
        }
        
        public static unsafe delegate*<uint, byte> _glIsNamedBufferResidentNV;
        
        public static unsafe byte glIsNamedBufferResidentNV(uint buffer)
        {
            return _glIsNamedBufferResidentNV(buffer);
        }
        
        public static unsafe delegate*<int, IntPtr, byte> _glIsNamedStringARB;
        
        public static unsafe byte glIsNamedStringARB(int namelen, ref sbyte name)
        {
            return _glIsNamedStringARB(namelen, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, byte> _glIsObjectBufferATI;
        
        public static unsafe byte glIsObjectBufferATI(uint buffer)
        {
            return _glIsObjectBufferATI(buffer);
        }
        
        public static unsafe delegate*<uint, byte> _glIsOcclusionQueryNV;
        
        public static unsafe byte glIsOcclusionQueryNV(uint id)
        {
            return _glIsOcclusionQueryNV(id);
        }
        
        public static unsafe delegate*<uint, byte> _glIsPathNV;
        
        public static unsafe byte glIsPathNV(uint path)
        {
            return _glIsPathNV(path);
        }
        
        public static unsafe delegate*<uint, uint, float, float, byte> _glIsPointInFillPathNV;
        
        public static unsafe byte glIsPointInFillPathNV(uint path, uint mask, float x, float y)
        {
            return _glIsPointInFillPathNV(path, mask, x, y);
        }
        
        public static unsafe delegate*<uint, float, float, byte> _glIsPointInStrokePathNV;
        
        public static unsafe byte glIsPointInStrokePathNV(uint path, float x, float y)
        {
            return _glIsPointInStrokePathNV(path, x, y);
        }
        
        public static unsafe delegate*<uint, byte> _glIsProgram;
        
        public static unsafe byte glIsProgram(uint program)
        {
            return _glIsProgram(program);
        }
        
        public static unsafe delegate*<uint, byte> _glIsProgramARB;
        
        public static unsafe byte glIsProgramARB(uint program)
        {
            return _glIsProgramARB(program);
        }
        
        public static unsafe delegate*<uint, byte> _glIsProgramNV;
        
        public static unsafe byte glIsProgramNV(uint id)
        {
            return _glIsProgramNV(id);
        }
        
        public static unsafe delegate*<uint, byte> _glIsProgramPipeline;
        
        public static unsafe byte glIsProgramPipeline(uint pipeline)
        {
            return _glIsProgramPipeline(pipeline);
        }
        
        public static unsafe delegate*<uint, byte> _glIsProgramPipelineEXT;
        
        public static unsafe byte glIsProgramPipelineEXT(uint pipeline)
        {
            return _glIsProgramPipelineEXT(pipeline);
        }
        
        public static unsafe delegate*<uint, byte> _glIsQuery;
        
        public static unsafe byte glIsQuery(uint id)
        {
            return _glIsQuery(id);
        }
        
        public static unsafe delegate*<uint, byte> _glIsQueryARB;
        
        public static unsafe byte glIsQueryARB(uint id)
        {
            return _glIsQueryARB(id);
        }
        
        public static unsafe delegate*<uint, byte> _glIsQueryEXT;
        
        public static unsafe byte glIsQueryEXT(uint id)
        {
            return _glIsQueryEXT(id);
        }
        
        public static unsafe delegate*<uint, byte> _glIsRenderbuffer;
        
        public static unsafe byte glIsRenderbuffer(uint renderbuffer)
        {
            return _glIsRenderbuffer(renderbuffer);
        }
        
        public static unsafe delegate*<uint, byte> _glIsRenderbufferEXT;
        
        public static unsafe byte glIsRenderbufferEXT(uint renderbuffer)
        {
            return _glIsRenderbufferEXT(renderbuffer);
        }
        
        public static unsafe delegate*<uint, byte> _glIsRenderbufferOES;
        
        public static unsafe byte glIsRenderbufferOES(uint renderbuffer)
        {
            return _glIsRenderbufferOES(renderbuffer);
        }
        
        public static unsafe delegate*<uint, byte> _glIsSemaphoreEXT;
        
        public static unsafe byte glIsSemaphoreEXT(uint semaphore)
        {
            return _glIsSemaphoreEXT(semaphore);
        }
        
        public static unsafe delegate*<uint, byte> _glIsSampler;
        
        public static unsafe byte glIsSampler(uint sampler)
        {
            return _glIsSampler(sampler);
        }
        
        public static unsafe delegate*<uint, byte> _glIsShader;
        
        public static unsafe byte glIsShader(uint shader)
        {
            return _glIsShader(shader);
        }
        
        public static unsafe delegate*<uint, byte> _glIsStateNV;
        
        public static unsafe byte glIsStateNV(uint state)
        {
            return _glIsStateNV(state);
        }
        
        public static unsafe delegate*<IntPtr, byte> _glIsSync;
        
        public static unsafe byte glIsSync(IntPtr sync)
        {
            return _glIsSync(sync);
        }
        
        public static unsafe delegate*<IntPtr, byte> _glIsSyncAPPLE;
        
        public static unsafe byte glIsSyncAPPLE(IntPtr sync)
        {
            return _glIsSyncAPPLE(sync);
        }
        
        public static unsafe delegate*<uint, byte> _glIsTexture;
        
        public static unsafe byte glIsTexture(uint texture)
        {
            return _glIsTexture(texture);
        }
        
        public static unsafe delegate*<uint, byte> _glIsTextureEXT;
        
        public static unsafe byte glIsTextureEXT(uint texture)
        {
            return _glIsTextureEXT(texture);
        }
        
        public static unsafe delegate*<ulong, byte> _glIsTextureHandleResidentARB;
        
        public static unsafe byte glIsTextureHandleResidentARB(ulong handle)
        {
            return _glIsTextureHandleResidentARB(handle);
        }
        
        public static unsafe delegate*<ulong, byte> _glIsTextureHandleResidentNV;
        
        public static unsafe byte glIsTextureHandleResidentNV(ulong handle)
        {
            return _glIsTextureHandleResidentNV(handle);
        }
        
        public static unsafe delegate*<uint, byte> _glIsTransformFeedback;
        
        public static unsafe byte glIsTransformFeedback(uint id)
        {
            return _glIsTransformFeedback(id);
        }
        
        public static unsafe delegate*<uint, byte> _glIsTransformFeedbackNV;
        
        public static unsafe byte glIsTransformFeedbackNV(uint id)
        {
            return _glIsTransformFeedbackNV(id);
        }
        
        public static unsafe delegate*<uint, VariantCapEXT, byte> _glIsVariantEnabledEXT;
        
        public static unsafe byte glIsVariantEnabledEXT(uint id, VariantCapEXT cap)
        {
            return _glIsVariantEnabledEXT(id, cap);
        }
        
        public static unsafe delegate*<uint, byte> _glIsVertexArray;
        
        public static unsafe byte glIsVertexArray(uint array)
        {
            return _glIsVertexArray(array);
        }
        
        public static unsafe delegate*<uint, byte> _glIsVertexArrayAPPLE;
        
        public static unsafe byte glIsVertexArrayAPPLE(uint array)
        {
            return _glIsVertexArrayAPPLE(array);
        }
        
        public static unsafe delegate*<uint, byte> _glIsVertexArrayOES;
        
        public static unsafe byte glIsVertexArrayOES(uint array)
        {
            return _glIsVertexArrayOES(array);
        }
        
        public static unsafe delegate*<uint, uint, byte> _glIsVertexAttribEnabledAPPLE;
        
        public static unsafe byte glIsVertexAttribEnabledAPPLE(uint index, uint pname)
        {
            return _glIsVertexAttribEnabledAPPLE(index, pname);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _glLGPUCopyImageSubDataNVX;
        
        public static unsafe void glLGPUCopyImageSubDataNVX(uint sourceGpu, uint destinationGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srxY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int width, int height, int depth)
        {
            _glLGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
        }
        
        public static unsafe delegate*<void> _glLGPUInterlockNVX;
        
        public static unsafe void glLGPUInterlockNVX()
        {
            _glLGPUInterlockNVX();
        }
        
        public static unsafe delegate*<uint, uint, long, long, IntPtr, void> _glLGPUNamedBufferSubDataNVX;
        
        public static unsafe void glLGPUNamedBufferSubDataNVX(uint gpuMask, uint buffer, long offset, long size, IntPtr data)
        {
            _glLGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, void> _glLabelObjectEXT;
        
        public static unsafe void glLabelObjectEXT(uint type, uint @object, int length, ref sbyte label)
        {
            _glLabelObjectEXT(type, @object, length, (IntPtr)label);
        }
        
        public static unsafe delegate*<LightEnvParameterSGIX, int, void> _glLightEnviSGIX;
        
        public static unsafe void glLightEnviSGIX(LightEnvParameterSGIX pname, int param)
        {
            _glLightEnviSGIX(pname, param);
        }
        
        public static unsafe delegate*<LightModelParameter, float, void> _glLightModelf;
        
        public static unsafe void glLightModelf(LightModelParameter pname, float param)
        {
            _glLightModelf(pname, param);
        }
        
        public static unsafe delegate*<LightModelParameter, IntPtr, void> _glLightModelfv;
        
        public static unsafe void glLightModelfv(LightModelParameter pname, ref float @params)
        {
            _glLightModelfv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<LightModelParameter, int, void> _glLightModeli;
        
        public static unsafe void glLightModeli(LightModelParameter pname, int param)
        {
            _glLightModeli(pname, param);
        }
        
        public static unsafe delegate*<LightModelParameter, IntPtr, void> _glLightModeliv;
        
        public static unsafe void glLightModeliv(LightModelParameter pname, ref int @params)
        {
            _glLightModeliv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<LightModelParameter, int, void> _glLightModelx;
        
        public static unsafe void glLightModelx(LightModelParameter pname, int param)
        {
            _glLightModelx(pname, param);
        }
        
        public static unsafe delegate*<LightModelParameter, int, void> _glLightModelxOES;
        
        public static unsafe void glLightModelxOES(LightModelParameter pname, int param)
        {
            _glLightModelxOES(pname, param);
        }
        
        public static unsafe delegate*<LightModelParameter, IntPtr, void> _glLightModelxv;
        
        public static unsafe void glLightModelxv(LightModelParameter pname, ref int param)
        {
            _glLightModelxv(pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<LightModelParameter, IntPtr, void> _glLightModelxvOES;
        
        public static unsafe void glLightModelxvOES(LightModelParameter pname, ref int param)
        {
            _glLightModelxvOES(pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<LightName, LightParameter, float, void> _glLightf;
        
        public static unsafe void glLightf(LightName light, LightParameter pname, float param)
        {
            _glLightf(light, pname, param);
        }
        
        public static unsafe delegate*<LightName, LightParameter, IntPtr, void> _glLightfv;
        
        public static unsafe void glLightfv(LightName light, LightParameter pname, ref float @params)
        {
            _glLightfv(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<LightName, LightParameter, int, void> _glLighti;
        
        public static unsafe void glLighti(LightName light, LightParameter pname, int param)
        {
            _glLighti(light, pname, param);
        }
        
        public static unsafe delegate*<LightName, LightParameter, IntPtr, void> _glLightiv;
        
        public static unsafe void glLightiv(LightName light, LightParameter pname, ref int @params)
        {
            _glLightiv(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<LightName, LightParameter, int, void> _glLightx;
        
        public static unsafe void glLightx(LightName light, LightParameter pname, int param)
        {
            _glLightx(light, pname, param);
        }
        
        public static unsafe delegate*<LightName, LightParameter, int, void> _glLightxOES;
        
        public static unsafe void glLightxOES(LightName light, LightParameter pname, int param)
        {
            _glLightxOES(light, pname, param);
        }
        
        public static unsafe delegate*<LightName, LightParameter, IntPtr, void> _glLightxv;
        
        public static unsafe void glLightxv(LightName light, LightParameter pname, ref int @params)
        {
            _glLightxv(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<LightName, LightParameter, IntPtr, void> _glLightxvOES;
        
        public static unsafe void glLightxvOES(LightName light, LightParameter pname, ref int @params)
        {
            _glLightxvOES(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<int, ushort, void> _glLineStipple;
        
        public static unsafe void glLineStipple(int factor, ushort pattern)
        {
            _glLineStipple(factor, pattern);
        }
        
        public static unsafe delegate*<float, void> _glLineWidth;
        
        public static unsafe void glLineWidth(float width)
        {
            _glLineWidth(width);
        }
        
        public static unsafe delegate*<int, void> _glLineWidthx;
        
        public static unsafe void glLineWidthx(int width)
        {
            _glLineWidthx(width);
        }
        
        public static unsafe delegate*<int, void> _glLineWidthxOES;
        
        public static unsafe void glLineWidthxOES(int width)
        {
            _glLineWidthxOES(width);
        }
        
        public static unsafe delegate*<uint, void> _glLinkProgram;
        
        public static unsafe void glLinkProgram(uint program)
        {
            _glLinkProgram(program);
        }
        
        public static unsafe delegate*<uint, void> _glLinkProgramARB;
        
        public static unsafe void glLinkProgramARB(uint programObj)
        {
            _glLinkProgramARB(programObj);
        }
        
        public static unsafe delegate*<uint, void> _glListBase;
        
        public static unsafe void glListBase(uint @base)
        {
            _glListBase(@base);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, IntPtr, IntPtr, IntPtr, uint, void> _glListDrawCommandsStatesClientNV;
        
        public static unsafe void glListDrawCommandsStatesClientNV(uint list, uint segment, out IntPtr indirects, ref int sizes, ref uint states, ref uint fbos, uint count)
        {
            _glListDrawCommandsStatesClientNV(list, segment, (IntPtr)indirects, (IntPtr)sizes, (IntPtr)states, (IntPtr)fbos, count);
        }
        
        public static unsafe delegate*<uint, ListParameterName, float, void> _glListParameterfSGIX;
        
        public static unsafe void glListParameterfSGIX(uint list, ListParameterName pname, float param)
        {
            _glListParameterfSGIX(list, pname, param);
        }
        
        public static unsafe delegate*<uint, ListParameterName, IntPtr, void> _glListParameterfvSGIX;
        
        public static unsafe void glListParameterfvSGIX(uint list, ListParameterName pname, ref float @params)
        {
            _glListParameterfvSGIX(list, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ListParameterName, int, void> _glListParameteriSGIX;
        
        public static unsafe void glListParameteriSGIX(uint list, ListParameterName pname, int param)
        {
            _glListParameteriSGIX(list, pname, param);
        }
        
        public static unsafe delegate*<uint, ListParameterName, IntPtr, void> _glListParameterivSGIX;
        
        public static unsafe void glListParameterivSGIX(uint list, ListParameterName pname, ref int @params)
        {
            _glListParameterivSGIX(list, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<void> _glLoadIdentity;
        
        public static unsafe void glLoadIdentity()
        {
            _glLoadIdentity();
        }
        
        public static unsafe delegate*<uint, void> _glLoadIdentityDeformationMapSGIX;
        
        public static unsafe void glLoadIdentityDeformationMapSGIX(uint mask)
        {
            _glLoadIdentityDeformationMapSGIX(mask);
        }
        
        public static unsafe delegate*<IntPtr, void> _glLoadMatrixd;
        
        public static unsafe void glLoadMatrixd(ref double m)
        {
            _glLoadMatrixd((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glLoadMatrixf;
        
        public static unsafe void glLoadMatrixf(ref float m)
        {
            _glLoadMatrixf((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glLoadMatrixx;
        
        public static unsafe void glLoadMatrixx(ref int m)
        {
            _glLoadMatrixx((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glLoadMatrixxOES;
        
        public static unsafe void glLoadMatrixxOES(ref int m)
        {
            _glLoadMatrixxOES((IntPtr)m);
        }
        
        public static unsafe delegate*<uint, void> _glLoadName;
        
        public static unsafe void glLoadName(uint name)
        {
            _glLoadName(name);
        }
        
        public static unsafe delegate*<void> _glLoadPaletteFromModelViewMatrixOES;
        
        public static unsafe void glLoadPaletteFromModelViewMatrixOES()
        {
            _glLoadPaletteFromModelViewMatrixOES();
        }
        
        public static unsafe delegate*<VertexAttribEnumNV, uint, int, IntPtr, void> _glLoadProgramNV;
        
        public static unsafe void glLoadProgramNV(VertexAttribEnumNV target, uint id, int len, ref byte program)
        {
            _glLoadProgramNV(target, id, len, (IntPtr)program);
        }
        
        public static unsafe delegate*<IntPtr, void> _glLoadTransposeMatrixd;
        
        public static unsafe void glLoadTransposeMatrixd(ref double m)
        {
            _glLoadTransposeMatrixd((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glLoadTransposeMatrixdARB;
        
        public static unsafe void glLoadTransposeMatrixdARB(ref double m)
        {
            _glLoadTransposeMatrixdARB((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glLoadTransposeMatrixf;
        
        public static unsafe void glLoadTransposeMatrixf(ref float m)
        {
            _glLoadTransposeMatrixf((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glLoadTransposeMatrixfARB;
        
        public static unsafe void glLoadTransposeMatrixfARB(ref float m)
        {
            _glLoadTransposeMatrixfARB((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glLoadTransposeMatrixxOES;
        
        public static unsafe void glLoadTransposeMatrixxOES(ref int m)
        {
            _glLoadTransposeMatrixxOES((IntPtr)m);
        }
        
        public static unsafe delegate*<int, int, void> _glLockArraysEXT;
        
        public static unsafe void glLockArraysEXT(int first, int count)
        {
            _glLockArraysEXT(first, count);
        }
        
        public static unsafe delegate*<LogicOp, void> _glLogicOp;
        
        public static unsafe void glLogicOp(LogicOp opcode)
        {
            _glLogicOp(opcode);
        }
        
        public static unsafe delegate*<uint, void> _glMakeBufferNonResidentNV;
        
        public static unsafe void glMakeBufferNonResidentNV(uint target)
        {
            _glMakeBufferNonResidentNV(target);
        }
        
        public static unsafe delegate*<uint, uint, void> _glMakeBufferResidentNV;
        
        public static unsafe void glMakeBufferResidentNV(uint target, uint access)
        {
            _glMakeBufferResidentNV(target, access);
        }
        
        public static unsafe delegate*<ulong, void> _glMakeImageHandleNonResidentARB;
        
        public static unsafe void glMakeImageHandleNonResidentARB(ulong handle)
        {
            _glMakeImageHandleNonResidentARB(handle);
        }
        
        public static unsafe delegate*<ulong, void> _glMakeImageHandleNonResidentNV;
        
        public static unsafe void glMakeImageHandleNonResidentNV(ulong handle)
        {
            _glMakeImageHandleNonResidentNV(handle);
        }
        
        public static unsafe delegate*<ulong, uint, void> _glMakeImageHandleResidentARB;
        
        public static unsafe void glMakeImageHandleResidentARB(ulong handle, uint access)
        {
            _glMakeImageHandleResidentARB(handle, access);
        }
        
        public static unsafe delegate*<ulong, uint, void> _glMakeImageHandleResidentNV;
        
        public static unsafe void glMakeImageHandleResidentNV(ulong handle, uint access)
        {
            _glMakeImageHandleResidentNV(handle, access);
        }
        
        public static unsafe delegate*<uint, void> _glMakeNamedBufferNonResidentNV;
        
        public static unsafe void glMakeNamedBufferNonResidentNV(uint buffer)
        {
            _glMakeNamedBufferNonResidentNV(buffer);
        }
        
        public static unsafe delegate*<uint, uint, void> _glMakeNamedBufferResidentNV;
        
        public static unsafe void glMakeNamedBufferResidentNV(uint buffer, uint access)
        {
            _glMakeNamedBufferResidentNV(buffer, access);
        }
        
        public static unsafe delegate*<ulong, void> _glMakeTextureHandleNonResidentARB;
        
        public static unsafe void glMakeTextureHandleNonResidentARB(ulong handle)
        {
            _glMakeTextureHandleNonResidentARB(handle);
        }
        
        public static unsafe delegate*<ulong, void> _glMakeTextureHandleNonResidentNV;
        
        public static unsafe void glMakeTextureHandleNonResidentNV(ulong handle)
        {
            _glMakeTextureHandleNonResidentNV(handle);
        }
        
        public static unsafe delegate*<ulong, void> _glMakeTextureHandleResidentARB;
        
        public static unsafe void glMakeTextureHandleResidentARB(ulong handle)
        {
            _glMakeTextureHandleResidentARB(handle);
        }
        
        public static unsafe delegate*<ulong, void> _glMakeTextureHandleResidentNV;
        
        public static unsafe void glMakeTextureHandleResidentNV(ulong handle)
        {
            _glMakeTextureHandleResidentNV(handle);
        }
        
        public static unsafe delegate*<MapTarget, double, double, int, int, IntPtr, void> _glMap1d;
        
        public static unsafe void glMap1d(MapTarget target, double u1, double u2, int stride, int order, ref double points)
        {
            _glMap1d(target, u1, u2, stride, order, (IntPtr)points);
        }
        
        public static unsafe delegate*<MapTarget, float, float, int, int, IntPtr, void> _glMap1f;
        
        public static unsafe void glMap1f(MapTarget target, float u1, float u2, int stride, int order, ref float points)
        {
            _glMap1f(target, u1, u2, stride, order, (IntPtr)points);
        }
        
        public static unsafe delegate*<MapTarget, int, int, int, int, int, void> _glMap1xOES;
        
        public static unsafe void glMap1xOES(MapTarget target, int u1, int u2, int stride, int order, int points)
        {
            _glMap1xOES(target, u1, u2, stride, order, points);
        }
        
        public static unsafe delegate*<MapTarget, double, double, int, int, double, double, int, int, IntPtr, void> _glMap2d;
        
        public static unsafe void glMap2d(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points)
        {
            _glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, (IntPtr)points);
        }
        
        public static unsafe delegate*<MapTarget, float, float, int, int, float, float, int, int, IntPtr, void> _glMap2f;
        
        public static unsafe void glMap2f(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points)
        {
            _glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, (IntPtr)points);
        }
        
        public static unsafe delegate*<MapTarget, int, int, int, int, int, int, int, int, int, void> _glMap2xOES;
        
        public static unsafe void glMap2xOES(MapTarget target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points)
        {
            _glMap2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        
        public static unsafe delegate*<BufferTargetARB, BufferAccessARB, void> _glMapBuffer;
        
        public static unsafe void glMapBuffer(BufferTargetARB target, BufferAccessARB access)
        {
            _glMapBuffer(target, access);
        }
        
        public static unsafe delegate*<BufferTargetARB, BufferAccessARB, void> _glMapBufferARB;
        
        public static unsafe void glMapBufferARB(BufferTargetARB target, BufferAccessARB access)
        {
            _glMapBufferARB(target, access);
        }
        
        public static unsafe delegate*<BufferTargetARB, BufferAccessARB, void> _glMapBufferOES;
        
        public static unsafe void glMapBufferOES(BufferTargetARB target, BufferAccessARB access)
        {
            _glMapBufferOES(target, access);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, long, uint, void> _glMapBufferRange;
        
        public static unsafe void glMapBufferRange(BufferTargetARB target, long offset, long length, uint access)
        {
            _glMapBufferRange(target, offset, length, access);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, long, uint, void> _glMapBufferRangeEXT;
        
        public static unsafe void glMapBufferRangeEXT(BufferTargetARB target, long offset, long length, uint access)
        {
            _glMapBufferRangeEXT(target, offset, length, access);
        }
        
        public static unsafe delegate*<EvalTargetNV, uint, MapTypeNV, int, int, int, int, byte, IntPtr, void> _glMapControlPointsNV;
        
        public static unsafe void glMapControlPointsNV(EvalTargetNV target, uint index, MapTypeNV type, int ustride, int vstride, int uorder, int vorder, byte packed, IntPtr points)
        {
            _glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, (IntPtr)points);
        }
        
        public static unsafe delegate*<int, double, double, void> _glMapGrid1d;
        
        public static unsafe void glMapGrid1d(int un, double u1, double u2)
        {
            _glMapGrid1d(un, u1, u2);
        }
        
        public static unsafe delegate*<int, float, float, void> _glMapGrid1f;
        
        public static unsafe void glMapGrid1f(int un, float u1, float u2)
        {
            _glMapGrid1f(un, u1, u2);
        }
        
        public static unsafe delegate*<int, int, int, void> _glMapGrid1xOES;
        
        public static unsafe void glMapGrid1xOES(int n, int u1, int u2)
        {
            _glMapGrid1xOES(n, u1, u2);
        }
        
        public static unsafe delegate*<int, double, double, int, double, double, void> _glMapGrid2d;
        
        public static unsafe void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2)
        {
            _glMapGrid2d(un, u1, u2, vn, v1, v2);
        }
        
        public static unsafe delegate*<int, float, float, int, float, float, void> _glMapGrid2f;
        
        public static unsafe void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2)
        {
            _glMapGrid2f(un, u1, u2, vn, v1, v2);
        }
        
        public static unsafe delegate*<int, int, int, int, int, void> _glMapGrid2xOES;
        
        public static unsafe void glMapGrid2xOES(int n, int u1, int u2, int v1, int v2)
        {
            _glMapGrid2xOES(n, u1, u2, v1, v2);
        }
        
        public static unsafe delegate*<uint, BufferAccessARB, void> _glMapNamedBuffer;
        
        public static unsafe void glMapNamedBuffer(uint buffer, BufferAccessARB access)
        {
            _glMapNamedBuffer(buffer, access);
        }
        
        public static unsafe delegate*<uint, BufferAccessARB, void> _glMapNamedBufferEXT;
        
        public static unsafe void glMapNamedBufferEXT(uint buffer, BufferAccessARB access)
        {
            _glMapNamedBufferEXT(buffer, access);
        }
        
        public static unsafe delegate*<uint, long, long, uint, void> _glMapNamedBufferRange;
        
        public static unsafe void glMapNamedBufferRange(uint buffer, long offset, long length, uint access)
        {
            _glMapNamedBufferRange(buffer, offset, length, access);
        }
        
        public static unsafe delegate*<uint, long, long, uint, void> _glMapNamedBufferRangeEXT;
        
        public static unsafe void glMapNamedBufferRangeEXT(uint buffer, long offset, long length, uint access)
        {
            _glMapNamedBufferRangeEXT(buffer, offset, length, access);
        }
        
        public static unsafe delegate*<uint, void> _glMapObjectBufferATI;
        
        public static unsafe void glMapObjectBufferATI(uint buffer)
        {
            _glMapObjectBufferATI(buffer);
        }
        
        public static unsafe delegate*<EvalTargetNV, MapParameterNV, IntPtr, void> _glMapParameterfvNV;
        
        public static unsafe void glMapParameterfvNV(EvalTargetNV target, MapParameterNV pname, ref float @params)
        {
            _glMapParameterfvNV(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<EvalTargetNV, MapParameterNV, IntPtr, void> _glMapParameterivNV;
        
        public static unsafe void glMapParameterivNV(EvalTargetNV target, MapParameterNV pname, ref int @params)
        {
            _glMapParameterivNV(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, uint, IntPtr, IntPtr, void> _glMapTexture2DINTEL;
        
        public static unsafe void glMapTexture2DINTEL(uint texture, int level, uint access, ref int stride, ref uint layout)
        {
            _glMapTexture2DINTEL(texture, level, access, (IntPtr)stride, (IntPtr)layout);
        }
        
        public static unsafe delegate*<uint, uint, double, double, int, int, IntPtr, void> _glMapVertexAttrib1dAPPLE;
        
        public static unsafe void glMapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, ref double points)
        {
            _glMapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, (IntPtr)points);
        }
        
        public static unsafe delegate*<uint, uint, float, float, int, int, IntPtr, void> _glMapVertexAttrib1fAPPLE;
        
        public static unsafe void glMapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, ref float points)
        {
            _glMapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, (IntPtr)points);
        }
        
        public static unsafe delegate*<uint, uint, double, double, int, int, double, double, int, int, IntPtr, void> _glMapVertexAttrib2dAPPLE;
        
        public static unsafe void glMapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points)
        {
            _glMapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, (IntPtr)points);
        }
        
        public static unsafe delegate*<uint, uint, float, float, int, int, float, float, int, int, IntPtr, void> _glMapVertexAttrib2fAPPLE;
        
        public static unsafe void glMapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points)
        {
            _glMapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, (IntPtr)points);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, float, void> _glMaterialf;
        
        public static unsafe void glMaterialf(MaterialFace face, MaterialParameter pname, float param)
        {
            _glMaterialf(face, pname, param);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glMaterialfv;
        
        public static unsafe void glMaterialfv(MaterialFace face, MaterialParameter pname, ref float @params)
        {
            _glMaterialfv(face, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, int, void> _glMateriali;
        
        public static unsafe void glMateriali(MaterialFace face, MaterialParameter pname, int param)
        {
            _glMateriali(face, pname, param);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glMaterialiv;
        
        public static unsafe void glMaterialiv(MaterialFace face, MaterialParameter pname, ref int @params)
        {
            _glMaterialiv(face, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, int, void> _glMaterialx;
        
        public static unsafe void glMaterialx(MaterialFace face, MaterialParameter pname, int param)
        {
            _glMaterialx(face, pname, param);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, int, void> _glMaterialxOES;
        
        public static unsafe void glMaterialxOES(MaterialFace face, MaterialParameter pname, int param)
        {
            _glMaterialxOES(face, pname, param);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glMaterialxv;
        
        public static unsafe void glMaterialxv(MaterialFace face, MaterialParameter pname, ref int param)
        {
            _glMaterialxv(face, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glMaterialxvOES;
        
        public static unsafe void glMaterialxvOES(MaterialFace face, MaterialParameter pname, ref int param)
        {
            _glMaterialxvOES(face, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<MatrixMode, double, double, double, double, double, double, void> _glMatrixFrustumEXT;
        
        public static unsafe void glMatrixFrustumEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar)
        {
            _glMatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar);
        }
        
        public static unsafe delegate*<int, MatrixIndexPointerTypeARB, int, IntPtr, void> _glMatrixIndexPointerARB;
        
        public static unsafe void glMatrixIndexPointerARB(int size, MatrixIndexPointerTypeARB type, int stride, IntPtr pointer)
        {
            _glMatrixIndexPointerARB(size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, MatrixIndexPointerTypeARB, int, IntPtr, void> _glMatrixIndexPointerOES;
        
        public static unsafe void glMatrixIndexPointerOES(int size, MatrixIndexPointerTypeARB type, int stride, IntPtr pointer)
        {
            _glMatrixIndexPointerOES(size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glMatrixIndexubvARB;
        
        public static unsafe void glMatrixIndexubvARB(int size, ref byte indices)
        {
            _glMatrixIndexubvARB(size, (IntPtr)indices);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glMatrixIndexuivARB;
        
        public static unsafe void glMatrixIndexuivARB(int size, ref uint indices)
        {
            _glMatrixIndexuivARB(size, (IntPtr)indices);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glMatrixIndexusvARB;
        
        public static unsafe void glMatrixIndexusvARB(int size, ref ushort indices)
        {
            _glMatrixIndexusvARB(size, (IntPtr)indices);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glMatrixLoad3x2fNV;
        
        public static unsafe void glMatrixLoad3x2fNV(uint matrixMode, ref float m)
        {
            _glMatrixLoad3x2fNV(matrixMode, (IntPtr)m);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glMatrixLoad3x3fNV;
        
        public static unsafe void glMatrixLoad3x3fNV(uint matrixMode, ref float m)
        {
            _glMatrixLoad3x3fNV(matrixMode, (IntPtr)m);
        }
        
        public static unsafe delegate*<MatrixMode, void> _glMatrixLoadIdentityEXT;
        
        public static unsafe void glMatrixLoadIdentityEXT(MatrixMode mode)
        {
            _glMatrixLoadIdentityEXT(mode);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glMatrixLoadTranspose3x3fNV;
        
        public static unsafe void glMatrixLoadTranspose3x3fNV(uint matrixMode, ref float m)
        {
            _glMatrixLoadTranspose3x3fNV(matrixMode, (IntPtr)m);
        }
        
        public static unsafe delegate*<MatrixMode, IntPtr, void> _glMatrixLoadTransposedEXT;
        
        public static unsafe void glMatrixLoadTransposedEXT(MatrixMode mode, ref double m)
        {
            _glMatrixLoadTransposedEXT(mode, (IntPtr)m);
        }
        
        public static unsafe delegate*<MatrixMode, IntPtr, void> _glMatrixLoadTransposefEXT;
        
        public static unsafe void glMatrixLoadTransposefEXT(MatrixMode mode, ref float m)
        {
            _glMatrixLoadTransposefEXT(mode, (IntPtr)m);
        }
        
        public static unsafe delegate*<MatrixMode, IntPtr, void> _glMatrixLoaddEXT;
        
        public static unsafe void glMatrixLoaddEXT(MatrixMode mode, ref double m)
        {
            _glMatrixLoaddEXT(mode, (IntPtr)m);
        }
        
        public static unsafe delegate*<MatrixMode, IntPtr, void> _glMatrixLoadfEXT;
        
        public static unsafe void glMatrixLoadfEXT(MatrixMode mode, ref float m)
        {
            _glMatrixLoadfEXT(mode, (IntPtr)m);
        }
        
        public static unsafe delegate*<MatrixMode, void> _glMatrixMode;
        
        public static unsafe void glMatrixMode(MatrixMode mode)
        {
            _glMatrixMode(mode);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glMatrixMult3x2fNV;
        
        public static unsafe void glMatrixMult3x2fNV(uint matrixMode, ref float m)
        {
            _glMatrixMult3x2fNV(matrixMode, (IntPtr)m);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glMatrixMult3x3fNV;
        
        public static unsafe void glMatrixMult3x3fNV(uint matrixMode, ref float m)
        {
            _glMatrixMult3x3fNV(matrixMode, (IntPtr)m);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glMatrixMultTranspose3x3fNV;
        
        public static unsafe void glMatrixMultTranspose3x3fNV(uint matrixMode, ref float m)
        {
            _glMatrixMultTranspose3x3fNV(matrixMode, (IntPtr)m);
        }
        
        public static unsafe delegate*<MatrixMode, IntPtr, void> _glMatrixMultTransposedEXT;
        
        public static unsafe void glMatrixMultTransposedEXT(MatrixMode mode, ref double m)
        {
            _glMatrixMultTransposedEXT(mode, (IntPtr)m);
        }
        
        public static unsafe delegate*<MatrixMode, IntPtr, void> _glMatrixMultTransposefEXT;
        
        public static unsafe void glMatrixMultTransposefEXT(MatrixMode mode, ref float m)
        {
            _glMatrixMultTransposefEXT(mode, (IntPtr)m);
        }
        
        public static unsafe delegate*<MatrixMode, IntPtr, void> _glMatrixMultdEXT;
        
        public static unsafe void glMatrixMultdEXT(MatrixMode mode, ref double m)
        {
            _glMatrixMultdEXT(mode, (IntPtr)m);
        }
        
        public static unsafe delegate*<MatrixMode, IntPtr, void> _glMatrixMultfEXT;
        
        public static unsafe void glMatrixMultfEXT(MatrixMode mode, ref float m)
        {
            _glMatrixMultfEXT(mode, (IntPtr)m);
        }
        
        public static unsafe delegate*<MatrixMode, double, double, double, double, double, double, void> _glMatrixOrthoEXT;
        
        public static unsafe void glMatrixOrthoEXT(MatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar)
        {
            _glMatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar);
        }
        
        public static unsafe delegate*<MatrixMode, void> _glMatrixPopEXT;
        
        public static unsafe void glMatrixPopEXT(MatrixMode mode)
        {
            _glMatrixPopEXT(mode);
        }
        
        public static unsafe delegate*<MatrixMode, void> _glMatrixPushEXT;
        
        public static unsafe void glMatrixPushEXT(MatrixMode mode)
        {
            _glMatrixPushEXT(mode);
        }
        
        public static unsafe delegate*<MatrixMode, double, double, double, double, void> _glMatrixRotatedEXT;
        
        public static unsafe void glMatrixRotatedEXT(MatrixMode mode, double angle, double x, double y, double z)
        {
            _glMatrixRotatedEXT(mode, angle, x, y, z);
        }
        
        public static unsafe delegate*<MatrixMode, float, float, float, float, void> _glMatrixRotatefEXT;
        
        public static unsafe void glMatrixRotatefEXT(MatrixMode mode, float angle, float x, float y, float z)
        {
            _glMatrixRotatefEXT(mode, angle, x, y, z);
        }
        
        public static unsafe delegate*<MatrixMode, double, double, double, void> _glMatrixScaledEXT;
        
        public static unsafe void glMatrixScaledEXT(MatrixMode mode, double x, double y, double z)
        {
            _glMatrixScaledEXT(mode, x, y, z);
        }
        
        public static unsafe delegate*<MatrixMode, float, float, float, void> _glMatrixScalefEXT;
        
        public static unsafe void glMatrixScalefEXT(MatrixMode mode, float x, float y, float z)
        {
            _glMatrixScalefEXT(mode, x, y, z);
        }
        
        public static unsafe delegate*<MatrixMode, double, double, double, void> _glMatrixTranslatedEXT;
        
        public static unsafe void glMatrixTranslatedEXT(MatrixMode mode, double x, double y, double z)
        {
            _glMatrixTranslatedEXT(mode, x, y, z);
        }
        
        public static unsafe delegate*<MatrixMode, float, float, float, void> _glMatrixTranslatefEXT;
        
        public static unsafe void glMatrixTranslatefEXT(MatrixMode mode, float x, float y, float z)
        {
            _glMatrixTranslatefEXT(mode, x, y, z);
        }
        
        public static unsafe delegate*<uint, void> _glMaxShaderCompilerThreadsKHR;
        
        public static unsafe void glMaxShaderCompilerThreadsKHR(uint count)
        {
            _glMaxShaderCompilerThreadsKHR(count);
        }
        
        public static unsafe delegate*<uint, void> _glMaxShaderCompilerThreadsARB;
        
        public static unsafe void glMaxShaderCompilerThreadsARB(uint count)
        {
            _glMaxShaderCompilerThreadsARB(count);
        }
        
        public static unsafe delegate*<uint, void> _glMemoryBarrier;
        
        public static unsafe void glMemoryBarrier(uint barriers)
        {
            _glMemoryBarrier(barriers);
        }
        
        public static unsafe delegate*<uint, void> _glMemoryBarrierByRegion;
        
        public static unsafe void glMemoryBarrierByRegion(uint barriers)
        {
            _glMemoryBarrierByRegion(barriers);
        }
        
        public static unsafe delegate*<uint, void> _glMemoryBarrierEXT;
        
        public static unsafe void glMemoryBarrierEXT(uint barriers)
        {
            _glMemoryBarrierEXT(barriers);
        }
        
        public static unsafe delegate*<uint, MemoryObjectParameterName, IntPtr, void> _glMemoryObjectParameterivEXT;
        
        public static unsafe void glMemoryObjectParameterivEXT(uint memoryObject, MemoryObjectParameterName pname, ref int @params)
        {
            _glMemoryObjectParameterivEXT(memoryObject, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<float, void> _glMinSampleShading;
        
        public static unsafe void glMinSampleShading(float value)
        {
            _glMinSampleShading(value);
        }
        
        public static unsafe delegate*<float, void> _glMinSampleShadingARB;
        
        public static unsafe void glMinSampleShadingARB(float value)
        {
            _glMinSampleShadingARB(value);
        }
        
        public static unsafe delegate*<float, void> _glMinSampleShadingOES;
        
        public static unsafe void glMinSampleShadingOES(float value)
        {
            _glMinSampleShadingOES(value);
        }
        
        public static unsafe delegate*<MinmaxTargetEXT, InternalFormat, byte, void> _glMinmax;
        
        public static unsafe void glMinmax(MinmaxTargetEXT target, InternalFormat internalformat, byte sink)
        {
            _glMinmax(target, internalformat, sink);
        }
        
        public static unsafe delegate*<MinmaxTargetEXT, InternalFormat, byte, void> _glMinmaxEXT;
        
        public static unsafe void glMinmaxEXT(MinmaxTargetEXT target, InternalFormat internalformat, byte sink)
        {
            _glMinmaxEXT(target, internalformat, sink);
        }
        
        public static unsafe delegate*<IntPtr, void> _glMultMatrixd;
        
        public static unsafe void glMultMatrixd(ref double m)
        {
            _glMultMatrixd((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glMultMatrixf;
        
        public static unsafe void glMultMatrixf(ref float m)
        {
            _glMultMatrixf((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glMultMatrixx;
        
        public static unsafe void glMultMatrixx(ref int m)
        {
            _glMultMatrixx((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glMultMatrixxOES;
        
        public static unsafe void glMultMatrixxOES(ref int m)
        {
            _glMultMatrixxOES((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glMultTransposeMatrixd;
        
        public static unsafe void glMultTransposeMatrixd(ref double m)
        {
            _glMultTransposeMatrixd((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glMultTransposeMatrixdARB;
        
        public static unsafe void glMultTransposeMatrixdARB(ref double m)
        {
            _glMultTransposeMatrixdARB((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glMultTransposeMatrixf;
        
        public static unsafe void glMultTransposeMatrixf(ref float m)
        {
            _glMultTransposeMatrixf((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glMultTransposeMatrixfARB;
        
        public static unsafe void glMultTransposeMatrixfARB(ref float m)
        {
            _glMultTransposeMatrixfARB((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glMultTransposeMatrixxOES;
        
        public static unsafe void glMultTransposeMatrixxOES(ref int m)
        {
            _glMultTransposeMatrixxOES((IntPtr)m);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, IntPtr, int, void> _glMultiDrawArrays;
        
        public static unsafe void glMultiDrawArrays(PrimitiveType mode, ref int first, ref int count, int drawcount)
        {
            _glMultiDrawArrays(mode, (IntPtr)first, (IntPtr)count, drawcount);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, IntPtr, int, void> _glMultiDrawArraysEXT;
        
        public static unsafe void glMultiDrawArraysEXT(PrimitiveType mode, ref int first, ref int count, int primcount)
        {
            _glMultiDrawArraysEXT(mode, (IntPtr)first, (IntPtr)count, primcount);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, int, int, void> _glMultiDrawArraysIndirect;
        
        public static unsafe void glMultiDrawArraysIndirect(PrimitiveType mode, IntPtr indirect, int drawcount, int stride)
        {
            _glMultiDrawArraysIndirect(mode, (IntPtr)indirect, drawcount, stride);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, int, int, void> _glMultiDrawArraysIndirectAMD;
        
        public static unsafe void glMultiDrawArraysIndirectAMD(PrimitiveType mode, IntPtr indirect, int primcount, int stride)
        {
            _glMultiDrawArraysIndirectAMD(mode, (IntPtr)indirect, primcount, stride);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, int, int, int, int, void> _glMultiDrawArraysIndirectBindlessCountNV;
        
        public static unsafe void glMultiDrawArraysIndirectBindlessCountNV(PrimitiveType mode, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
        {
            _glMultiDrawArraysIndirectBindlessCountNV(mode, (IntPtr)indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, int, int, int, void> _glMultiDrawArraysIndirectBindlessNV;
        
        public static unsafe void glMultiDrawArraysIndirectBindlessNV(PrimitiveType mode, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
        {
            _glMultiDrawArraysIndirectBindlessNV(mode, (IntPtr)indirect, drawCount, stride, vertexBufferCount);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, long, int, int, void> _glMultiDrawArraysIndirectCount;
        
        public static unsafe void glMultiDrawArraysIndirectCount(PrimitiveType mode, IntPtr indirect, long drawcount, int maxdrawcount, int stride)
        {
            _glMultiDrawArraysIndirectCount(mode, (IntPtr)indirect, drawcount, maxdrawcount, stride);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, long, int, int, void> _glMultiDrawArraysIndirectCountARB;
        
        public static unsafe void glMultiDrawArraysIndirectCountARB(PrimitiveType mode, IntPtr indirect, long drawcount, int maxdrawcount, int stride)
        {
            _glMultiDrawArraysIndirectCountARB(mode, (IntPtr)indirect, drawcount, maxdrawcount, stride);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, int, int, void> _glMultiDrawArraysIndirectEXT;
        
        public static unsafe void glMultiDrawArraysIndirectEXT(PrimitiveType mode, IntPtr indirect, int drawcount, int stride)
        {
            _glMultiDrawArraysIndirectEXT(mode, (IntPtr)indirect, drawcount, stride);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, IntPtr, int, void> _glMultiDrawElementArrayAPPLE;
        
        public static unsafe void glMultiDrawElementArrayAPPLE(PrimitiveType mode, ref int first, ref int count, int primcount)
        {
            _glMultiDrawElementArrayAPPLE(mode, (IntPtr)first, (IntPtr)count, primcount);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, DrawElementsType, IntPtr, int, void> _glMultiDrawElements;
        
        public static unsafe void glMultiDrawElements(PrimitiveType mode, ref int count, DrawElementsType type, out IntPtr indices, int drawcount)
        {
            _glMultiDrawElements(mode, (IntPtr)count, type, (IntPtr)indices, drawcount);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, DrawElementsType, IntPtr, int, IntPtr, void> _glMultiDrawElementsBaseVertex;
        
        public static unsafe void glMultiDrawElementsBaseVertex(PrimitiveType mode, ref int count, DrawElementsType type, out IntPtr indices, int drawcount, ref int basevertex)
        {
            _glMultiDrawElementsBaseVertex(mode, (IntPtr)count, type, (IntPtr)indices, drawcount, (IntPtr)basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, DrawElementsType, IntPtr, int, IntPtr, void> _glMultiDrawElementsBaseVertexEXT;
        
        public static unsafe void glMultiDrawElementsBaseVertexEXT(PrimitiveType mode, ref int count, DrawElementsType type, out IntPtr indices, int drawcount, ref int basevertex)
        {
            _glMultiDrawElementsBaseVertexEXT(mode, (IntPtr)count, type, (IntPtr)indices, drawcount, (IntPtr)basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, DrawElementsType, IntPtr, int, void> _glMultiDrawElementsEXT;
        
        public static unsafe void glMultiDrawElementsEXT(PrimitiveType mode, ref int count, DrawElementsType type, out IntPtr indices, int primcount)
        {
            _glMultiDrawElementsEXT(mode, (IntPtr)count, type, (IntPtr)indices, primcount);
        }
        
        public static unsafe delegate*<PrimitiveType, DrawElementsType, IntPtr, int, int, void> _glMultiDrawElementsIndirect;
        
        public static unsafe void glMultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawcount, int stride)
        {
            _glMultiDrawElementsIndirect(mode, type, (IntPtr)indirect, drawcount, stride);
        }
        
        public static unsafe delegate*<PrimitiveType, DrawElementsType, IntPtr, int, int, void> _glMultiDrawElementsIndirectAMD;
        
        public static unsafe void glMultiDrawElementsIndirectAMD(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int primcount, int stride)
        {
            _glMultiDrawElementsIndirectAMD(mode, type, (IntPtr)indirect, primcount, stride);
        }
        
        public static unsafe delegate*<PrimitiveType, DrawElementsType, IntPtr, int, int, int, int, void> _glMultiDrawElementsIndirectBindlessCountNV;
        
        public static unsafe void glMultiDrawElementsIndirectBindlessCountNV(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawCount, int maxDrawCount, int stride, int vertexBufferCount)
        {
            _glMultiDrawElementsIndirectBindlessCountNV(mode, type, (IntPtr)indirect, drawCount, maxDrawCount, stride, vertexBufferCount);
        }
        
        public static unsafe delegate*<PrimitiveType, DrawElementsType, IntPtr, int, int, int, void> _glMultiDrawElementsIndirectBindlessNV;
        
        public static unsafe void glMultiDrawElementsIndirectBindlessNV(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawCount, int stride, int vertexBufferCount)
        {
            _glMultiDrawElementsIndirectBindlessNV(mode, type, (IntPtr)indirect, drawCount, stride, vertexBufferCount);
        }
        
        public static unsafe delegate*<PrimitiveType, DrawElementsType, IntPtr, long, int, int, void> _glMultiDrawElementsIndirectCount;
        
        public static unsafe void glMultiDrawElementsIndirectCount(PrimitiveType mode, DrawElementsType type, IntPtr indirect, long drawcount, int maxdrawcount, int stride)
        {
            _glMultiDrawElementsIndirectCount(mode, type, (IntPtr)indirect, drawcount, maxdrawcount, stride);
        }
        
        public static unsafe delegate*<PrimitiveType, DrawElementsType, IntPtr, long, int, int, void> _glMultiDrawElementsIndirectCountARB;
        
        public static unsafe void glMultiDrawElementsIndirectCountARB(PrimitiveType mode, DrawElementsType type, IntPtr indirect, long drawcount, int maxdrawcount, int stride)
        {
            _glMultiDrawElementsIndirectCountARB(mode, type, (IntPtr)indirect, drawcount, maxdrawcount, stride);
        }
        
        public static unsafe delegate*<PrimitiveType, DrawElementsType, IntPtr, int, int, void> _glMultiDrawElementsIndirectEXT;
        
        public static unsafe void glMultiDrawElementsIndirectEXT(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawcount, int stride)
        {
            _glMultiDrawElementsIndirectEXT(mode, type, (IntPtr)indirect, drawcount, stride);
        }
        
        public static unsafe delegate*<long, int, int, void> _glMultiDrawMeshTasksIndirectNV;
        
        public static unsafe void glMultiDrawMeshTasksIndirectNV(long indirect, int drawcount, int stride)
        {
            _glMultiDrawMeshTasksIndirectNV(indirect, drawcount, stride);
        }
        
        public static unsafe delegate*<long, long, int, int, void> _glMultiDrawMeshTasksIndirectCountNV;
        
        public static unsafe void glMultiDrawMeshTasksIndirectCountNV(long indirect, long drawcount, int maxdrawcount, int stride)
        {
            _glMultiDrawMeshTasksIndirectCountNV(indirect, drawcount, maxdrawcount, stride);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, uint, IntPtr, IntPtr, int, void> _glMultiDrawRangeElementArrayAPPLE;
        
        public static unsafe void glMultiDrawRangeElementArrayAPPLE(PrimitiveType mode, uint start, uint end, ref int first, ref int count, int primcount)
        {
            _glMultiDrawRangeElementArrayAPPLE(mode, start, end, (IntPtr)first, (IntPtr)count, primcount);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, int, int, void> _glMultiModeDrawArraysIBM;
        
        public static unsafe void glMultiModeDrawArraysIBM(ref PrimitiveType mode, ref int first, ref int count, int primcount, int modestride)
        {
            _glMultiModeDrawArraysIBM((IntPtr)mode, (IntPtr)first, (IntPtr)count, primcount, modestride);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, DrawElementsType, IntPtr, int, int, void> _glMultiModeDrawElementsIBM;
        
        public static unsafe void glMultiModeDrawElementsIBM(ref PrimitiveType mode, ref int count, DrawElementsType type, out IntPtr indices, int primcount, int modestride)
        {
            _glMultiModeDrawElementsIBM((IntPtr)mode, (IntPtr)count, type, (IntPtr)indices, primcount, modestride);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, InternalFormat, uint, void> _glMultiTexBufferEXT;
        
        public static unsafe void glMultiTexBufferEXT(TextureUnit texunit, TextureTarget target, InternalFormat internalformat, uint buffer)
        {
            _glMultiTexBufferEXT(texunit, target, internalformat, buffer);
        }
        
        public static unsafe delegate*<TextureUnit, sbyte, void> _glMultiTexCoord1bOES;
        
        public static unsafe void glMultiTexCoord1bOES(TextureUnit texture, sbyte s)
        {
            _glMultiTexCoord1bOES(texture, s);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1bvOES;
        
        public static unsafe void glMultiTexCoord1bvOES(TextureUnit texture, ref sbyte coords)
        {
            _glMultiTexCoord1bvOES(texture, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, double, void> _glMultiTexCoord1d;
        
        public static unsafe void glMultiTexCoord1d(TextureUnit target, double s)
        {
            _glMultiTexCoord1d(target, s);
        }
        
        public static unsafe delegate*<TextureUnit, double, void> _glMultiTexCoord1dARB;
        
        public static unsafe void glMultiTexCoord1dARB(TextureUnit target, double s)
        {
            _glMultiTexCoord1dARB(target, s);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1dv;
        
        public static unsafe void glMultiTexCoord1dv(TextureUnit target, ref double v)
        {
            _glMultiTexCoord1dv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1dvARB;
        
        public static unsafe void glMultiTexCoord1dvARB(TextureUnit target, ref double v)
        {
            _glMultiTexCoord1dvARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, float, void> _glMultiTexCoord1f;
        
        public static unsafe void glMultiTexCoord1f(TextureUnit target, float s)
        {
            _glMultiTexCoord1f(target, s);
        }
        
        public static unsafe delegate*<TextureUnit, float, void> _glMultiTexCoord1fARB;
        
        public static unsafe void glMultiTexCoord1fARB(TextureUnit target, float s)
        {
            _glMultiTexCoord1fARB(target, s);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1fv;
        
        public static unsafe void glMultiTexCoord1fv(TextureUnit target, ref float v)
        {
            _glMultiTexCoord1fv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1fvARB;
        
        public static unsafe void glMultiTexCoord1fvARB(TextureUnit target, ref float v)
        {
            _glMultiTexCoord1fvARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, ushort, void> _glMultiTexCoord1hNV;
        
        public static unsafe void glMultiTexCoord1hNV(TextureUnit target, ushort s)
        {
            _glMultiTexCoord1hNV(target, s);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1hvNV;
        
        public static unsafe void glMultiTexCoord1hvNV(TextureUnit target, ref ushort v)
        {
            _glMultiTexCoord1hvNV(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, int, void> _glMultiTexCoord1i;
        
        public static unsafe void glMultiTexCoord1i(TextureUnit target, int s)
        {
            _glMultiTexCoord1i(target, s);
        }
        
        public static unsafe delegate*<TextureUnit, int, void> _glMultiTexCoord1iARB;
        
        public static unsafe void glMultiTexCoord1iARB(TextureUnit target, int s)
        {
            _glMultiTexCoord1iARB(target, s);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1iv;
        
        public static unsafe void glMultiTexCoord1iv(TextureUnit target, ref int v)
        {
            _glMultiTexCoord1iv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1ivARB;
        
        public static unsafe void glMultiTexCoord1ivARB(TextureUnit target, ref int v)
        {
            _glMultiTexCoord1ivARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, short, void> _glMultiTexCoord1s;
        
        public static unsafe void glMultiTexCoord1s(TextureUnit target, short s)
        {
            _glMultiTexCoord1s(target, s);
        }
        
        public static unsafe delegate*<TextureUnit, short, void> _glMultiTexCoord1sARB;
        
        public static unsafe void glMultiTexCoord1sARB(TextureUnit target, short s)
        {
            _glMultiTexCoord1sARB(target, s);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1sv;
        
        public static unsafe void glMultiTexCoord1sv(TextureUnit target, ref short v)
        {
            _glMultiTexCoord1sv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1svARB;
        
        public static unsafe void glMultiTexCoord1svARB(TextureUnit target, ref short v)
        {
            _glMultiTexCoord1svARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, int, void> _glMultiTexCoord1xOES;
        
        public static unsafe void glMultiTexCoord1xOES(TextureUnit texture, int s)
        {
            _glMultiTexCoord1xOES(texture, s);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1xvOES;
        
        public static unsafe void glMultiTexCoord1xvOES(TextureUnit texture, ref int coords)
        {
            _glMultiTexCoord1xvOES(texture, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, sbyte, sbyte, void> _glMultiTexCoord2bOES;
        
        public static unsafe void glMultiTexCoord2bOES(TextureUnit texture, sbyte s, sbyte t)
        {
            _glMultiTexCoord2bOES(texture, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2bvOES;
        
        public static unsafe void glMultiTexCoord2bvOES(TextureUnit texture, ref sbyte coords)
        {
            _glMultiTexCoord2bvOES(texture, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, double, double, void> _glMultiTexCoord2d;
        
        public static unsafe void glMultiTexCoord2d(TextureUnit target, double s, double t)
        {
            _glMultiTexCoord2d(target, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, double, double, void> _glMultiTexCoord2dARB;
        
        public static unsafe void glMultiTexCoord2dARB(TextureUnit target, double s, double t)
        {
            _glMultiTexCoord2dARB(target, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2dv;
        
        public static unsafe void glMultiTexCoord2dv(TextureUnit target, ref double v)
        {
            _glMultiTexCoord2dv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2dvARB;
        
        public static unsafe void glMultiTexCoord2dvARB(TextureUnit target, ref double v)
        {
            _glMultiTexCoord2dvARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, float, float, void> _glMultiTexCoord2f;
        
        public static unsafe void glMultiTexCoord2f(TextureUnit target, float s, float t)
        {
            _glMultiTexCoord2f(target, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, float, float, void> _glMultiTexCoord2fARB;
        
        public static unsafe void glMultiTexCoord2fARB(TextureUnit target, float s, float t)
        {
            _glMultiTexCoord2fARB(target, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2fv;
        
        public static unsafe void glMultiTexCoord2fv(TextureUnit target, ref float v)
        {
            _glMultiTexCoord2fv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2fvARB;
        
        public static unsafe void glMultiTexCoord2fvARB(TextureUnit target, ref float v)
        {
            _glMultiTexCoord2fvARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, ushort, ushort, void> _glMultiTexCoord2hNV;
        
        public static unsafe void glMultiTexCoord2hNV(TextureUnit target, ushort s, ushort t)
        {
            _glMultiTexCoord2hNV(target, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2hvNV;
        
        public static unsafe void glMultiTexCoord2hvNV(TextureUnit target, ref ushort v)
        {
            _glMultiTexCoord2hvNV(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, int, int, void> _glMultiTexCoord2i;
        
        public static unsafe void glMultiTexCoord2i(TextureUnit target, int s, int t)
        {
            _glMultiTexCoord2i(target, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, int, int, void> _glMultiTexCoord2iARB;
        
        public static unsafe void glMultiTexCoord2iARB(TextureUnit target, int s, int t)
        {
            _glMultiTexCoord2iARB(target, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2iv;
        
        public static unsafe void glMultiTexCoord2iv(TextureUnit target, ref int v)
        {
            _glMultiTexCoord2iv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2ivARB;
        
        public static unsafe void glMultiTexCoord2ivARB(TextureUnit target, ref int v)
        {
            _glMultiTexCoord2ivARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, short, short, void> _glMultiTexCoord2s;
        
        public static unsafe void glMultiTexCoord2s(TextureUnit target, short s, short t)
        {
            _glMultiTexCoord2s(target, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, short, short, void> _glMultiTexCoord2sARB;
        
        public static unsafe void glMultiTexCoord2sARB(TextureUnit target, short s, short t)
        {
            _glMultiTexCoord2sARB(target, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2sv;
        
        public static unsafe void glMultiTexCoord2sv(TextureUnit target, ref short v)
        {
            _glMultiTexCoord2sv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2svARB;
        
        public static unsafe void glMultiTexCoord2svARB(TextureUnit target, ref short v)
        {
            _glMultiTexCoord2svARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, int, int, void> _glMultiTexCoord2xOES;
        
        public static unsafe void glMultiTexCoord2xOES(TextureUnit texture, int s, int t)
        {
            _glMultiTexCoord2xOES(texture, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2xvOES;
        
        public static unsafe void glMultiTexCoord2xvOES(TextureUnit texture, ref int coords)
        {
            _glMultiTexCoord2xvOES(texture, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, sbyte, sbyte, sbyte, void> _glMultiTexCoord3bOES;
        
        public static unsafe void glMultiTexCoord3bOES(TextureUnit texture, sbyte s, sbyte t, sbyte r)
        {
            _glMultiTexCoord3bOES(texture, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3bvOES;
        
        public static unsafe void glMultiTexCoord3bvOES(TextureUnit texture, ref sbyte coords)
        {
            _glMultiTexCoord3bvOES(texture, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, double, double, double, void> _glMultiTexCoord3d;
        
        public static unsafe void glMultiTexCoord3d(TextureUnit target, double s, double t, double r)
        {
            _glMultiTexCoord3d(target, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, double, double, double, void> _glMultiTexCoord3dARB;
        
        public static unsafe void glMultiTexCoord3dARB(TextureUnit target, double s, double t, double r)
        {
            _glMultiTexCoord3dARB(target, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3dv;
        
        public static unsafe void glMultiTexCoord3dv(TextureUnit target, ref double v)
        {
            _glMultiTexCoord3dv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3dvARB;
        
        public static unsafe void glMultiTexCoord3dvARB(TextureUnit target, ref double v)
        {
            _glMultiTexCoord3dvARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, float, float, float, void> _glMultiTexCoord3f;
        
        public static unsafe void glMultiTexCoord3f(TextureUnit target, float s, float t, float r)
        {
            _glMultiTexCoord3f(target, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, float, float, float, void> _glMultiTexCoord3fARB;
        
        public static unsafe void glMultiTexCoord3fARB(TextureUnit target, float s, float t, float r)
        {
            _glMultiTexCoord3fARB(target, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3fv;
        
        public static unsafe void glMultiTexCoord3fv(TextureUnit target, ref float v)
        {
            _glMultiTexCoord3fv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3fvARB;
        
        public static unsafe void glMultiTexCoord3fvARB(TextureUnit target, ref float v)
        {
            _glMultiTexCoord3fvARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, ushort, ushort, ushort, void> _glMultiTexCoord3hNV;
        
        public static unsafe void glMultiTexCoord3hNV(TextureUnit target, ushort s, ushort t, ushort r)
        {
            _glMultiTexCoord3hNV(target, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3hvNV;
        
        public static unsafe void glMultiTexCoord3hvNV(TextureUnit target, ref ushort v)
        {
            _glMultiTexCoord3hvNV(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, int, int, int, void> _glMultiTexCoord3i;
        
        public static unsafe void glMultiTexCoord3i(TextureUnit target, int s, int t, int r)
        {
            _glMultiTexCoord3i(target, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, int, int, int, void> _glMultiTexCoord3iARB;
        
        public static unsafe void glMultiTexCoord3iARB(TextureUnit target, int s, int t, int r)
        {
            _glMultiTexCoord3iARB(target, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3iv;
        
        public static unsafe void glMultiTexCoord3iv(TextureUnit target, ref int v)
        {
            _glMultiTexCoord3iv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3ivARB;
        
        public static unsafe void glMultiTexCoord3ivARB(TextureUnit target, ref int v)
        {
            _glMultiTexCoord3ivARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, short, short, short, void> _glMultiTexCoord3s;
        
        public static unsafe void glMultiTexCoord3s(TextureUnit target, short s, short t, short r)
        {
            _glMultiTexCoord3s(target, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, short, short, short, void> _glMultiTexCoord3sARB;
        
        public static unsafe void glMultiTexCoord3sARB(TextureUnit target, short s, short t, short r)
        {
            _glMultiTexCoord3sARB(target, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3sv;
        
        public static unsafe void glMultiTexCoord3sv(TextureUnit target, ref short v)
        {
            _glMultiTexCoord3sv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3svARB;
        
        public static unsafe void glMultiTexCoord3svARB(TextureUnit target, ref short v)
        {
            _glMultiTexCoord3svARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, int, int, int, void> _glMultiTexCoord3xOES;
        
        public static unsafe void glMultiTexCoord3xOES(TextureUnit texture, int s, int t, int r)
        {
            _glMultiTexCoord3xOES(texture, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3xvOES;
        
        public static unsafe void glMultiTexCoord3xvOES(TextureUnit texture, ref int coords)
        {
            _glMultiTexCoord3xvOES(texture, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, sbyte, sbyte, sbyte, sbyte, void> _glMultiTexCoord4bOES;
        
        public static unsafe void glMultiTexCoord4bOES(TextureUnit texture, sbyte s, sbyte t, sbyte r, sbyte q)
        {
            _glMultiTexCoord4bOES(texture, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4bvOES;
        
        public static unsafe void glMultiTexCoord4bvOES(TextureUnit texture, ref sbyte coords)
        {
            _glMultiTexCoord4bvOES(texture, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, double, double, double, double, void> _glMultiTexCoord4d;
        
        public static unsafe void glMultiTexCoord4d(TextureUnit target, double s, double t, double r, double q)
        {
            _glMultiTexCoord4d(target, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, double, double, double, double, void> _glMultiTexCoord4dARB;
        
        public static unsafe void glMultiTexCoord4dARB(TextureUnit target, double s, double t, double r, double q)
        {
            _glMultiTexCoord4dARB(target, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4dv;
        
        public static unsafe void glMultiTexCoord4dv(TextureUnit target, ref double v)
        {
            _glMultiTexCoord4dv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4dvARB;
        
        public static unsafe void glMultiTexCoord4dvARB(TextureUnit target, ref double v)
        {
            _glMultiTexCoord4dvARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, float, float, float, float, void> _glMultiTexCoord4f;
        
        public static unsafe void glMultiTexCoord4f(TextureUnit target, float s, float t, float r, float q)
        {
            _glMultiTexCoord4f(target, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, float, float, float, float, void> _glMultiTexCoord4fARB;
        
        public static unsafe void glMultiTexCoord4fARB(TextureUnit target, float s, float t, float r, float q)
        {
            _glMultiTexCoord4fARB(target, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4fv;
        
        public static unsafe void glMultiTexCoord4fv(TextureUnit target, ref float v)
        {
            _glMultiTexCoord4fv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4fvARB;
        
        public static unsafe void glMultiTexCoord4fvARB(TextureUnit target, ref float v)
        {
            _glMultiTexCoord4fvARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, ushort, ushort, ushort, ushort, void> _glMultiTexCoord4hNV;
        
        public static unsafe void glMultiTexCoord4hNV(TextureUnit target, ushort s, ushort t, ushort r, ushort q)
        {
            _glMultiTexCoord4hNV(target, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4hvNV;
        
        public static unsafe void glMultiTexCoord4hvNV(TextureUnit target, ref ushort v)
        {
            _glMultiTexCoord4hvNV(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, int, int, int, int, void> _glMultiTexCoord4i;
        
        public static unsafe void glMultiTexCoord4i(TextureUnit target, int s, int t, int r, int q)
        {
            _glMultiTexCoord4i(target, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, int, int, int, int, void> _glMultiTexCoord4iARB;
        
        public static unsafe void glMultiTexCoord4iARB(TextureUnit target, int s, int t, int r, int q)
        {
            _glMultiTexCoord4iARB(target, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4iv;
        
        public static unsafe void glMultiTexCoord4iv(TextureUnit target, ref int v)
        {
            _glMultiTexCoord4iv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4ivARB;
        
        public static unsafe void glMultiTexCoord4ivARB(TextureUnit target, ref int v)
        {
            _glMultiTexCoord4ivARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, short, short, short, short, void> _glMultiTexCoord4s;
        
        public static unsafe void glMultiTexCoord4s(TextureUnit target, short s, short t, short r, short q)
        {
            _glMultiTexCoord4s(target, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, short, short, short, short, void> _glMultiTexCoord4sARB;
        
        public static unsafe void glMultiTexCoord4sARB(TextureUnit target, short s, short t, short r, short q)
        {
            _glMultiTexCoord4sARB(target, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4sv;
        
        public static unsafe void glMultiTexCoord4sv(TextureUnit target, ref short v)
        {
            _glMultiTexCoord4sv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4svARB;
        
        public static unsafe void glMultiTexCoord4svARB(TextureUnit target, ref short v)
        {
            _glMultiTexCoord4svARB(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, int, int, int, int, void> _glMultiTexCoord4x;
        
        public static unsafe void glMultiTexCoord4x(TextureUnit texture, int s, int t, int r, int q)
        {
            _glMultiTexCoord4x(texture, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, int, int, int, int, void> _glMultiTexCoord4xOES;
        
        public static unsafe void glMultiTexCoord4xOES(TextureUnit texture, int s, int t, int r, int q)
        {
            _glMultiTexCoord4xOES(texture, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4xvOES;
        
        public static unsafe void glMultiTexCoord4xvOES(TextureUnit texture, ref int coords)
        {
            _glMultiTexCoord4xvOES(texture, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, uint, void> _glMultiTexCoordP1ui;
        
        public static unsafe void glMultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, uint coords)
        {
            _glMultiTexCoordP1ui(texture, type, coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, IntPtr, void> _glMultiTexCoordP1uiv;
        
        public static unsafe void glMultiTexCoordP1uiv(TextureUnit texture, TexCoordPointerType type, ref uint coords)
        {
            _glMultiTexCoordP1uiv(texture, type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, uint, void> _glMultiTexCoordP2ui;
        
        public static unsafe void glMultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, uint coords)
        {
            _glMultiTexCoordP2ui(texture, type, coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, IntPtr, void> _glMultiTexCoordP2uiv;
        
        public static unsafe void glMultiTexCoordP2uiv(TextureUnit texture, TexCoordPointerType type, ref uint coords)
        {
            _glMultiTexCoordP2uiv(texture, type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, uint, void> _glMultiTexCoordP3ui;
        
        public static unsafe void glMultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, uint coords)
        {
            _glMultiTexCoordP3ui(texture, type, coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, IntPtr, void> _glMultiTexCoordP3uiv;
        
        public static unsafe void glMultiTexCoordP3uiv(TextureUnit texture, TexCoordPointerType type, ref uint coords)
        {
            _glMultiTexCoordP3uiv(texture, type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, uint, void> _glMultiTexCoordP4ui;
        
        public static unsafe void glMultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, uint coords)
        {
            _glMultiTexCoordP4ui(texture, type, coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, IntPtr, void> _glMultiTexCoordP4uiv;
        
        public static unsafe void glMultiTexCoordP4uiv(TextureUnit texture, TexCoordPointerType type, ref uint coords)
        {
            _glMultiTexCoordP4uiv(texture, type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, int, TexCoordPointerType, int, IntPtr, void> _glMultiTexCoordPointerEXT;
        
        public static unsafe void glMultiTexCoordPointerEXT(TextureUnit texunit, int size, TexCoordPointerType type, int stride, IntPtr pointer)
        {
            _glMultiTexCoordPointerEXT(texunit, size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<TextureUnit, TextureEnvTarget, TextureEnvParameter, float, void> _glMultiTexEnvfEXT;
        
        public static unsafe void glMultiTexEnvfEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, float param)
        {
            _glMultiTexEnvfEXT(texunit, target, pname, param);
        }
        
        public static unsafe delegate*<TextureUnit, TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glMultiTexEnvfvEXT;
        
        public static unsafe void glMultiTexEnvfvEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ref float @params)
        {
            _glMultiTexEnvfvEXT(texunit, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureEnvTarget, TextureEnvParameter, int, void> _glMultiTexEnviEXT;
        
        public static unsafe void glMultiTexEnviEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, int param)
        {
            _glMultiTexEnviEXT(texunit, target, pname, param);
        }
        
        public static unsafe delegate*<TextureUnit, TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glMultiTexEnvivEXT;
        
        public static unsafe void glMultiTexEnvivEXT(TextureUnit texunit, TextureEnvTarget target, TextureEnvParameter pname, ref int @params)
        {
            _glMultiTexEnvivEXT(texunit, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureCoordName, TextureGenParameter, double, void> _glMultiTexGendEXT;
        
        public static unsafe void glMultiTexGendEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, double param)
        {
            _glMultiTexGendEXT(texunit, coord, pname, param);
        }
        
        public static unsafe delegate*<TextureUnit, TextureCoordName, TextureGenParameter, IntPtr, void> _glMultiTexGendvEXT;
        
        public static unsafe void glMultiTexGendvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref double @params)
        {
            _glMultiTexGendvEXT(texunit, coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureCoordName, TextureGenParameter, float, void> _glMultiTexGenfEXT;
        
        public static unsafe void glMultiTexGenfEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, float param)
        {
            _glMultiTexGenfEXT(texunit, coord, pname, param);
        }
        
        public static unsafe delegate*<TextureUnit, TextureCoordName, TextureGenParameter, IntPtr, void> _glMultiTexGenfvEXT;
        
        public static unsafe void glMultiTexGenfvEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref float @params)
        {
            _glMultiTexGenfvEXT(texunit, coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureCoordName, TextureGenParameter, int, void> _glMultiTexGeniEXT;
        
        public static unsafe void glMultiTexGeniEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, int param)
        {
            _glMultiTexGeniEXT(texunit, coord, pname, param);
        }
        
        public static unsafe delegate*<TextureUnit, TextureCoordName, TextureGenParameter, IntPtr, void> _glMultiTexGenivEXT;
        
        public static unsafe void glMultiTexGenivEXT(TextureUnit texunit, TextureCoordName coord, TextureGenParameter pname, ref int @params)
        {
            _glMultiTexGenivEXT(texunit, coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glMultiTexImage1DEXT;
        
        public static unsafe void glMultiTexImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glMultiTexImage2DEXT;
        
        public static unsafe void glMultiTexImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glMultiTexImage3DEXT;
        
        public static unsafe void glMultiTexImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, TextureParameterName, IntPtr, void> _glMultiTexParameterIivEXT;
        
        public static unsafe void glMultiTexParameterIivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ref int @params)
        {
            _glMultiTexParameterIivEXT(texunit, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, TextureParameterName, IntPtr, void> _glMultiTexParameterIuivEXT;
        
        public static unsafe void glMultiTexParameterIuivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ref uint @params)
        {
            _glMultiTexParameterIuivEXT(texunit, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, TextureParameterName, float, void> _glMultiTexParameterfEXT;
        
        public static unsafe void glMultiTexParameterfEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, float param)
        {
            _glMultiTexParameterfEXT(texunit, target, pname, param);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, TextureParameterName, IntPtr, void> _glMultiTexParameterfvEXT;
        
        public static unsafe void glMultiTexParameterfvEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ref float @params)
        {
            _glMultiTexParameterfvEXT(texunit, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, TextureParameterName, int, void> _glMultiTexParameteriEXT;
        
        public static unsafe void glMultiTexParameteriEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, int param)
        {
            _glMultiTexParameteriEXT(texunit, target, pname, param);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, TextureParameterName, IntPtr, void> _glMultiTexParameterivEXT;
        
        public static unsafe void glMultiTexParameterivEXT(TextureUnit texunit, TextureTarget target, TextureParameterName pname, ref int @params)
        {
            _glMultiTexParameterivEXT(texunit, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, uint, void> _glMultiTexRenderbufferEXT;
        
        public static unsafe void glMultiTexRenderbufferEXT(TextureUnit texunit, TextureTarget target, uint renderbuffer)
        {
            _glMultiTexRenderbufferEXT(texunit, target, renderbuffer);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, int, int, PixelFormat, PixelType, IntPtr, void> _glMultiTexSubImage1DEXT;
        
        public static unsafe void glMultiTexSubImage1DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glMultiTexSubImage2DEXT;
        
        public static unsafe void glMultiTexSubImage2DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureUnit, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glMultiTexSubImage3DEXT;
        
        public static unsafe void glMultiTexSubImage3DEXT(TextureUnit texunit, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<void> _glMulticastBarrierNV;
        
        public static unsafe void glMulticastBarrierNV()
        {
            _glMulticastBarrierNV();
        }
        
        public static unsafe delegate*<uint, uint, int, int, int, int, int, int, int, int, uint, uint, void> _glMulticastBlitFramebufferNV;
        
        public static unsafe void glMulticastBlitFramebufferNV(uint srcGpu, uint dstGpu, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, uint filter)
        {
            _glMulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        public static unsafe delegate*<uint, uint, long, long, IntPtr, void> _glMulticastBufferSubDataNV;
        
        public static unsafe void glMulticastBufferSubDataNV(uint gpuMask, uint buffer, long offset, long size, IntPtr data)
        {
            _glMulticastBufferSubDataNV(gpuMask, buffer, offset, size, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, long, long, long, void> _glMulticastCopyBufferSubDataNV;
        
        public static unsafe void glMulticastCopyBufferSubDataNV(uint readGpu, uint writeGpuMask, uint readBuffer, uint writeBuffer, long readOffset, long writeOffset, long size)
        {
            _glMulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, int, int, int, int, uint, uint, int, int, int, int, int, int, int, void> _glMulticastCopyImageSubDataNV;
        
        public static unsafe void glMulticastCopyImageSubDataNV(uint srcGpu, uint dstGpuMask, uint srcName, uint srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, uint dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            _glMulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        public static unsafe delegate*<uint, uint, uint, int, IntPtr, void> _glMulticastFramebufferSampleLocationsfvNV;
        
        public static unsafe void glMulticastFramebufferSampleLocationsfvNV(uint gpu, uint framebuffer, uint start, int count, ref float v)
        {
            _glMulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glMulticastGetQueryObjecti64vNV;
        
        public static unsafe void glMulticastGetQueryObjecti64vNV(uint gpu, uint id, uint pname, ref long @params)
        {
            _glMulticastGetQueryObjecti64vNV(gpu, id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glMulticastGetQueryObjectivNV;
        
        public static unsafe void glMulticastGetQueryObjectivNV(uint gpu, uint id, uint pname, ref int @params)
        {
            _glMulticastGetQueryObjectivNV(gpu, id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glMulticastGetQueryObjectui64vNV;
        
        public static unsafe void glMulticastGetQueryObjectui64vNV(uint gpu, uint id, uint pname, ref ulong @params)
        {
            _glMulticastGetQueryObjectui64vNV(gpu, id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glMulticastGetQueryObjectuivNV;
        
        public static unsafe void glMulticastGetQueryObjectuivNV(uint gpu, uint id, uint pname, ref uint @params)
        {
            _glMulticastGetQueryObjectuivNV(gpu, id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, void> _glMulticastScissorArrayvNVX;
        
        public static unsafe void glMulticastScissorArrayvNVX(uint gpu, uint first, int count, ref int v)
        {
            _glMulticastScissorArrayvNVX(gpu, first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, void> _glMulticastViewportArrayvNVX;
        
        public static unsafe void glMulticastViewportArrayvNVX(uint gpu, uint first, int count, ref float v)
        {
            _glMulticastViewportArrayvNVX(gpu, first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, float, float, void> _glMulticastViewportPositionWScaleNVX;
        
        public static unsafe void glMulticastViewportPositionWScaleNVX(uint gpu, uint index, float xcoeff, float ycoeff)
        {
            _glMulticastViewportPositionWScaleNVX(gpu, index, xcoeff, ycoeff);
        }
        
        public static unsafe delegate*<uint, uint, void> _glMulticastWaitSyncNV;
        
        public static unsafe void glMulticastWaitSyncNV(uint signalGpu, uint waitGpuMask)
        {
            _glMulticastWaitSyncNV(signalGpu, waitGpuMask);
        }
        
        public static unsafe delegate*<uint, uint, ulong, void> _glNamedBufferAttachMemoryNV;
        
        public static unsafe void glNamedBufferAttachMemoryNV(uint buffer, uint memory, ulong offset)
        {
            _glNamedBufferAttachMemoryNV(buffer, memory, offset);
        }
        
        public static unsafe delegate*<uint, long, IntPtr, VertexBufferObjectUsage, void> _glNamedBufferData;
        
        public static unsafe void glNamedBufferData(uint buffer, long size, IntPtr data, VertexBufferObjectUsage usage)
        {
            _glNamedBufferData(buffer, size, (IntPtr)data, usage);
        }
        
        public static unsafe delegate*<uint, long, IntPtr, VertexBufferObjectUsage, void> _glNamedBufferDataEXT;
        
        public static unsafe void glNamedBufferDataEXT(uint buffer, long size, IntPtr data, VertexBufferObjectUsage usage)
        {
            _glNamedBufferDataEXT(buffer, size, (IntPtr)data, usage);
        }
        
        public static unsafe delegate*<uint, long, long, byte, void> _glNamedBufferPageCommitmentARB;
        
        public static unsafe void glNamedBufferPageCommitmentARB(uint buffer, long offset, long size, byte commit)
        {
            _glNamedBufferPageCommitmentARB(buffer, offset, size, commit);
        }
        
        public static unsafe delegate*<uint, long, long, byte, void> _glNamedBufferPageCommitmentEXT;
        
        public static unsafe void glNamedBufferPageCommitmentEXT(uint buffer, long offset, long size, byte commit)
        {
            _glNamedBufferPageCommitmentEXT(buffer, offset, size, commit);
        }
        
        public static unsafe delegate*<uint, long, long, uint, ulong, byte, void> _glNamedBufferPageCommitmentMemNV;
        
        public static unsafe void glNamedBufferPageCommitmentMemNV(uint buffer, long offset, long size, uint memory, ulong memOffset, byte commit)
        {
            _glNamedBufferPageCommitmentMemNV(buffer, offset, size, memory, memOffset, commit);
        }
        
        public static unsafe delegate*<uint, long, IntPtr, uint, void> _glNamedBufferStorage;
        
        public static unsafe void glNamedBufferStorage(uint buffer, long size, IntPtr data, uint flags)
        {
            _glNamedBufferStorage(buffer, size, (IntPtr)data, flags);
        }
        
        public static unsafe delegate*<uint, long, long, IntPtr, uint, void> _glNamedBufferStorageExternalEXT;
        
        public static unsafe void glNamedBufferStorageExternalEXT(uint buffer, long offset, long size, IntPtr clientBuffer, uint flags)
        {
            _glNamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags);
        }
        
        public static unsafe delegate*<uint, long, IntPtr, uint, void> _glNamedBufferStorageEXT;
        
        public static unsafe void glNamedBufferStorageEXT(uint buffer, long size, IntPtr data, uint flags)
        {
            _glNamedBufferStorageEXT(buffer, size, (IntPtr)data, flags);
        }
        
        public static unsafe delegate*<uint, long, uint, ulong, void> _glNamedBufferStorageMemEXT;
        
        public static unsafe void glNamedBufferStorageMemEXT(uint buffer, long size, uint memory, ulong offset)
        {
            _glNamedBufferStorageMemEXT(buffer, size, memory, offset);
        }
        
        public static unsafe delegate*<uint, long, long, IntPtr, void> _glNamedBufferSubData;
        
        public static unsafe void glNamedBufferSubData(uint buffer, long offset, long size, IntPtr data)
        {
            _glNamedBufferSubData(buffer, offset, size, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, long, long, IntPtr, void> _glNamedBufferSubDataEXT;
        
        public static unsafe void glNamedBufferSubDataEXT(uint buffer, long offset, long size, IntPtr data)
        {
            _glNamedBufferSubDataEXT(buffer, offset, size, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, uint, long, long, long, void> _glNamedCopyBufferSubDataEXT;
        
        public static unsafe void glNamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, long readOffset, long writeOffset, long size)
        {
            _glNamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size);
        }
        
        public static unsafe delegate*<uint, ColorBuffer, void> _glNamedFramebufferDrawBuffer;
        
        public static unsafe void glNamedFramebufferDrawBuffer(uint framebuffer, ColorBuffer buf)
        {
            _glNamedFramebufferDrawBuffer(framebuffer, buf);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glNamedFramebufferDrawBuffers;
        
        public static unsafe void glNamedFramebufferDrawBuffers(uint framebuffer, int n, ref ColorBuffer bufs)
        {
            _glNamedFramebufferDrawBuffers(framebuffer, n, (IntPtr)bufs);
        }
        
        public static unsafe delegate*<uint, FramebufferParameterName, int, void> _glNamedFramebufferParameteri;
        
        public static unsafe void glNamedFramebufferParameteri(uint framebuffer, FramebufferParameterName pname, int param)
        {
            _glNamedFramebufferParameteri(framebuffer, pname, param);
        }
        
        public static unsafe delegate*<uint, FramebufferParameterName, int, void> _glNamedFramebufferParameteriEXT;
        
        public static unsafe void glNamedFramebufferParameteriEXT(uint framebuffer, FramebufferParameterName pname, int param)
        {
            _glNamedFramebufferParameteriEXT(framebuffer, pname, param);
        }
        
        public static unsafe delegate*<uint, ColorBuffer, void> _glNamedFramebufferReadBuffer;
        
        public static unsafe void glNamedFramebufferReadBuffer(uint framebuffer, ColorBuffer src)
        {
            _glNamedFramebufferReadBuffer(framebuffer, src);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, RenderbufferTarget, uint, void> _glNamedFramebufferRenderbuffer;
        
        public static unsafe void glNamedFramebufferRenderbuffer(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
        {
            _glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, RenderbufferTarget, uint, void> _glNamedFramebufferRenderbufferEXT;
        
        public static unsafe void glNamedFramebufferRenderbufferEXT(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
        {
            _glNamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, void> _glNamedFramebufferSampleLocationsfvARB;
        
        public static unsafe void glNamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, ref float v)
        {
            _glNamedFramebufferSampleLocationsfvARB(framebuffer, start, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, void> _glNamedFramebufferSampleLocationsfvNV;
        
        public static unsafe void glNamedFramebufferSampleLocationsfvNV(uint framebuffer, uint start, int count, ref float v)
        {
            _glNamedFramebufferSampleLocationsfvNV(framebuffer, start, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, uint, int, void> _glNamedFramebufferTexture;
        
        public static unsafe void glNamedFramebufferTexture(uint framebuffer, FramebufferAttachment attachment, uint texture, int level)
        {
            _glNamedFramebufferTexture(framebuffer, attachment, texture, level);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glNamedFramebufferSamplePositionsfvAMD;
        
        public static unsafe void glNamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, ref float values)
        {
            _glNamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, (IntPtr)values);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, TextureTarget, uint, int, void> _glNamedFramebufferTexture1DEXT;
        
        public static unsafe void glNamedFramebufferTexture1DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
        {
            _glNamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, TextureTarget, uint, int, void> _glNamedFramebufferTexture2DEXT;
        
        public static unsafe void glNamedFramebufferTexture2DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
        {
            _glNamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, TextureTarget, uint, int, int, void> _glNamedFramebufferTexture3DEXT;
        
        public static unsafe void glNamedFramebufferTexture3DEXT(uint framebuffer, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
        {
            _glNamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, uint, int, void> _glNamedFramebufferTextureEXT;
        
        public static unsafe void glNamedFramebufferTextureEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level)
        {
            _glNamedFramebufferTextureEXT(framebuffer, attachment, texture, level);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, uint, int, TextureTarget, void> _glNamedFramebufferTextureFaceEXT;
        
        public static unsafe void glNamedFramebufferTextureFaceEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, TextureTarget face)
        {
            _glNamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, uint, int, int, void> _glNamedFramebufferTextureLayer;
        
        public static unsafe void glNamedFramebufferTextureLayer(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer)
        {
            _glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, uint, int, int, void> _glNamedFramebufferTextureLayerEXT;
        
        public static unsafe void glNamedFramebufferTextureLayerEXT(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer)
        {
            _glNamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, double, double, double, double, void> _glNamedProgramLocalParameter4dEXT;
        
        public static unsafe void glNamedProgramLocalParameter4dEXT(uint program, ProgramTarget target, uint index, double x, double y, double z, double w)
        {
            _glNamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, IntPtr, void> _glNamedProgramLocalParameter4dvEXT;
        
        public static unsafe void glNamedProgramLocalParameter4dvEXT(uint program, ProgramTarget target, uint index, ref double @params)
        {
            _glNamedProgramLocalParameter4dvEXT(program, target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, float, float, float, float, void> _glNamedProgramLocalParameter4fEXT;
        
        public static unsafe void glNamedProgramLocalParameter4fEXT(uint program, ProgramTarget target, uint index, float x, float y, float z, float w)
        {
            _glNamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, IntPtr, void> _glNamedProgramLocalParameter4fvEXT;
        
        public static unsafe void glNamedProgramLocalParameter4fvEXT(uint program, ProgramTarget target, uint index, ref float @params)
        {
            _glNamedProgramLocalParameter4fvEXT(program, target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, int, int, int, int, void> _glNamedProgramLocalParameterI4iEXT;
        
        public static unsafe void glNamedProgramLocalParameterI4iEXT(uint program, ProgramTarget target, uint index, int x, int y, int z, int w)
        {
            _glNamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, IntPtr, void> _glNamedProgramLocalParameterI4ivEXT;
        
        public static unsafe void glNamedProgramLocalParameterI4ivEXT(uint program, ProgramTarget target, uint index, ref int @params)
        {
            _glNamedProgramLocalParameterI4ivEXT(program, target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, uint, uint, uint, uint, void> _glNamedProgramLocalParameterI4uiEXT;
        
        public static unsafe void glNamedProgramLocalParameterI4uiEXT(uint program, ProgramTarget target, uint index, uint x, uint y, uint z, uint w)
        {
            _glNamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, IntPtr, void> _glNamedProgramLocalParameterI4uivEXT;
        
        public static unsafe void glNamedProgramLocalParameterI4uivEXT(uint program, ProgramTarget target, uint index, ref uint @params)
        {
            _glNamedProgramLocalParameterI4uivEXT(program, target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, int, IntPtr, void> _glNamedProgramLocalParameters4fvEXT;
        
        public static unsafe void glNamedProgramLocalParameters4fvEXT(uint program, ProgramTarget target, uint index, int count, out IntPtr @params)
        {
            _glNamedProgramLocalParameters4fvEXT(program, target, index, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, int, IntPtr, void> _glNamedProgramLocalParametersI4ivEXT;
        
        public static unsafe void glNamedProgramLocalParametersI4ivEXT(uint program, ProgramTarget target, uint index, int count, out IntPtr @params)
        {
            _glNamedProgramLocalParametersI4ivEXT(program, target, index, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, uint, int, IntPtr, void> _glNamedProgramLocalParametersI4uivEXT;
        
        public static unsafe void glNamedProgramLocalParametersI4uivEXT(uint program, ProgramTarget target, uint index, int count, out IntPtr @params)
        {
            _glNamedProgramLocalParametersI4uivEXT(program, target, index, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramTarget, ProgramFormat, int, IntPtr, void> _glNamedProgramStringEXT;
        
        public static unsafe void glNamedProgramStringEXT(uint program, ProgramTarget target, ProgramFormat format, int len, IntPtr @string)
        {
            _glNamedProgramStringEXT(program, target, format, len, (IntPtr)@string);
        }
        
        public static unsafe delegate*<uint, InternalFormat, int, int, void> _glNamedRenderbufferStorage;
        
        public static unsafe void glNamedRenderbufferStorage(uint renderbuffer, InternalFormat internalformat, int width, int height)
        {
            _glNamedRenderbufferStorage(renderbuffer, internalformat, width, height);
        }
        
        public static unsafe delegate*<uint, InternalFormat, int, int, void> _glNamedRenderbufferStorageEXT;
        
        public static unsafe void glNamedRenderbufferStorageEXT(uint renderbuffer, InternalFormat internalformat, int width, int height)
        {
            _glNamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height);
        }
        
        public static unsafe delegate*<uint, int, InternalFormat, int, int, void> _glNamedRenderbufferStorageMultisample;
        
        public static unsafe void glNamedRenderbufferStorageMultisample(uint renderbuffer, int samples, InternalFormat internalformat, int width, int height)
        {
            _glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
        }
        
        public static unsafe delegate*<uint, int, int, InternalFormat, int, int, void> _glNamedRenderbufferStorageMultisampleAdvancedAMD;
        
        public static unsafe void glNamedRenderbufferStorageMultisampleAdvancedAMD(uint renderbuffer, int samples, int storageSamples, InternalFormat internalformat, int width, int height)
        {
            _glNamedRenderbufferStorageMultisampleAdvancedAMD(renderbuffer, samples, storageSamples, internalformat, width, height);
        }
        
        public static unsafe delegate*<uint, int, int, InternalFormat, int, int, void> _glNamedRenderbufferStorageMultisampleCoverageEXT;
        
        public static unsafe void glNamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, InternalFormat internalformat, int width, int height)
        {
            _glNamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
        }
        
        public static unsafe delegate*<uint, int, InternalFormat, int, int, void> _glNamedRenderbufferStorageMultisampleEXT;
        
        public static unsafe void glNamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, InternalFormat internalformat, int width, int height)
        {
            _glNamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, int, IntPtr, void> _glNamedStringARB;
        
        public static unsafe void glNamedStringARB(uint type, int namelen, ref sbyte name, int stringlen, ref sbyte @string)
        {
            _glNamedStringARB(type, namelen, (IntPtr)name, stringlen, (IntPtr)@string);
        }
        
        public static unsafe delegate*<uint, ListMode, void> _glNewList;
        
        public static unsafe void glNewList(uint list, ListMode mode)
        {
            _glNewList(list, mode);
        }
        
        public static unsafe delegate*<int, IntPtr, ArrayObjectUsageATI, uint> _glNewObjectBufferATI;
        
        public static unsafe uint glNewObjectBufferATI(int size, IntPtr pointer, ArrayObjectUsageATI usage)
        {
            return _glNewObjectBufferATI(size, (IntPtr)pointer, usage);
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, void> _glNormal3b;
        
        public static unsafe void glNormal3b(sbyte nx, sbyte ny, sbyte nz)
        {
            _glNormal3b(nx, ny, nz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glNormal3bv;
        
        public static unsafe void glNormal3bv(ref sbyte v)
        {
            _glNormal3bv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, void> _glNormal3d;
        
        public static unsafe void glNormal3d(double nx, double ny, double nz)
        {
            _glNormal3d(nx, ny, nz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glNormal3dv;
        
        public static unsafe void glNormal3dv(ref double v)
        {
            _glNormal3dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glNormal3f;
        
        public static unsafe void glNormal3f(float nx, float ny, float nz)
        {
            _glNormal3f(nx, ny, nz);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, void> _glNormal3fVertex3fSUN;
        
        public static unsafe void glNormal3fVertex3fSUN(float nx, float ny, float nz, float x, float y, float z)
        {
            _glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glNormal3fVertex3fvSUN;
        
        public static unsafe void glNormal3fVertex3fvSUN(ref float n, ref float v)
        {
            _glNormal3fVertex3fvSUN((IntPtr)n, (IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glNormal3fv;
        
        public static unsafe void glNormal3fv(ref float v)
        {
            _glNormal3fv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, void> _glNormal3hNV;
        
        public static unsafe void glNormal3hNV(ushort nx, ushort ny, ushort nz)
        {
            _glNormal3hNV(nx, ny, nz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glNormal3hvNV;
        
        public static unsafe void glNormal3hvNV(ref ushort v)
        {
            _glNormal3hvNV((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glNormal3i;
        
        public static unsafe void glNormal3i(int nx, int ny, int nz)
        {
            _glNormal3i(nx, ny, nz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glNormal3iv;
        
        public static unsafe void glNormal3iv(ref int v)
        {
            _glNormal3iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glNormal3s;
        
        public static unsafe void glNormal3s(short nx, short ny, short nz)
        {
            _glNormal3s(nx, ny, nz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glNormal3sv;
        
        public static unsafe void glNormal3sv(ref short v)
        {
            _glNormal3sv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glNormal3x;
        
        public static unsafe void glNormal3x(int nx, int ny, int nz)
        {
            _glNormal3x(nx, ny, nz);
        }
        
        public static unsafe delegate*<int, int, int, void> _glNormal3xOES;
        
        public static unsafe void glNormal3xOES(int nx, int ny, int nz)
        {
            _glNormal3xOES(nx, ny, nz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glNormal3xvOES;
        
        public static unsafe void glNormal3xvOES(ref int coords)
        {
            _glNormal3xvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<uint, int, void> _glNormalFormatNV;
        
        public static unsafe void glNormalFormatNV(uint type, int stride)
        {
            _glNormalFormatNV(type, stride);
        }
        
        public static unsafe delegate*<NormalPointerType, uint, void> _glNormalP3ui;
        
        public static unsafe void glNormalP3ui(NormalPointerType type, uint coords)
        {
            _glNormalP3ui(type, coords);
        }
        
        public static unsafe delegate*<NormalPointerType, IntPtr, void> _glNormalP3uiv;
        
        public static unsafe void glNormalP3uiv(NormalPointerType type, ref uint coords)
        {
            _glNormalP3uiv(type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<NormalPointerType, int, IntPtr, void> _glNormalPointer;
        
        public static unsafe void glNormalPointer(NormalPointerType type, int stride, IntPtr pointer)
        {
            _glNormalPointer(type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<NormalPointerType, int, int, IntPtr, void> _glNormalPointerEXT;
        
        public static unsafe void glNormalPointerEXT(NormalPointerType type, int stride, int count, IntPtr pointer)
        {
            _glNormalPointerEXT(type, stride, count, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<NormalPointerType, int, IntPtr, int, void> _glNormalPointerListIBM;
        
        public static unsafe void glNormalPointerListIBM(NormalPointerType type, int stride, out IntPtr pointer, int ptrstride)
        {
            _glNormalPointerListIBM(type, stride, (IntPtr)pointer, ptrstride);
        }
        
        public static unsafe delegate*<NormalPointerType, IntPtr, void> _glNormalPointervINTEL;
        
        public static unsafe void glNormalPointervINTEL(NormalPointerType type, out IntPtr pointer)
        {
            _glNormalPointervINTEL(type, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<VertexStreamATI, sbyte, sbyte, sbyte, void> _glNormalStream3bATI;
        
        public static unsafe void glNormalStream3bATI(VertexStreamATI stream, sbyte nx, sbyte ny, sbyte nz)
        {
            _glNormalStream3bATI(stream, nx, ny, nz);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glNormalStream3bvATI;
        
        public static unsafe void glNormalStream3bvATI(VertexStreamATI stream, ref sbyte coords)
        {
            _glNormalStream3bvATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, double, double, double, void> _glNormalStream3dATI;
        
        public static unsafe void glNormalStream3dATI(VertexStreamATI stream, double nx, double ny, double nz)
        {
            _glNormalStream3dATI(stream, nx, ny, nz);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glNormalStream3dvATI;
        
        public static unsafe void glNormalStream3dvATI(VertexStreamATI stream, ref double coords)
        {
            _glNormalStream3dvATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, float, float, float, void> _glNormalStream3fATI;
        
        public static unsafe void glNormalStream3fATI(VertexStreamATI stream, float nx, float ny, float nz)
        {
            _glNormalStream3fATI(stream, nx, ny, nz);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glNormalStream3fvATI;
        
        public static unsafe void glNormalStream3fvATI(VertexStreamATI stream, ref float coords)
        {
            _glNormalStream3fvATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, int, int, int, void> _glNormalStream3iATI;
        
        public static unsafe void glNormalStream3iATI(VertexStreamATI stream, int nx, int ny, int nz)
        {
            _glNormalStream3iATI(stream, nx, ny, nz);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glNormalStream3ivATI;
        
        public static unsafe void glNormalStream3ivATI(VertexStreamATI stream, ref int coords)
        {
            _glNormalStream3ivATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, short, short, short, void> _glNormalStream3sATI;
        
        public static unsafe void glNormalStream3sATI(VertexStreamATI stream, short nx, short ny, short nz)
        {
            _glNormalStream3sATI(stream, nx, ny, nz);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glNormalStream3svATI;
        
        public static unsafe void glNormalStream3svATI(VertexStreamATI stream, ref short coords)
        {
            _glNormalStream3svATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<ObjectIdentifier, uint, int, IntPtr, void> _glObjectLabel;
        
        public static unsafe void glObjectLabel(ObjectIdentifier identifier, uint name, int length, ref sbyte label)
        {
            _glObjectLabel(identifier, name, length, (IntPtr)label);
        }
        
        public static unsafe delegate*<ObjectIdentifier, uint, int, IntPtr, void> _glObjectLabelKHR;
        
        public static unsafe void glObjectLabelKHR(ObjectIdentifier identifier, uint name, int length, ref sbyte label)
        {
            _glObjectLabelKHR(identifier, name, length, (IntPtr)label);
        }
        
        public static unsafe delegate*<IntPtr, int, IntPtr, void> _glObjectPtrLabel;
        
        public static unsafe void glObjectPtrLabel(IntPtr ptr, int length, ref sbyte label)
        {
            _glObjectPtrLabel((IntPtr)ptr, length, (IntPtr)label);
        }
        
        public static unsafe delegate*<IntPtr, int, IntPtr, void> _glObjectPtrLabelKHR;
        
        public static unsafe void glObjectPtrLabelKHR(IntPtr ptr, int length, ref sbyte label)
        {
            _glObjectPtrLabelKHR((IntPtr)ptr, length, (IntPtr)label);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint> _glObjectPurgeableAPPLE;
        
        public static unsafe uint glObjectPurgeableAPPLE(uint objectType, uint name, uint option)
        {
            return _glObjectPurgeableAPPLE(objectType, name, option);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint> _glObjectUnpurgeableAPPLE;
        
        public static unsafe uint glObjectUnpurgeableAPPLE(uint objectType, uint name, uint option)
        {
            return _glObjectUnpurgeableAPPLE(objectType, name, option);
        }
        
        public static unsafe delegate*<double, double, double, double, double, double, void> _glOrtho;
        
        public static unsafe void glOrtho(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            _glOrtho(left, right, bottom, top, zNear, zFar);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, void> _glOrthof;
        
        public static unsafe void glOrthof(float l, float r, float b, float t, float n, float f)
        {
            _glOrthof(l, r, b, t, n, f);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, void> _glOrthofOES;
        
        public static unsafe void glOrthofOES(float l, float r, float b, float t, float n, float f)
        {
            _glOrthofOES(l, r, b, t, n, f);
        }
        
        public static unsafe delegate*<int, int, int, int, int, int, void> _glOrthox;
        
        public static unsafe void glOrthox(int l, int r, int b, int t, int n, int f)
        {
            _glOrthox(l, r, b, t, n, f);
        }
        
        public static unsafe delegate*<int, int, int, int, int, int, void> _glOrthoxOES;
        
        public static unsafe void glOrthoxOES(int l, int r, int b, int t, int n, int f)
        {
            _glOrthoxOES(l, r, b, t, n, f);
        }
        
        public static unsafe delegate*<PNTrianglesPNameATI, float, void> _glPNTrianglesfATI;
        
        public static unsafe void glPNTrianglesfATI(PNTrianglesPNameATI pname, float param)
        {
            _glPNTrianglesfATI(pname, param);
        }
        
        public static unsafe delegate*<PNTrianglesPNameATI, int, void> _glPNTrianglesiATI;
        
        public static unsafe void glPNTrianglesiATI(PNTrianglesPNameATI pname, int param)
        {
            _glPNTrianglesiATI(pname, param);
        }
        
        public static unsafe delegate*<uint, uint, SwizzleOpATI, void> _glPassTexCoordATI;
        
        public static unsafe void glPassTexCoordATI(uint dst, uint coord, SwizzleOpATI swizzle)
        {
            _glPassTexCoordATI(dst, coord, swizzle);
        }
        
        public static unsafe delegate*<float, void> _glPassThrough;
        
        public static unsafe void glPassThrough(float token)
        {
            _glPassThrough(token);
        }
        
        public static unsafe delegate*<int, void> _glPassThroughxOES;
        
        public static unsafe void glPassThroughxOES(int token)
        {
            _glPassThroughxOES(token);
        }
        
        public static unsafe delegate*<PatchParameterName, IntPtr, void> _glPatchParameterfv;
        
        public static unsafe void glPatchParameterfv(PatchParameterName pname, ref float values)
        {
            _glPatchParameterfv(pname, (IntPtr)values);
        }
        
        public static unsafe delegate*<PatchParameterName, int, void> _glPatchParameteri;
        
        public static unsafe void glPatchParameteri(PatchParameterName pname, int value)
        {
            _glPatchParameteri(pname, value);
        }
        
        public static unsafe delegate*<PatchParameterName, int, void> _glPatchParameteriEXT;
        
        public static unsafe void glPatchParameteriEXT(PatchParameterName pname, int value)
        {
            _glPatchParameteriEXT(pname, value);
        }
        
        public static unsafe delegate*<PatchParameterName, int, void> _glPatchParameteriOES;
        
        public static unsafe void glPatchParameteriOES(PatchParameterName pname, int value)
        {
            _glPatchParameteriOES(pname, value);
        }
        
        public static unsafe delegate*<PathColor, PathGenMode, PathColorFormat, IntPtr, void> _glPathColorGenNV;
        
        public static unsafe void glPathColorGenNV(PathColor color, PathGenMode genMode, PathColorFormat colorFormat, ref float coeffs)
        {
            _glPathColorGenNV(color, genMode, colorFormat, (IntPtr)coeffs);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, int, PathCoordType, IntPtr, void> _glPathCommandsNV;
        
        public static unsafe void glPathCommandsNV(uint path, int numCommands, ref byte commands, int numCoords, PathCoordType coordType, IntPtr coords)
        {
            _glPathCommandsNV(path, numCommands, (IntPtr)commands, numCoords, coordType, (IntPtr)coords);
        }
        
        public static unsafe delegate*<uint, int, PathCoordType, IntPtr, void> _glPathCoordsNV;
        
        public static unsafe void glPathCoordsNV(uint path, int numCoords, PathCoordType coordType, IntPtr coords)
        {
            _glPathCoordsNV(path, numCoords, coordType, (IntPtr)coords);
        }
        
        public static unsafe delegate*<DepthFunction, void> _glPathCoverDepthFuncNV;
        
        public static unsafe void glPathCoverDepthFuncNV(DepthFunction func)
        {
            _glPathCoverDepthFuncNV(func);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glPathDashArrayNV;
        
        public static unsafe void glPathDashArrayNV(uint path, int dashCount, ref float dashArray)
        {
            _glPathDashArrayNV(path, dashCount, (IntPtr)dashArray);
        }
        
        public static unsafe delegate*<PathGenMode, void> _glPathFogGenNV;
        
        public static unsafe void glPathFogGenNV(PathGenMode genMode)
        {
            _glPathFogGenNV(genMode);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, uint, uint, int, uint, float, uint> _glPathGlyphIndexArrayNV;
        
        public static unsafe uint glPathGlyphIndexArrayNV(uint firstPathName, uint fontTarget, IntPtr fontName, uint fontStyle, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
        {
            return _glPathGlyphIndexArrayNV(firstPathName, fontTarget, (IntPtr)fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
        }
        
        public static unsafe delegate*<uint, IntPtr, uint, uint, float, IntPtr, uint> _glPathGlyphIndexRangeNV;
        
        public static unsafe uint glPathGlyphIndexRangeNV(uint fontTarget, IntPtr fontName, uint fontStyle, uint pathParameterTemplate, float emScale, ref uint baseAndCount)
        {
            return _glPathGlyphIndexRangeNV(fontTarget, (IntPtr)fontName, fontStyle, pathParameterTemplate, emScale, (IntPtr)baseAndCount);
        }
        
        public static unsafe delegate*<uint, PathFontTarget, IntPtr, uint, uint, int, PathHandleMissingGlyphs, uint, float, void> _glPathGlyphRangeNV;
        
        public static unsafe void glPathGlyphRangeNV(uint firstPathName, PathFontTarget fontTarget, IntPtr fontName, uint fontStyle, uint firstGlyph, int numGlyphs, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
        {
            _glPathGlyphRangeNV(firstPathName, fontTarget, (IntPtr)fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
        }
        
        public static unsafe delegate*<uint, PathFontTarget, IntPtr, uint, int, PathElementType, IntPtr, PathHandleMissingGlyphs, uint, float, void> _glPathGlyphsNV;
        
        public static unsafe void glPathGlyphsNV(uint firstPathName, PathFontTarget fontTarget, IntPtr fontName, uint fontStyle, int numGlyphs, PathElementType type, IntPtr charcodes, PathHandleMissingGlyphs handleMissingGlyphs, uint pathParameterTemplate, float emScale)
        {
            _glPathGlyphsNV(firstPathName, fontTarget, (IntPtr)fontName, fontStyle, numGlyphs, type, (IntPtr)charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
        }
        
        public static unsafe delegate*<uint, uint, long, IntPtr, int, uint, int, uint, float, uint> _glPathMemoryGlyphIndexArrayNV;
        
        public static unsafe uint glPathMemoryGlyphIndexArrayNV(uint firstPathName, uint fontTarget, long fontSize, IntPtr fontData, int faceIndex, uint firstGlyphIndex, int numGlyphs, uint pathParameterTemplate, float emScale)
        {
            return _glPathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, (IntPtr)fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale);
        }
        
        public static unsafe delegate*<uint, PathParameter, float, void> _glPathParameterfNV;
        
        public static unsafe void glPathParameterfNV(uint path, PathParameter pname, float value)
        {
            _glPathParameterfNV(path, pname, value);
        }
        
        public static unsafe delegate*<uint, PathParameter, IntPtr, void> _glPathParameterfvNV;
        
        public static unsafe void glPathParameterfvNV(uint path, PathParameter pname, ref float value)
        {
            _glPathParameterfvNV(path, pname, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, PathParameter, int, void> _glPathParameteriNV;
        
        public static unsafe void glPathParameteriNV(uint path, PathParameter pname, int value)
        {
            _glPathParameteriNV(path, pname, value);
        }
        
        public static unsafe delegate*<uint, PathParameter, IntPtr, void> _glPathParameterivNV;
        
        public static unsafe void glPathParameterivNV(uint path, PathParameter pname, ref int value)
        {
            _glPathParameterivNV(path, pname, (IntPtr)value);
        }
        
        public static unsafe delegate*<float, float, void> _glPathStencilDepthOffsetNV;
        
        public static unsafe void glPathStencilDepthOffsetNV(float factor, float units)
        {
            _glPathStencilDepthOffsetNV(factor, units);
        }
        
        public static unsafe delegate*<StencilFunction, int, uint, void> _glPathStencilFuncNV;
        
        public static unsafe void glPathStencilFuncNV(StencilFunction func, int @ref, uint mask)
        {
            _glPathStencilFuncNV(func, @ref, mask);
        }
        
        public static unsafe delegate*<uint, PathStringFormat, int, IntPtr, void> _glPathStringNV;
        
        public static unsafe void glPathStringNV(uint path, PathStringFormat format, int length, IntPtr pathString)
        {
            _glPathStringNV(path, format, length, (IntPtr)pathString);
        }
        
        public static unsafe delegate*<uint, int, int, int, IntPtr, int, PathCoordType, IntPtr, void> _glPathSubCommandsNV;
        
        public static unsafe void glPathSubCommandsNV(uint path, int commandStart, int commandsToDelete, int numCommands, ref byte commands, int numCoords, PathCoordType coordType, IntPtr coords)
        {
            _glPathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, (IntPtr)commands, numCoords, coordType, (IntPtr)coords);
        }
        
        public static unsafe delegate*<uint, int, int, PathCoordType, IntPtr, void> _glPathSubCoordsNV;
        
        public static unsafe void glPathSubCoordsNV(uint path, int coordStart, int numCoords, PathCoordType coordType, IntPtr coords)
        {
            _glPathSubCoordsNV(path, coordStart, numCoords, coordType, (IntPtr)coords);
        }
        
        public static unsafe delegate*<PathColor, PathGenMode, int, IntPtr, void> _glPathTexGenNV;
        
        public static unsafe void glPathTexGenNV(PathColor texCoordSet, PathGenMode genMode, int components, ref float coeffs)
        {
            _glPathTexGenNV(texCoordSet, genMode, components, (IntPtr)coeffs);
        }
        
        public static unsafe delegate*<void> _glPauseTransformFeedback;
        
        public static unsafe void glPauseTransformFeedback()
        {
            _glPauseTransformFeedback();
        }
        
        public static unsafe delegate*<void> _glPauseTransformFeedbackNV;
        
        public static unsafe void glPauseTransformFeedbackNV()
        {
            _glPauseTransformFeedbackNV();
        }
        
        public static unsafe delegate*<PixelDataRangeTargetNV, int, IntPtr, void> _glPixelDataRangeNV;
        
        public static unsafe void glPixelDataRangeNV(PixelDataRangeTargetNV target, int length, IntPtr pointer)
        {
            _glPixelDataRangeNV(target, length, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glPixelMapfv;
        
        public static unsafe void glPixelMapfv(PixelMap map, int mapsize, ref float values)
        {
            _glPixelMapfv(map, mapsize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glPixelMapuiv;
        
        public static unsafe void glPixelMapuiv(PixelMap map, int mapsize, ref uint values)
        {
            _glPixelMapuiv(map, mapsize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glPixelMapusv;
        
        public static unsafe void glPixelMapusv(PixelMap map, int mapsize, ref ushort values)
        {
            _glPixelMapusv(map, mapsize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glPixelMapx;
        
        public static unsafe void glPixelMapx(PixelMap map, int size, ref int values)
        {
            _glPixelMapx(map, size, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelStoreParameter, float, void> _glPixelStoref;
        
        public static unsafe void glPixelStoref(PixelStoreParameter pname, float param)
        {
            _glPixelStoref(pname, param);
        }
        
        public static unsafe delegate*<PixelStoreParameter, int, void> _glPixelStorei;
        
        public static unsafe void glPixelStorei(PixelStoreParameter pname, int param)
        {
            _glPixelStorei(pname, param);
        }
        
        public static unsafe delegate*<PixelStoreParameter, int, void> _glPixelStorex;
        
        public static unsafe void glPixelStorex(PixelStoreParameter pname, int param)
        {
            _glPixelStorex(pname, param);
        }
        
        public static unsafe delegate*<PixelTexGenParameterNameSGIS, float, void> _glPixelTexGenParameterfSGIS;
        
        public static unsafe void glPixelTexGenParameterfSGIS(PixelTexGenParameterNameSGIS pname, float param)
        {
            _glPixelTexGenParameterfSGIS(pname, param);
        }
        
        public static unsafe delegate*<PixelTexGenParameterNameSGIS, IntPtr, void> _glPixelTexGenParameterfvSGIS;
        
        public static unsafe void glPixelTexGenParameterfvSGIS(PixelTexGenParameterNameSGIS pname, ref float @params)
        {
            _glPixelTexGenParameterfvSGIS(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<PixelTexGenParameterNameSGIS, int, void> _glPixelTexGenParameteriSGIS;
        
        public static unsafe void glPixelTexGenParameteriSGIS(PixelTexGenParameterNameSGIS pname, int param)
        {
            _glPixelTexGenParameteriSGIS(pname, param);
        }
        
        public static unsafe delegate*<PixelTexGenParameterNameSGIS, IntPtr, void> _glPixelTexGenParameterivSGIS;
        
        public static unsafe void glPixelTexGenParameterivSGIS(PixelTexGenParameterNameSGIS pname, ref int @params)
        {
            _glPixelTexGenParameterivSGIS(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<PixelTexGenModeSGIX, void> _glPixelTexGenSGIX;
        
        public static unsafe void glPixelTexGenSGIX(PixelTexGenModeSGIX mode)
        {
            _glPixelTexGenSGIX(mode);
        }
        
        public static unsafe delegate*<PixelTransferParameter, float, void> _glPixelTransferf;
        
        public static unsafe void glPixelTransferf(PixelTransferParameter pname, float param)
        {
            _glPixelTransferf(pname, param);
        }
        
        public static unsafe delegate*<PixelTransferParameter, int, void> _glPixelTransferi;
        
        public static unsafe void glPixelTransferi(PixelTransferParameter pname, int param)
        {
            _glPixelTransferi(pname, param);
        }
        
        public static unsafe delegate*<PixelTransferParameter, int, void> _glPixelTransferxOES;
        
        public static unsafe void glPixelTransferxOES(PixelTransferParameter pname, int param)
        {
            _glPixelTransferxOES(pname, param);
        }
        
        public static unsafe delegate*<PixelTransformTargetEXT, PixelTransformPNameEXT, float, void> _glPixelTransformParameterfEXT;
        
        public static unsafe void glPixelTransformParameterfEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, float param)
        {
            _glPixelTransformParameterfEXT(target, pname, param);
        }
        
        public static unsafe delegate*<PixelTransformTargetEXT, PixelTransformPNameEXT, IntPtr, void> _glPixelTransformParameterfvEXT;
        
        public static unsafe void glPixelTransformParameterfvEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, ref float @params)
        {
            _glPixelTransformParameterfvEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<PixelTransformTargetEXT, PixelTransformPNameEXT, int, void> _glPixelTransformParameteriEXT;
        
        public static unsafe void glPixelTransformParameteriEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, int param)
        {
            _glPixelTransformParameteriEXT(target, pname, param);
        }
        
        public static unsafe delegate*<PixelTransformTargetEXT, PixelTransformPNameEXT, IntPtr, void> _glPixelTransformParameterivEXT;
        
        public static unsafe void glPixelTransformParameterivEXT(PixelTransformTargetEXT target, PixelTransformPNameEXT pname, ref int @params)
        {
            _glPixelTransformParameterivEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<float, float, void> _glPixelZoom;
        
        public static unsafe void glPixelZoom(float xfactor, float yfactor)
        {
            _glPixelZoom(xfactor, yfactor);
        }
        
        public static unsafe delegate*<int, int, void> _glPixelZoomxOES;
        
        public static unsafe void glPixelZoomxOES(int xfactor, int yfactor)
        {
            _glPixelZoomxOES(xfactor, yfactor);
        }
        
        public static unsafe delegate*<uint, int, int, float, IntPtr, IntPtr, IntPtr, IntPtr, byte> _glPointAlongPathNV;
        
        public static unsafe byte glPointAlongPathNV(uint path, int startSegment, int numSegments, float distance, ref float x, ref float y, ref float tangentX, ref float tangentY)
        {
            return _glPointAlongPathNV(path, startSegment, numSegments, distance, (IntPtr)x, (IntPtr)y, (IntPtr)tangentX, (IntPtr)tangentY);
        }
        
        public static unsafe delegate*<PointParameterNameARB, float, void> _glPointParameterf;
        
        public static unsafe void glPointParameterf(PointParameterNameARB pname, float param)
        {
            _glPointParameterf(pname, param);
        }
        
        public static unsafe delegate*<PointParameterNameARB, float, void> _glPointParameterfARB;
        
        public static unsafe void glPointParameterfARB(PointParameterNameARB pname, float param)
        {
            _glPointParameterfARB(pname, param);
        }
        
        public static unsafe delegate*<PointParameterNameARB, float, void> _glPointParameterfEXT;
        
        public static unsafe void glPointParameterfEXT(PointParameterNameARB pname, float param)
        {
            _glPointParameterfEXT(pname, param);
        }
        
        public static unsafe delegate*<PointParameterNameARB, float, void> _glPointParameterfSGIS;
        
        public static unsafe void glPointParameterfSGIS(PointParameterNameARB pname, float param)
        {
            _glPointParameterfSGIS(pname, param);
        }
        
        public static unsafe delegate*<PointParameterNameARB, IntPtr, void> _glPointParameterfv;
        
        public static unsafe void glPointParameterfv(PointParameterNameARB pname, ref float @params)
        {
            _glPointParameterfv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<PointParameterNameARB, IntPtr, void> _glPointParameterfvARB;
        
        public static unsafe void glPointParameterfvARB(PointParameterNameARB pname, ref float @params)
        {
            _glPointParameterfvARB(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<PointParameterNameARB, IntPtr, void> _glPointParameterfvEXT;
        
        public static unsafe void glPointParameterfvEXT(PointParameterNameARB pname, ref float @params)
        {
            _glPointParameterfvEXT(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<PointParameterNameARB, IntPtr, void> _glPointParameterfvSGIS;
        
        public static unsafe void glPointParameterfvSGIS(PointParameterNameARB pname, ref float @params)
        {
            _glPointParameterfvSGIS(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<PointParameterNameARB, int, void> _glPointParameteri;
        
        public static unsafe void glPointParameteri(PointParameterNameARB pname, int param)
        {
            _glPointParameteri(pname, param);
        }
        
        public static unsafe delegate*<PointParameterNameARB, int, void> _glPointParameteriNV;
        
        public static unsafe void glPointParameteriNV(PointParameterNameARB pname, int param)
        {
            _glPointParameteriNV(pname, param);
        }
        
        public static unsafe delegate*<PointParameterNameARB, IntPtr, void> _glPointParameteriv;
        
        public static unsafe void glPointParameteriv(PointParameterNameARB pname, ref int @params)
        {
            _glPointParameteriv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<PointParameterNameARB, IntPtr, void> _glPointParameterivNV;
        
        public static unsafe void glPointParameterivNV(PointParameterNameARB pname, ref int @params)
        {
            _glPointParameterivNV(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<PointParameterNameARB, int, void> _glPointParameterx;
        
        public static unsafe void glPointParameterx(PointParameterNameARB pname, int param)
        {
            _glPointParameterx(pname, param);
        }
        
        public static unsafe delegate*<PointParameterNameARB, int, void> _glPointParameterxOES;
        
        public static unsafe void glPointParameterxOES(PointParameterNameARB pname, int param)
        {
            _glPointParameterxOES(pname, param);
        }
        
        public static unsafe delegate*<PointParameterNameARB, IntPtr, void> _glPointParameterxv;
        
        public static unsafe void glPointParameterxv(PointParameterNameARB pname, ref int @params)
        {
            _glPointParameterxv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<PointParameterNameARB, IntPtr, void> _glPointParameterxvOES;
        
        public static unsafe void glPointParameterxvOES(PointParameterNameARB pname, ref int @params)
        {
            _glPointParameterxvOES(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<float, void> _glPointSize;
        
        public static unsafe void glPointSize(float size)
        {
            _glPointSize(size);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glPointSizePointerOES;
        
        public static unsafe void glPointSizePointerOES(uint type, int stride, IntPtr pointer)
        {
            _glPointSizePointerOES(type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, void> _glPointSizex;
        
        public static unsafe void glPointSizex(int size)
        {
            _glPointSizex(size);
        }
        
        public static unsafe delegate*<int, void> _glPointSizexOES;
        
        public static unsafe void glPointSizexOES(int size)
        {
            _glPointSizexOES(size);
        }
        
        public static unsafe delegate*<IntPtr, int> _glPollAsyncSGIX;
        
        public static unsafe int glPollAsyncSGIX(ref uint markerp)
        {
            return _glPollAsyncSGIX((IntPtr)markerp);
        }
        
        public static unsafe delegate*<IntPtr, int> _glPollInstrumentsSGIX;
        
        public static unsafe int glPollInstrumentsSGIX(ref int marker_p)
        {
            return _glPollInstrumentsSGIX((IntPtr)marker_p);
        }
        
        public static unsafe delegate*<MaterialFace, PolygonMode, void> _glPolygonMode;
        
        public static unsafe void glPolygonMode(MaterialFace face, PolygonMode mode)
        {
            _glPolygonMode(face, mode);
        }
        
        public static unsafe delegate*<MaterialFace, PolygonMode, void> _glPolygonModeNV;
        
        public static unsafe void glPolygonModeNV(MaterialFace face, PolygonMode mode)
        {
            _glPolygonModeNV(face, mode);
        }
        
        public static unsafe delegate*<float, float, void> _glPolygonOffset;
        
        public static unsafe void glPolygonOffset(float factor, float units)
        {
            _glPolygonOffset(factor, units);
        }
        
        public static unsafe delegate*<float, float, float, void> _glPolygonOffsetClamp;
        
        public static unsafe void glPolygonOffsetClamp(float factor, float units, float clamp)
        {
            _glPolygonOffsetClamp(factor, units, clamp);
        }
        
        public static unsafe delegate*<float, float, float, void> _glPolygonOffsetClampEXT;
        
        public static unsafe void glPolygonOffsetClampEXT(float factor, float units, float clamp)
        {
            _glPolygonOffsetClampEXT(factor, units, clamp);
        }
        
        public static unsafe delegate*<float, float, void> _glPolygonOffsetEXT;
        
        public static unsafe void glPolygonOffsetEXT(float factor, float bias)
        {
            _glPolygonOffsetEXT(factor, bias);
        }
        
        public static unsafe delegate*<int, int, void> _glPolygonOffsetx;
        
        public static unsafe void glPolygonOffsetx(int factor, int units)
        {
            _glPolygonOffsetx(factor, units);
        }
        
        public static unsafe delegate*<int, int, void> _glPolygonOffsetxOES;
        
        public static unsafe void glPolygonOffsetxOES(int factor, int units)
        {
            _glPolygonOffsetxOES(factor, units);
        }
        
        public static unsafe delegate*<IntPtr, void> _glPolygonStipple;
        
        public static unsafe void glPolygonStipple(ref byte mask)
        {
            _glPolygonStipple((IntPtr)mask);
        }
        
        public static unsafe delegate*<void> _glPopAttrib;
        
        public static unsafe void glPopAttrib()
        {
            _glPopAttrib();
        }
        
        public static unsafe delegate*<void> _glPopClientAttrib;
        
        public static unsafe void glPopClientAttrib()
        {
            _glPopClientAttrib();
        }
        
        public static unsafe delegate*<void> _glPopDebugGroup;
        
        public static unsafe void glPopDebugGroup()
        {
            _glPopDebugGroup();
        }
        
        public static unsafe delegate*<void> _glPopDebugGroupKHR;
        
        public static unsafe void glPopDebugGroupKHR()
        {
            _glPopDebugGroupKHR();
        }
        
        public static unsafe delegate*<void> _glPopGroupMarkerEXT;
        
        public static unsafe void glPopGroupMarkerEXT()
        {
            _glPopGroupMarkerEXT();
        }
        
        public static unsafe delegate*<void> _glPopMatrix;
        
        public static unsafe void glPopMatrix()
        {
            _glPopMatrix();
        }
        
        public static unsafe delegate*<void> _glPopName;
        
        public static unsafe void glPopName()
        {
            _glPopName();
        }
        
        public static unsafe delegate*<uint, ulong, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _glPresentFrameDualFillNV;
        
        public static unsafe void glPresentFrameDualFillNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, uint type, uint target0, uint fill0, uint target1, uint fill1, uint target2, uint fill2, uint target3, uint fill3)
        {
            _glPresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
        }
        
        public static unsafe delegate*<uint, ulong, uint, uint, uint, uint, uint, uint, uint, uint, uint, void> _glPresentFrameKeyedNV;
        
        public static unsafe void glPresentFrameKeyedNV(uint video_slot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, uint type, uint target0, uint fill0, uint key0, uint target1, uint fill1, uint key1)
        {
            _glPresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, float, float, void> _glPrimitiveBoundingBox;
        
        public static unsafe void glPrimitiveBoundingBox(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
        {
            _glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, float, float, void> _glPrimitiveBoundingBoxARB;
        
        public static unsafe void glPrimitiveBoundingBoxARB(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
        {
            _glPrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, float, float, void> _glPrimitiveBoundingBoxEXT;
        
        public static unsafe void glPrimitiveBoundingBoxEXT(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
        {
            _glPrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, float, float, void> _glPrimitiveBoundingBoxOES;
        
        public static unsafe void glPrimitiveBoundingBoxOES(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
        {
            _glPrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
        }
        
        public static unsafe delegate*<uint, void> _glPrimitiveRestartIndex;
        
        public static unsafe void glPrimitiveRestartIndex(uint index)
        {
            _glPrimitiveRestartIndex(index);
        }
        
        public static unsafe delegate*<uint, void> _glPrimitiveRestartIndexNV;
        
        public static unsafe void glPrimitiveRestartIndexNV(uint index)
        {
            _glPrimitiveRestartIndexNV(index);
        }
        
        public static unsafe delegate*<void> _glPrimitiveRestartNV;
        
        public static unsafe void glPrimitiveRestartNV()
        {
            _glPrimitiveRestartNV();
        }
        
        public static unsafe delegate*<int, IntPtr, IntPtr, void> _glPrioritizeTextures;
        
        public static unsafe void glPrioritizeTextures(int n, ref uint textures, ref float priorities)
        {
            _glPrioritizeTextures(n, (IntPtr)textures, (IntPtr)priorities);
        }
        
        public static unsafe delegate*<int, IntPtr, IntPtr, void> _glPrioritizeTexturesEXT;
        
        public static unsafe void glPrioritizeTexturesEXT(int n, ref uint textures, ref float priorities)
        {
            _glPrioritizeTexturesEXT(n, (IntPtr)textures, (IntPtr)priorities);
        }
        
        public static unsafe delegate*<int, IntPtr, IntPtr, void> _glPrioritizeTexturesxOES;
        
        public static unsafe void glPrioritizeTexturesxOES(int n, ref uint textures, ref int priorities)
        {
            _glPrioritizeTexturesxOES(n, (IntPtr)textures, (IntPtr)priorities);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, int, void> _glProgramBinary;
        
        public static unsafe void glProgramBinary(uint program, uint binaryFormat, IntPtr binary, int length)
        {
            _glProgramBinary(program, binaryFormat, (IntPtr)binary, length);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, int, void> _glProgramBinaryOES;
        
        public static unsafe void glProgramBinaryOES(uint program, uint binaryFormat, IntPtr binary, int length)
        {
            _glProgramBinaryOES(program, binaryFormat, (IntPtr)binary, length);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, uint, int, IntPtr, void> _glProgramBufferParametersIivNV;
        
        public static unsafe void glProgramBufferParametersIivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, ref int @params)
        {
            _glProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, uint, int, IntPtr, void> _glProgramBufferParametersIuivNV;
        
        public static unsafe void glProgramBufferParametersIuivNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, ref uint @params)
        {
            _glProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, uint, int, IntPtr, void> _glProgramBufferParametersfvNV;
        
        public static unsafe void glProgramBufferParametersfvNV(ProgramTarget target, uint bindingIndex, uint wordIndex, int count, ref float @params)
        {
            _glProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, double, double, double, double, void> _glProgramEnvParameter4dARB;
        
        public static unsafe void glProgramEnvParameter4dARB(ProgramTarget target, uint index, double x, double y, double z, double w)
        {
            _glProgramEnvParameter4dARB(target, index, x, y, z, w);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glProgramEnvParameter4dvARB;
        
        public static unsafe void glProgramEnvParameter4dvARB(ProgramTarget target, uint index, ref double @params)
        {
            _glProgramEnvParameter4dvARB(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, float, float, float, float, void> _glProgramEnvParameter4fARB;
        
        public static unsafe void glProgramEnvParameter4fARB(ProgramTarget target, uint index, float x, float y, float z, float w)
        {
            _glProgramEnvParameter4fARB(target, index, x, y, z, w);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glProgramEnvParameter4fvARB;
        
        public static unsafe void glProgramEnvParameter4fvARB(ProgramTarget target, uint index, ref float @params)
        {
            _glProgramEnvParameter4fvARB(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, int, int, int, int, void> _glProgramEnvParameterI4iNV;
        
        public static unsafe void glProgramEnvParameterI4iNV(ProgramTarget target, uint index, int x, int y, int z, int w)
        {
            _glProgramEnvParameterI4iNV(target, index, x, y, z, w);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glProgramEnvParameterI4ivNV;
        
        public static unsafe void glProgramEnvParameterI4ivNV(ProgramTarget target, uint index, ref int @params)
        {
            _glProgramEnvParameterI4ivNV(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, uint, uint, uint, uint, void> _glProgramEnvParameterI4uiNV;
        
        public static unsafe void glProgramEnvParameterI4uiNV(ProgramTarget target, uint index, uint x, uint y, uint z, uint w)
        {
            _glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glProgramEnvParameterI4uivNV;
        
        public static unsafe void glProgramEnvParameterI4uivNV(ProgramTarget target, uint index, ref uint @params)
        {
            _glProgramEnvParameterI4uivNV(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, int, IntPtr, void> _glProgramEnvParameters4fvEXT;
        
        public static unsafe void glProgramEnvParameters4fvEXT(ProgramTarget target, uint index, int count, out IntPtr @params)
        {
            _glProgramEnvParameters4fvEXT(target, index, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, int, IntPtr, void> _glProgramEnvParametersI4ivNV;
        
        public static unsafe void glProgramEnvParametersI4ivNV(ProgramTarget target, uint index, int count, out IntPtr @params)
        {
            _glProgramEnvParametersI4ivNV(target, index, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, int, IntPtr, void> _glProgramEnvParametersI4uivNV;
        
        public static unsafe void glProgramEnvParametersI4uivNV(ProgramTarget target, uint index, int count, out IntPtr @params)
        {
            _glProgramEnvParametersI4uivNV(target, index, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, double, double, double, double, void> _glProgramLocalParameter4dARB;
        
        public static unsafe void glProgramLocalParameter4dARB(ProgramTarget target, uint index, double x, double y, double z, double w)
        {
            _glProgramLocalParameter4dARB(target, index, x, y, z, w);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glProgramLocalParameter4dvARB;
        
        public static unsafe void glProgramLocalParameter4dvARB(ProgramTarget target, uint index, ref double @params)
        {
            _glProgramLocalParameter4dvARB(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, float, float, float, float, void> _glProgramLocalParameter4fARB;
        
        public static unsafe void glProgramLocalParameter4fARB(ProgramTarget target, uint index, float x, float y, float z, float w)
        {
            _glProgramLocalParameter4fARB(target, index, x, y, z, w);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glProgramLocalParameter4fvARB;
        
        public static unsafe void glProgramLocalParameter4fvARB(ProgramTarget target, uint index, ref float @params)
        {
            _glProgramLocalParameter4fvARB(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, int, int, int, int, void> _glProgramLocalParameterI4iNV;
        
        public static unsafe void glProgramLocalParameterI4iNV(ProgramTarget target, uint index, int x, int y, int z, int w)
        {
            _glProgramLocalParameterI4iNV(target, index, x, y, z, w);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glProgramLocalParameterI4ivNV;
        
        public static unsafe void glProgramLocalParameterI4ivNV(ProgramTarget target, uint index, ref int @params)
        {
            _glProgramLocalParameterI4ivNV(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, uint, uint, uint, uint, void> _glProgramLocalParameterI4uiNV;
        
        public static unsafe void glProgramLocalParameterI4uiNV(ProgramTarget target, uint index, uint x, uint y, uint z, uint w)
        {
            _glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, IntPtr, void> _glProgramLocalParameterI4uivNV;
        
        public static unsafe void glProgramLocalParameterI4uivNV(ProgramTarget target, uint index, ref uint @params)
        {
            _glProgramLocalParameterI4uivNV(target, index, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, int, IntPtr, void> _glProgramLocalParameters4fvEXT;
        
        public static unsafe void glProgramLocalParameters4fvEXT(ProgramTarget target, uint index, int count, out IntPtr @params)
        {
            _glProgramLocalParameters4fvEXT(target, index, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, int, IntPtr, void> _glProgramLocalParametersI4ivNV;
        
        public static unsafe void glProgramLocalParametersI4ivNV(ProgramTarget target, uint index, int count, out IntPtr @params)
        {
            _glProgramLocalParametersI4ivNV(target, index, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ProgramTarget, uint, int, IntPtr, void> _glProgramLocalParametersI4uivNV;
        
        public static unsafe void glProgramLocalParametersI4uivNV(ProgramTarget target, uint index, int count, out IntPtr @params)
        {
            _glProgramLocalParametersI4uivNV(target, index, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, double, double, double, double, void> _glProgramNamedParameter4dNV;
        
        public static unsafe void glProgramNamedParameter4dNV(uint id, int len, ref byte name, double x, double y, double z, double w)
        {
            _glProgramNamedParameter4dNV(id, len, (IntPtr)name, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glProgramNamedParameter4dvNV;
        
        public static unsafe void glProgramNamedParameter4dvNV(uint id, int len, ref byte name, ref double v)
        {
            _glProgramNamedParameter4dvNV(id, len, (IntPtr)name, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, float, float, float, float, void> _glProgramNamedParameter4fNV;
        
        public static unsafe void glProgramNamedParameter4fNV(uint id, int len, ref byte name, float x, float y, float z, float w)
        {
            _glProgramNamedParameter4fNV(id, len, (IntPtr)name, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glProgramNamedParameter4fvNV;
        
        public static unsafe void glProgramNamedParameter4fvNV(uint id, int len, ref byte name, ref float v)
        {
            _glProgramNamedParameter4fvNV(id, len, (IntPtr)name, (IntPtr)v);
        }
        
        public static unsafe delegate*<VertexAttribEnumNV, uint, double, double, double, double, void> _glProgramParameter4dNV;
        
        public static unsafe void glProgramParameter4dNV(VertexAttribEnumNV target, uint index, double x, double y, double z, double w)
        {
            _glProgramParameter4dNV(target, index, x, y, z, w);
        }
        
        public static unsafe delegate*<VertexAttribEnumNV, uint, IntPtr, void> _glProgramParameter4dvNV;
        
        public static unsafe void glProgramParameter4dvNV(VertexAttribEnumNV target, uint index, ref double v)
        {
            _glProgramParameter4dvNV(target, index, (IntPtr)v);
        }
        
        public static unsafe delegate*<VertexAttribEnumNV, uint, float, float, float, float, void> _glProgramParameter4fNV;
        
        public static unsafe void glProgramParameter4fNV(VertexAttribEnumNV target, uint index, float x, float y, float z, float w)
        {
            _glProgramParameter4fNV(target, index, x, y, z, w);
        }
        
        public static unsafe delegate*<VertexAttribEnumNV, uint, IntPtr, void> _glProgramParameter4fvNV;
        
        public static unsafe void glProgramParameter4fvNV(VertexAttribEnumNV target, uint index, ref float v)
        {
            _glProgramParameter4fvNV(target, index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, ProgramParameterPName, int, void> _glProgramParameteri;
        
        public static unsafe void glProgramParameteri(uint program, ProgramParameterPName pname, int value)
        {
            _glProgramParameteri(program, pname, value);
        }
        
        public static unsafe delegate*<uint, ProgramParameterPName, int, void> _glProgramParameteriARB;
        
        public static unsafe void glProgramParameteriARB(uint program, ProgramParameterPName pname, int value)
        {
            _glProgramParameteriARB(program, pname, value);
        }
        
        public static unsafe delegate*<uint, ProgramParameterPName, int, void> _glProgramParameteriEXT;
        
        public static unsafe void glProgramParameteriEXT(uint program, ProgramParameterPName pname, int value)
        {
            _glProgramParameteriEXT(program, pname, value);
        }
        
        public static unsafe delegate*<VertexAttribEnumNV, uint, int, IntPtr, void> _glProgramParameters4dvNV;
        
        public static unsafe void glProgramParameters4dvNV(VertexAttribEnumNV target, uint index, int count, out IntPtr v)
        {
            _glProgramParameters4dvNV(target, index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<VertexAttribEnumNV, uint, int, IntPtr, void> _glProgramParameters4fvNV;
        
        public static unsafe void glProgramParameters4fvNV(VertexAttribEnumNV target, uint index, int count, out IntPtr v)
        {
            _glProgramParameters4fvNV(target, index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, uint, int, IntPtr, void> _glProgramPathFragmentInputGenNV;
        
        public static unsafe void glProgramPathFragmentInputGenNV(uint program, int location, uint genMode, int components, ref float coeffs)
        {
            _glProgramPathFragmentInputGenNV(program, location, genMode, components, (IntPtr)coeffs);
        }
        
        public static unsafe delegate*<ProgramTarget, ProgramFormat, int, IntPtr, void> _glProgramStringARB;
        
        public static unsafe void glProgramStringARB(ProgramTarget target, ProgramFormat format, int len, IntPtr @string)
        {
            _glProgramStringARB(target, format, len, (IntPtr)@string);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glProgramSubroutineParametersuivNV;
        
        public static unsafe void glProgramSubroutineParametersuivNV(uint target, int count, ref uint @params)
        {
            _glProgramSubroutineParametersuivNV(target, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, double, void> _glProgramUniform1d;
        
        public static unsafe void glProgramUniform1d(uint program, int location, double v0)
        {
            _glProgramUniform1d(program, location, v0);
        }
        
        public static unsafe delegate*<uint, int, double, void> _glProgramUniform1dEXT;
        
        public static unsafe void glProgramUniform1dEXT(uint program, int location, double x)
        {
            _glProgramUniform1dEXT(program, location, x);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1dv;
        
        public static unsafe void glProgramUniform1dv(uint program, int location, int count, ref double value)
        {
            _glProgramUniform1dv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1dvEXT;
        
        public static unsafe void glProgramUniform1dvEXT(uint program, int location, int count, ref double value)
        {
            _glProgramUniform1dvEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, float, void> _glProgramUniform1f;
        
        public static unsafe void glProgramUniform1f(uint program, int location, float v0)
        {
            _glProgramUniform1f(program, location, v0);
        }
        
        public static unsafe delegate*<uint, int, float, void> _glProgramUniform1fEXT;
        
        public static unsafe void glProgramUniform1fEXT(uint program, int location, float v0)
        {
            _glProgramUniform1fEXT(program, location, v0);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1fv;
        
        public static unsafe void glProgramUniform1fv(uint program, int location, int count, ref float value)
        {
            _glProgramUniform1fv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1fvEXT;
        
        public static unsafe void glProgramUniform1fvEXT(uint program, int location, int count, ref float value)
        {
            _glProgramUniform1fvEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, void> _glProgramUniform1i;
        
        public static unsafe void glProgramUniform1i(uint program, int location, int v0)
        {
            _glProgramUniform1i(program, location, v0);
        }
        
        public static unsafe delegate*<uint, int, long, void> _glProgramUniform1i64ARB;
        
        public static unsafe void glProgramUniform1i64ARB(uint program, int location, long x)
        {
            _glProgramUniform1i64ARB(program, location, x);
        }
        
        public static unsafe delegate*<uint, int, long, void> _glProgramUniform1i64NV;
        
        public static unsafe void glProgramUniform1i64NV(uint program, int location, long x)
        {
            _glProgramUniform1i64NV(program, location, x);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1i64vARB;
        
        public static unsafe void glProgramUniform1i64vARB(uint program, int location, int count, ref long value)
        {
            _glProgramUniform1i64vARB(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1i64vNV;
        
        public static unsafe void glProgramUniform1i64vNV(uint program, int location, int count, ref long value)
        {
            _glProgramUniform1i64vNV(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, void> _glProgramUniform1iEXT;
        
        public static unsafe void glProgramUniform1iEXT(uint program, int location, int v0)
        {
            _glProgramUniform1iEXT(program, location, v0);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1iv;
        
        public static unsafe void glProgramUniform1iv(uint program, int location, int count, ref int value)
        {
            _glProgramUniform1iv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1ivEXT;
        
        public static unsafe void glProgramUniform1ivEXT(uint program, int location, int count, ref int value)
        {
            _glProgramUniform1ivEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, uint, void> _glProgramUniform1ui;
        
        public static unsafe void glProgramUniform1ui(uint program, int location, uint v0)
        {
            _glProgramUniform1ui(program, location, v0);
        }
        
        public static unsafe delegate*<uint, int, ulong, void> _glProgramUniform1ui64ARB;
        
        public static unsafe void glProgramUniform1ui64ARB(uint program, int location, ulong x)
        {
            _glProgramUniform1ui64ARB(program, location, x);
        }
        
        public static unsafe delegate*<uint, int, ulong, void> _glProgramUniform1ui64NV;
        
        public static unsafe void glProgramUniform1ui64NV(uint program, int location, ulong x)
        {
            _glProgramUniform1ui64NV(program, location, x);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1ui64vARB;
        
        public static unsafe void glProgramUniform1ui64vARB(uint program, int location, int count, ref ulong value)
        {
            _glProgramUniform1ui64vARB(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1ui64vNV;
        
        public static unsafe void glProgramUniform1ui64vNV(uint program, int location, int count, ref ulong value)
        {
            _glProgramUniform1ui64vNV(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, uint, void> _glProgramUniform1uiEXT;
        
        public static unsafe void glProgramUniform1uiEXT(uint program, int location, uint v0)
        {
            _glProgramUniform1uiEXT(program, location, v0);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1uiv;
        
        public static unsafe void glProgramUniform1uiv(uint program, int location, int count, ref uint value)
        {
            _glProgramUniform1uiv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1uivEXT;
        
        public static unsafe void glProgramUniform1uivEXT(uint program, int location, int count, ref uint value)
        {
            _glProgramUniform1uivEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, double, double, void> _glProgramUniform2d;
        
        public static unsafe void glProgramUniform2d(uint program, int location, double v0, double v1)
        {
            _glProgramUniform2d(program, location, v0, v1);
        }
        
        public static unsafe delegate*<uint, int, double, double, void> _glProgramUniform2dEXT;
        
        public static unsafe void glProgramUniform2dEXT(uint program, int location, double x, double y)
        {
            _glProgramUniform2dEXT(program, location, x, y);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2dv;
        
        public static unsafe void glProgramUniform2dv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2dv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2dvEXT;
        
        public static unsafe void glProgramUniform2dvEXT(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2dvEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, float, float, void> _glProgramUniform2f;
        
        public static unsafe void glProgramUniform2f(uint program, int location, float v0, float v1)
        {
            _glProgramUniform2f(program, location, v0, v1);
        }
        
        public static unsafe delegate*<uint, int, float, float, void> _glProgramUniform2fEXT;
        
        public static unsafe void glProgramUniform2fEXT(uint program, int location, float v0, float v1)
        {
            _glProgramUniform2fEXT(program, location, v0, v1);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2fv;
        
        public static unsafe void glProgramUniform2fv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2fv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2fvEXT;
        
        public static unsafe void glProgramUniform2fvEXT(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2fvEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, int, void> _glProgramUniform2i;
        
        public static unsafe void glProgramUniform2i(uint program, int location, int v0, int v1)
        {
            _glProgramUniform2i(program, location, v0, v1);
        }
        
        public static unsafe delegate*<uint, int, long, long, void> _glProgramUniform2i64ARB;
        
        public static unsafe void glProgramUniform2i64ARB(uint program, int location, long x, long y)
        {
            _glProgramUniform2i64ARB(program, location, x, y);
        }
        
        public static unsafe delegate*<uint, int, long, long, void> _glProgramUniform2i64NV;
        
        public static unsafe void glProgramUniform2i64NV(uint program, int location, long x, long y)
        {
            _glProgramUniform2i64NV(program, location, x, y);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2i64vARB;
        
        public static unsafe void glProgramUniform2i64vARB(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2i64vARB(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2i64vNV;
        
        public static unsafe void glProgramUniform2i64vNV(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2i64vNV(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, int, void> _glProgramUniform2iEXT;
        
        public static unsafe void glProgramUniform2iEXT(uint program, int location, int v0, int v1)
        {
            _glProgramUniform2iEXT(program, location, v0, v1);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2iv;
        
        public static unsafe void glProgramUniform2iv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2iv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2ivEXT;
        
        public static unsafe void glProgramUniform2ivEXT(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2ivEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, uint, uint, void> _glProgramUniform2ui;
        
        public static unsafe void glProgramUniform2ui(uint program, int location, uint v0, uint v1)
        {
            _glProgramUniform2ui(program, location, v0, v1);
        }
        
        public static unsafe delegate*<uint, int, ulong, ulong, void> _glProgramUniform2ui64ARB;
        
        public static unsafe void glProgramUniform2ui64ARB(uint program, int location, ulong x, ulong y)
        {
            _glProgramUniform2ui64ARB(program, location, x, y);
        }
        
        public static unsafe delegate*<uint, int, ulong, ulong, void> _glProgramUniform2ui64NV;
        
        public static unsafe void glProgramUniform2ui64NV(uint program, int location, ulong x, ulong y)
        {
            _glProgramUniform2ui64NV(program, location, x, y);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2ui64vARB;
        
        public static unsafe void glProgramUniform2ui64vARB(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2ui64vARB(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2ui64vNV;
        
        public static unsafe void glProgramUniform2ui64vNV(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2ui64vNV(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, uint, uint, void> _glProgramUniform2uiEXT;
        
        public static unsafe void glProgramUniform2uiEXT(uint program, int location, uint v0, uint v1)
        {
            _glProgramUniform2uiEXT(program, location, v0, v1);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2uiv;
        
        public static unsafe void glProgramUniform2uiv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2uiv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2uivEXT;
        
        public static unsafe void glProgramUniform2uivEXT(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2uivEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, double, double, double, void> _glProgramUniform3d;
        
        public static unsafe void glProgramUniform3d(uint program, int location, double v0, double v1, double v2)
        {
            _glProgramUniform3d(program, location, v0, v1, v2);
        }
        
        public static unsafe delegate*<uint, int, double, double, double, void> _glProgramUniform3dEXT;
        
        public static unsafe void glProgramUniform3dEXT(uint program, int location, double x, double y, double z)
        {
            _glProgramUniform3dEXT(program, location, x, y, z);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3dv;
        
        public static unsafe void glProgramUniform3dv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3dv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3dvEXT;
        
        public static unsafe void glProgramUniform3dvEXT(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3dvEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, float, float, float, void> _glProgramUniform3f;
        
        public static unsafe void glProgramUniform3f(uint program, int location, float v0, float v1, float v2)
        {
            _glProgramUniform3f(program, location, v0, v1, v2);
        }
        
        public static unsafe delegate*<uint, int, float, float, float, void> _glProgramUniform3fEXT;
        
        public static unsafe void glProgramUniform3fEXT(uint program, int location, float v0, float v1, float v2)
        {
            _glProgramUniform3fEXT(program, location, v0, v1, v2);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3fv;
        
        public static unsafe void glProgramUniform3fv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3fv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3fvEXT;
        
        public static unsafe void glProgramUniform3fvEXT(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3fvEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, void> _glProgramUniform3i;
        
        public static unsafe void glProgramUniform3i(uint program, int location, int v0, int v1, int v2)
        {
            _glProgramUniform3i(program, location, v0, v1, v2);
        }
        
        public static unsafe delegate*<uint, int, long, long, long, void> _glProgramUniform3i64ARB;
        
        public static unsafe void glProgramUniform3i64ARB(uint program, int location, long x, long y, long z)
        {
            _glProgramUniform3i64ARB(program, location, x, y, z);
        }
        
        public static unsafe delegate*<uint, int, long, long, long, void> _glProgramUniform3i64NV;
        
        public static unsafe void glProgramUniform3i64NV(uint program, int location, long x, long y, long z)
        {
            _glProgramUniform3i64NV(program, location, x, y, z);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3i64vARB;
        
        public static unsafe void glProgramUniform3i64vARB(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3i64vARB(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3i64vNV;
        
        public static unsafe void glProgramUniform3i64vNV(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3i64vNV(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, void> _glProgramUniform3iEXT;
        
        public static unsafe void glProgramUniform3iEXT(uint program, int location, int v0, int v1, int v2)
        {
            _glProgramUniform3iEXT(program, location, v0, v1, v2);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3iv;
        
        public static unsafe void glProgramUniform3iv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3iv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3ivEXT;
        
        public static unsafe void glProgramUniform3ivEXT(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3ivEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, uint, uint, uint, void> _glProgramUniform3ui;
        
        public static unsafe void glProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2)
        {
            _glProgramUniform3ui(program, location, v0, v1, v2);
        }
        
        public static unsafe delegate*<uint, int, ulong, ulong, ulong, void> _glProgramUniform3ui64ARB;
        
        public static unsafe void glProgramUniform3ui64ARB(uint program, int location, ulong x, ulong y, ulong z)
        {
            _glProgramUniform3ui64ARB(program, location, x, y, z);
        }
        
        public static unsafe delegate*<uint, int, ulong, ulong, ulong, void> _glProgramUniform3ui64NV;
        
        public static unsafe void glProgramUniform3ui64NV(uint program, int location, ulong x, ulong y, ulong z)
        {
            _glProgramUniform3ui64NV(program, location, x, y, z);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3ui64vARB;
        
        public static unsafe void glProgramUniform3ui64vARB(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3ui64vARB(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3ui64vNV;
        
        public static unsafe void glProgramUniform3ui64vNV(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3ui64vNV(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, uint, uint, uint, void> _glProgramUniform3uiEXT;
        
        public static unsafe void glProgramUniform3uiEXT(uint program, int location, uint v0, uint v1, uint v2)
        {
            _glProgramUniform3uiEXT(program, location, v0, v1, v2);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3uiv;
        
        public static unsafe void glProgramUniform3uiv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3uiv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3uivEXT;
        
        public static unsafe void glProgramUniform3uivEXT(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3uivEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, double, double, double, double, void> _glProgramUniform4d;
        
        public static unsafe void glProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3)
        {
            _glProgramUniform4d(program, location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<uint, int, double, double, double, double, void> _glProgramUniform4dEXT;
        
        public static unsafe void glProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w)
        {
            _glProgramUniform4dEXT(program, location, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4dv;
        
        public static unsafe void glProgramUniform4dv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4dv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4dvEXT;
        
        public static unsafe void glProgramUniform4dvEXT(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4dvEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, float, float, float, float, void> _glProgramUniform4f;
        
        public static unsafe void glProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3)
        {
            _glProgramUniform4f(program, location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<uint, int, float, float, float, float, void> _glProgramUniform4fEXT;
        
        public static unsafe void glProgramUniform4fEXT(uint program, int location, float v0, float v1, float v2, float v3)
        {
            _glProgramUniform4fEXT(program, location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4fv;
        
        public static unsafe void glProgramUniform4fv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4fv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4fvEXT;
        
        public static unsafe void glProgramUniform4fvEXT(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4fvEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, void> _glProgramUniform4i;
        
        public static unsafe void glProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3)
        {
            _glProgramUniform4i(program, location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<uint, int, long, long, long, long, void> _glProgramUniform4i64ARB;
        
        public static unsafe void glProgramUniform4i64ARB(uint program, int location, long x, long y, long z, long w)
        {
            _glProgramUniform4i64ARB(program, location, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, int, long, long, long, long, void> _glProgramUniform4i64NV;
        
        public static unsafe void glProgramUniform4i64NV(uint program, int location, long x, long y, long z, long w)
        {
            _glProgramUniform4i64NV(program, location, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4i64vARB;
        
        public static unsafe void glProgramUniform4i64vARB(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4i64vARB(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4i64vNV;
        
        public static unsafe void glProgramUniform4i64vNV(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4i64vNV(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, void> _glProgramUniform4iEXT;
        
        public static unsafe void glProgramUniform4iEXT(uint program, int location, int v0, int v1, int v2, int v3)
        {
            _glProgramUniform4iEXT(program, location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4iv;
        
        public static unsafe void glProgramUniform4iv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4iv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4ivEXT;
        
        public static unsafe void glProgramUniform4ivEXT(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4ivEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, uint, uint, uint, uint, void> _glProgramUniform4ui;
        
        public static unsafe void glProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3)
        {
            _glProgramUniform4ui(program, location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<uint, int, ulong, ulong, ulong, ulong, void> _glProgramUniform4ui64ARB;
        
        public static unsafe void glProgramUniform4ui64ARB(uint program, int location, ulong x, ulong y, ulong z, ulong w)
        {
            _glProgramUniform4ui64ARB(program, location, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, int, ulong, ulong, ulong, ulong, void> _glProgramUniform4ui64NV;
        
        public static unsafe void glProgramUniform4ui64NV(uint program, int location, ulong x, ulong y, ulong z, ulong w)
        {
            _glProgramUniform4ui64NV(program, location, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4ui64vARB;
        
        public static unsafe void glProgramUniform4ui64vARB(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4ui64vARB(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4ui64vNV;
        
        public static unsafe void glProgramUniform4ui64vNV(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4ui64vNV(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, uint, uint, uint, uint, void> _glProgramUniform4uiEXT;
        
        public static unsafe void glProgramUniform4uiEXT(uint program, int location, uint v0, uint v1, uint v2, uint v3)
        {
            _glProgramUniform4uiEXT(program, location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4uiv;
        
        public static unsafe void glProgramUniform4uiv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4uiv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4uivEXT;
        
        public static unsafe void glProgramUniform4uivEXT(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4uivEXT(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, ulong, void> _glProgramUniformHandleui64ARB;
        
        public static unsafe void glProgramUniformHandleui64ARB(uint program, int location, ulong value)
        {
            _glProgramUniformHandleui64ARB(program, location, value);
        }
        
        public static unsafe delegate*<uint, int, ulong, void> _glProgramUniformHandleui64IMG;
        
        public static unsafe void glProgramUniformHandleui64IMG(uint program, int location, ulong value)
        {
            _glProgramUniformHandleui64IMG(program, location, value);
        }
        
        public static unsafe delegate*<uint, int, ulong, void> _glProgramUniformHandleui64NV;
        
        public static unsafe void glProgramUniformHandleui64NV(uint program, int location, ulong value)
        {
            _glProgramUniformHandleui64NV(program, location, value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniformHandleui64vARB;
        
        public static unsafe void glProgramUniformHandleui64vARB(uint program, int location, int count, ref ulong values)
        {
            _glProgramUniformHandleui64vARB(program, location, count, (IntPtr)values);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniformHandleui64vIMG;
        
        public static unsafe void glProgramUniformHandleui64vIMG(uint program, int location, int count, ref ulong values)
        {
            _glProgramUniformHandleui64vIMG(program, location, count, (IntPtr)values);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniformHandleui64vNV;
        
        public static unsafe void glProgramUniformHandleui64vNV(uint program, int location, int count, ref ulong values)
        {
            _glProgramUniformHandleui64vNV(program, location, count, (IntPtr)values);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2dv;
        
        public static unsafe void glProgramUniformMatrix2dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2dvEXT;
        
        public static unsafe void glProgramUniformMatrix2dvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2dvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2fv;
        
        public static unsafe void glProgramUniformMatrix2fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2fvEXT;
        
        public static unsafe void glProgramUniformMatrix2fvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2fvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2x3dv;
        
        public static unsafe void glProgramUniformMatrix2x3dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2x3dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2x3dvEXT;
        
        public static unsafe void glProgramUniformMatrix2x3dvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2x3dvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2x3fv;
        
        public static unsafe void glProgramUniformMatrix2x3fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2x3fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2x3fvEXT;
        
        public static unsafe void glProgramUniformMatrix2x3fvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2x3fvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2x4dv;
        
        public static unsafe void glProgramUniformMatrix2x4dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2x4dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2x4dvEXT;
        
        public static unsafe void glProgramUniformMatrix2x4dvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2x4dvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2x4fv;
        
        public static unsafe void glProgramUniformMatrix2x4fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2x4fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2x4fvEXT;
        
        public static unsafe void glProgramUniformMatrix2x4fvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2x4fvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3dv;
        
        public static unsafe void glProgramUniformMatrix3dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3dvEXT;
        
        public static unsafe void glProgramUniformMatrix3dvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3dvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3fv;
        
        public static unsafe void glProgramUniformMatrix3fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3fvEXT;
        
        public static unsafe void glProgramUniformMatrix3fvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3fvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3x2dv;
        
        public static unsafe void glProgramUniformMatrix3x2dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3x2dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3x2dvEXT;
        
        public static unsafe void glProgramUniformMatrix3x2dvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3x2dvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3x2fv;
        
        public static unsafe void glProgramUniformMatrix3x2fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3x2fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3x2fvEXT;
        
        public static unsafe void glProgramUniformMatrix3x2fvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3x2fvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3x4dv;
        
        public static unsafe void glProgramUniformMatrix3x4dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3x4dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3x4dvEXT;
        
        public static unsafe void glProgramUniformMatrix3x4dvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3x4dvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3x4fv;
        
        public static unsafe void glProgramUniformMatrix3x4fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3x4fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3x4fvEXT;
        
        public static unsafe void glProgramUniformMatrix3x4fvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3x4fvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4dv;
        
        public static unsafe void glProgramUniformMatrix4dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4dvEXT;
        
        public static unsafe void glProgramUniformMatrix4dvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4dvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4fv;
        
        public static unsafe void glProgramUniformMatrix4fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4fvEXT;
        
        public static unsafe void glProgramUniformMatrix4fvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4fvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4x2dv;
        
        public static unsafe void glProgramUniformMatrix4x2dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4x2dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4x2dvEXT;
        
        public static unsafe void glProgramUniformMatrix4x2dvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4x2dvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4x2fv;
        
        public static unsafe void glProgramUniformMatrix4x2fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4x2fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4x2fvEXT;
        
        public static unsafe void glProgramUniformMatrix4x2fvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4x2fvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4x3dv;
        
        public static unsafe void glProgramUniformMatrix4x3dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4x3dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4x3dvEXT;
        
        public static unsafe void glProgramUniformMatrix4x3dvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4x3dvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4x3fv;
        
        public static unsafe void glProgramUniformMatrix4x3fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4x3fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4x3fvEXT;
        
        public static unsafe void glProgramUniformMatrix4x3fvEXT(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4x3fvEXT(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, ulong, void> _glProgramUniformui64NV;
        
        public static unsafe void glProgramUniformui64NV(uint program, int location, ulong value)
        {
            _glProgramUniformui64NV(program, location, value);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniformui64vNV;
        
        public static unsafe void glProgramUniformui64vNV(uint program, int location, int count, ref ulong value)
        {
            _glProgramUniformui64vNV(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<ProgramTarget, int, void> _glProgramVertexLimitNV;
        
        public static unsafe void glProgramVertexLimitNV(ProgramTarget target, int limit)
        {
            _glProgramVertexLimitNV(target, limit);
        }
        
        public static unsafe delegate*<VertexProvokingMode, void> _glProvokingVertex;
        
        public static unsafe void glProvokingVertex(VertexProvokingMode mode)
        {
            _glProvokingVertex(mode);
        }
        
        public static unsafe delegate*<VertexProvokingMode, void> _glProvokingVertexEXT;
        
        public static unsafe void glProvokingVertexEXT(VertexProvokingMode mode)
        {
            _glProvokingVertexEXT(mode);
        }
        
        public static unsafe delegate*<uint, void> _glPushAttrib;
        
        public static unsafe void glPushAttrib(uint mask)
        {
            _glPushAttrib(mask);
        }
        
        public static unsafe delegate*<uint, void> _glPushClientAttrib;
        
        public static unsafe void glPushClientAttrib(uint mask)
        {
            _glPushClientAttrib(mask);
        }
        
        public static unsafe delegate*<uint, void> _glPushClientAttribDefaultEXT;
        
        public static unsafe void glPushClientAttribDefaultEXT(uint mask)
        {
            _glPushClientAttribDefaultEXT(mask);
        }
        
        public static unsafe delegate*<DebugSource, uint, int, IntPtr, void> _glPushDebugGroup;
        
        public static unsafe void glPushDebugGroup(DebugSource source, uint id, int length, ref sbyte message)
        {
            _glPushDebugGroup(source, id, length, (IntPtr)message);
        }
        
        public static unsafe delegate*<DebugSource, uint, int, IntPtr, void> _glPushDebugGroupKHR;
        
        public static unsafe void glPushDebugGroupKHR(DebugSource source, uint id, int length, ref sbyte message)
        {
            _glPushDebugGroupKHR(source, id, length, (IntPtr)message);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glPushGroupMarkerEXT;
        
        public static unsafe void glPushGroupMarkerEXT(int length, ref sbyte marker)
        {
            _glPushGroupMarkerEXT(length, (IntPtr)marker);
        }
        
        public static unsafe delegate*<void> _glPushMatrix;
        
        public static unsafe void glPushMatrix()
        {
            _glPushMatrix();
        }
        
        public static unsafe delegate*<uint, void> _glPushName;
        
        public static unsafe void glPushName(uint name)
        {
            _glPushName(name);
        }
        
        public static unsafe delegate*<uint, QueryCounterTarget, void> _glQueryCounter;
        
        public static unsafe void glQueryCounter(uint id, QueryCounterTarget target)
        {
            _glQueryCounter(id, target);
        }
        
        public static unsafe delegate*<uint, QueryCounterTarget, void> _glQueryCounterEXT;
        
        public static unsafe void glQueryCounterEXT(uint id, QueryCounterTarget target)
        {
            _glQueryCounterEXT(id, target);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, uint> _glQueryMatrixxOES;
        
        public static unsafe uint glQueryMatrixxOES(ref int mantissa, ref int exponent)
        {
            return _glQueryMatrixxOES((IntPtr)mantissa, (IntPtr)exponent);
        }
        
        public static unsafe delegate*<QueryTarget, uint, uint, uint, void> _glQueryObjectParameteruiAMD;
        
        public static unsafe void glQueryObjectParameteruiAMD(QueryTarget target, uint id, uint pname, uint param)
        {
            _glQueryObjectParameteruiAMD(target, id, pname, param);
        }
        
        public static unsafe delegate*<uint, int, uint, IntPtr, int> _glQueryResourceNV;
        
        public static unsafe int glQueryResourceNV(uint queryType, int tagId, uint count, ref int buffer)
        {
            return _glQueryResourceNV(queryType, tagId, count, (IntPtr)buffer);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glQueryResourceTagNV;
        
        public static unsafe void glQueryResourceTagNV(int tagId, ref sbyte tagString)
        {
            _glQueryResourceTagNV(tagId, (IntPtr)tagString);
        }
        
        public static unsafe delegate*<double, double, void> _glRasterPos2d;
        
        public static unsafe void glRasterPos2d(double x, double y)
        {
            _glRasterPos2d(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos2dv;
        
        public static unsafe void glRasterPos2dv(ref double v)
        {
            _glRasterPos2dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, void> _glRasterPos2f;
        
        public static unsafe void glRasterPos2f(float x, float y)
        {
            _glRasterPos2f(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos2fv;
        
        public static unsafe void glRasterPos2fv(ref float v)
        {
            _glRasterPos2fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, void> _glRasterPos2i;
        
        public static unsafe void glRasterPos2i(int x, int y)
        {
            _glRasterPos2i(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos2iv;
        
        public static unsafe void glRasterPos2iv(ref int v)
        {
            _glRasterPos2iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, void> _glRasterPos2s;
        
        public static unsafe void glRasterPos2s(short x, short y)
        {
            _glRasterPos2s(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos2sv;
        
        public static unsafe void glRasterPos2sv(ref short v)
        {
            _glRasterPos2sv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, void> _glRasterPos2xOES;
        
        public static unsafe void glRasterPos2xOES(int x, int y)
        {
            _glRasterPos2xOES(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos2xvOES;
        
        public static unsafe void glRasterPos2xvOES(ref int coords)
        {
            _glRasterPos2xvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<double, double, double, void> _glRasterPos3d;
        
        public static unsafe void glRasterPos3d(double x, double y, double z)
        {
            _glRasterPos3d(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos3dv;
        
        public static unsafe void glRasterPos3dv(ref double v)
        {
            _glRasterPos3dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glRasterPos3f;
        
        public static unsafe void glRasterPos3f(float x, float y, float z)
        {
            _glRasterPos3f(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos3fv;
        
        public static unsafe void glRasterPos3fv(ref float v)
        {
            _glRasterPos3fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glRasterPos3i;
        
        public static unsafe void glRasterPos3i(int x, int y, int z)
        {
            _glRasterPos3i(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos3iv;
        
        public static unsafe void glRasterPos3iv(ref int v)
        {
            _glRasterPos3iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glRasterPos3s;
        
        public static unsafe void glRasterPos3s(short x, short y, short z)
        {
            _glRasterPos3s(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos3sv;
        
        public static unsafe void glRasterPos3sv(ref short v)
        {
            _glRasterPos3sv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glRasterPos3xOES;
        
        public static unsafe void glRasterPos3xOES(int x, int y, int z)
        {
            _glRasterPos3xOES(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos3xvOES;
        
        public static unsafe void glRasterPos3xvOES(ref int coords)
        {
            _glRasterPos3xvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<double, double, double, double, void> _glRasterPos4d;
        
        public static unsafe void glRasterPos4d(double x, double y, double z, double w)
        {
            _glRasterPos4d(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos4dv;
        
        public static unsafe void glRasterPos4dv(ref double v)
        {
            _glRasterPos4dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glRasterPos4f;
        
        public static unsafe void glRasterPos4f(float x, float y, float z, float w)
        {
            _glRasterPos4f(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos4fv;
        
        public static unsafe void glRasterPos4fv(ref float v)
        {
            _glRasterPos4fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glRasterPos4i;
        
        public static unsafe void glRasterPos4i(int x, int y, int z, int w)
        {
            _glRasterPos4i(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos4iv;
        
        public static unsafe void glRasterPos4iv(ref int v)
        {
            _glRasterPos4iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, short, void> _glRasterPos4s;
        
        public static unsafe void glRasterPos4s(short x, short y, short z, short w)
        {
            _glRasterPos4s(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos4sv;
        
        public static unsafe void glRasterPos4sv(ref short v)
        {
            _glRasterPos4sv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glRasterPos4xOES;
        
        public static unsafe void glRasterPos4xOES(int x, int y, int z, int w)
        {
            _glRasterPos4xOES(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos4xvOES;
        
        public static unsafe void glRasterPos4xvOES(ref int coords)
        {
            _glRasterPos4xvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<uint, byte, void> _glRasterSamplesEXT;
        
        public static unsafe void glRasterSamplesEXT(uint samples, byte fixedsamplelocations)
        {
            _glRasterSamplesEXT(samples, fixedsamplelocations);
        }
        
        public static unsafe delegate*<ReadBufferMode, void> _glReadBuffer;
        
        public static unsafe void glReadBuffer(ReadBufferMode src)
        {
            _glReadBuffer(src);
        }
        
        public static unsafe delegate*<ReadBufferMode, int, void> _glReadBufferIndexedEXT;
        
        public static unsafe void glReadBufferIndexedEXT(ReadBufferMode src, int index)
        {
            _glReadBufferIndexedEXT(src, index);
        }
        
        public static unsafe delegate*<uint, void> _glReadBufferNV;
        
        public static unsafe void glReadBufferNV(uint mode)
        {
            _glReadBufferNV(mode);
        }
        
        public static unsafe delegate*<int, void> _glReadInstrumentsSGIX;
        
        public static unsafe void glReadInstrumentsSGIX(int marker)
        {
            _glReadInstrumentsSGIX(marker);
        }
        
        public static unsafe delegate*<int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glReadPixels;
        
        public static unsafe void glReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glReadPixels(x, y, width, height, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<int, int, int, int, PixelFormat, PixelType, int, IntPtr, void> _glReadnPixels;
        
        public static unsafe void glReadnPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
        {
            _glReadnPixels(x, y, width, height, format, type, bufSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<int, int, int, int, PixelFormat, PixelType, int, IntPtr, void> _glReadnPixelsARB;
        
        public static unsafe void glReadnPixelsARB(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
        {
            _glReadnPixelsARB(x, y, width, height, format, type, bufSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<int, int, int, int, PixelFormat, PixelType, int, IntPtr, void> _glReadnPixelsEXT;
        
        public static unsafe void glReadnPixelsEXT(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
        {
            _glReadnPixelsEXT(x, y, width, height, format, type, bufSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<int, int, int, int, PixelFormat, PixelType, int, IntPtr, void> _glReadnPixelsKHR;
        
        public static unsafe void glReadnPixelsKHR(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
        {
            _glReadnPixelsKHR(x, y, width, height, format, type, bufSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, ulong, byte> _glReleaseKeyedMutexWin32EXT;
        
        public static unsafe byte glReleaseKeyedMutexWin32EXT(uint memory, ulong key)
        {
            return _glReleaseKeyedMutexWin32EXT(memory, key);
        }
        
        public static unsafe delegate*<double, double, double, double, void> _glRectd;
        
        public static unsafe void glRectd(double x1, double y1, double x2, double y2)
        {
            _glRectd(x1, y1, x2, y2);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glRectdv;
        
        public static unsafe void glRectdv(ref double v1, ref double v2)
        {
            _glRectdv((IntPtr)v1, (IntPtr)v2);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glRectf;
        
        public static unsafe void glRectf(float x1, float y1, float x2, float y2)
        {
            _glRectf(x1, y1, x2, y2);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glRectfv;
        
        public static unsafe void glRectfv(ref float v1, ref float v2)
        {
            _glRectfv((IntPtr)v1, (IntPtr)v2);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glRecti;
        
        public static unsafe void glRecti(int x1, int y1, int x2, int y2)
        {
            _glRecti(x1, y1, x2, y2);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glRectiv;
        
        public static unsafe void glRectiv(ref int v1, ref int v2)
        {
            _glRectiv((IntPtr)v1, (IntPtr)v2);
        }
        
        public static unsafe delegate*<short, short, short, short, void> _glRects;
        
        public static unsafe void glRects(short x1, short y1, short x2, short y2)
        {
            _glRects(x1, y1, x2, y2);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glRectsv;
        
        public static unsafe void glRectsv(ref short v1, ref short v2)
        {
            _glRectsv((IntPtr)v1, (IntPtr)v2);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glRectxOES;
        
        public static unsafe void glRectxOES(int x1, int y1, int x2, int y2)
        {
            _glRectxOES(x1, y1, x2, y2);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glRectxvOES;
        
        public static unsafe void glRectxvOES(ref int v1, ref int v2)
        {
            _glRectxvOES((IntPtr)v1, (IntPtr)v2);
        }
        
        public static unsafe delegate*<IntPtr, void> _glReferencePlaneSGIX;
        
        public static unsafe void glReferencePlaneSGIX(ref double equation)
        {
            _glReferencePlaneSGIX((IntPtr)equation);
        }
        
        public static unsafe delegate*<void> _glReleaseShaderCompiler;
        
        public static unsafe void glReleaseShaderCompiler()
        {
            _glReleaseShaderCompiler();
        }
        
        public static unsafe delegate*<uint, void> _glRenderGpuMaskNV;
        
        public static unsafe void glRenderGpuMaskNV(uint mask)
        {
            _glRenderGpuMaskNV(mask);
        }
        
        public static unsafe delegate*<RenderingMode, int> _glRenderMode;
        
        public static unsafe int glRenderMode(RenderingMode mode)
        {
            return _glRenderMode(mode);
        }
        
        public static unsafe delegate*<RenderbufferTarget, InternalFormat, int, int, void> _glRenderbufferStorage;
        
        public static unsafe void glRenderbufferStorage(RenderbufferTarget target, InternalFormat internalformat, int width, int height)
        {
            _glRenderbufferStorage(target, internalformat, width, height);
        }
        
        public static unsafe delegate*<RenderbufferTarget, InternalFormat, int, int, void> _glRenderbufferStorageEXT;
        
        public static unsafe void glRenderbufferStorageEXT(RenderbufferTarget target, InternalFormat internalformat, int width, int height)
        {
            _glRenderbufferStorageEXT(target, internalformat, width, height);
        }
        
        public static unsafe delegate*<RenderbufferTarget, int, InternalFormat, int, int, void> _glRenderbufferStorageMultisample;
        
        public static unsafe void glRenderbufferStorageMultisample(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
        }
        
        public static unsafe delegate*<RenderbufferTarget, int, InternalFormat, int, int, void> _glRenderbufferStorageMultisampleANGLE;
        
        public static unsafe void glRenderbufferStorageMultisampleANGLE(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height);
        }
        
        public static unsafe delegate*<RenderbufferTarget, int, InternalFormat, int, int, void> _glRenderbufferStorageMultisampleAPPLE;
        
        public static unsafe void glRenderbufferStorageMultisampleAPPLE(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height);
        }
        
        public static unsafe delegate*<RenderbufferTarget, int, int, InternalFormat, int, int, void> _glRenderbufferStorageMultisampleAdvancedAMD;
        
        public static unsafe void glRenderbufferStorageMultisampleAdvancedAMD(RenderbufferTarget target, int samples, int storageSamples, InternalFormat internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisampleAdvancedAMD(target, samples, storageSamples, internalformat, width, height);
        }
        
        public static unsafe delegate*<RenderbufferTarget, int, int, InternalFormat, int, int, void> _glRenderbufferStorageMultisampleCoverageNV;
        
        public static unsafe void glRenderbufferStorageMultisampleCoverageNV(RenderbufferTarget target, int coverageSamples, int colorSamples, InternalFormat internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
        }
        
        public static unsafe delegate*<RenderbufferTarget, int, InternalFormat, int, int, void> _glRenderbufferStorageMultisampleEXT;
        
        public static unsafe void glRenderbufferStorageMultisampleEXT(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
        }
        
        public static unsafe delegate*<RenderbufferTarget, int, InternalFormat, int, int, void> _glRenderbufferStorageMultisampleIMG;
        
        public static unsafe void glRenderbufferStorageMultisampleIMG(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height);
        }
        
        public static unsafe delegate*<RenderbufferTarget, int, InternalFormat, int, int, void> _glRenderbufferStorageMultisampleNV;
        
        public static unsafe void glRenderbufferStorageMultisampleNV(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisampleNV(target, samples, internalformat, width, height);
        }
        
        public static unsafe delegate*<RenderbufferTarget, InternalFormat, int, int, void> _glRenderbufferStorageOES;
        
        public static unsafe void glRenderbufferStorageOES(RenderbufferTarget target, InternalFormat internalformat, int width, int height)
        {
            _glRenderbufferStorageOES(target, internalformat, width, height);
        }
        
        public static unsafe delegate*<ReplacementCodeTypeSUN, int, IntPtr, void> _glReplacementCodePointerSUN;
        
        public static unsafe void glReplacementCodePointerSUN(ReplacementCodeTypeSUN type, int stride, out IntPtr pointer)
        {
            _glReplacementCodePointerSUN(type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<byte, void> _glReplacementCodeubSUN;
        
        public static unsafe void glReplacementCodeubSUN(byte code)
        {
            _glReplacementCodeubSUN(code);
        }
        
        public static unsafe delegate*<IntPtr, void> _glReplacementCodeubvSUN;
        
        public static unsafe void glReplacementCodeubvSUN(ref byte code)
        {
            _glReplacementCodeubvSUN((IntPtr)code);
        }
        
        public static unsafe delegate*<uint, float, float, float, float, float, float, void> _glReplacementCodeuiColor3fVertex3fSUN;
        
        public static unsafe void glReplacementCodeuiColor3fVertex3fSUN(uint rc, float r, float g, float b, float x, float y, float z)
        {
            _glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, void> _glReplacementCodeuiColor3fVertex3fvSUN;
        
        public static unsafe void glReplacementCodeuiColor3fVertex3fvSUN(ref uint rc, ref float c, ref float v)
        {
            _glReplacementCodeuiColor3fVertex3fvSUN((IntPtr)rc, (IntPtr)c, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, float, float, float, float, float, float, float, float, float, void> _glReplacementCodeuiColor4fNormal3fVertex3fSUN;
        
        public static unsafe void glReplacementCodeuiColor4fNormal3fVertex3fSUN(uint rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            _glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, IntPtr, void> _glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
        
        public static unsafe void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref uint rc, ref float c, ref float n, ref float v)
        {
            _glReplacementCodeuiColor4fNormal3fVertex3fvSUN((IntPtr)rc, (IntPtr)c, (IntPtr)n, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, byte, byte, byte, byte, float, float, float, void> _glReplacementCodeuiColor4ubVertex3fSUN;
        
        public static unsafe void glReplacementCodeuiColor4ubVertex3fSUN(uint rc, byte r, byte g, byte b, byte a, float x, float y, float z)
        {
            _glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, void> _glReplacementCodeuiColor4ubVertex3fvSUN;
        
        public static unsafe void glReplacementCodeuiColor4ubVertex3fvSUN(ref uint rc, ref byte c, ref float v)
        {
            _glReplacementCodeuiColor4ubVertex3fvSUN((IntPtr)rc, (IntPtr)c, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, float, float, float, float, float, void> _glReplacementCodeuiNormal3fVertex3fSUN;
        
        public static unsafe void glReplacementCodeuiNormal3fVertex3fSUN(uint rc, float nx, float ny, float nz, float x, float y, float z)
        {
            _glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, void> _glReplacementCodeuiNormal3fVertex3fvSUN;
        
        public static unsafe void glReplacementCodeuiNormal3fVertex3fvSUN(ref uint rc, ref float n, ref float v)
        {
            _glReplacementCodeuiNormal3fVertex3fvSUN((IntPtr)rc, (IntPtr)n, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, void> _glReplacementCodeuiSUN;
        
        public static unsafe void glReplacementCodeuiSUN(uint code)
        {
            _glReplacementCodeuiSUN(code);
        }
        
        public static unsafe delegate*<uint, float, float, float, float, float, float, float, float, float, float, float, float, void> _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
        
        public static unsafe void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(uint rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, void> _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
        
        public static unsafe void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref uint rc, ref float tc, ref float c, ref float n, ref float v)
        {
            _glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN((IntPtr)rc, (IntPtr)tc, (IntPtr)c, (IntPtr)n, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, float, float, float, float, float, float, float, void> _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
        
        public static unsafe void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(uint rc, float s, float t, float nx, float ny, float nz, float x, float y, float z)
        {
            _glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, IntPtr, void> _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
        
        public static unsafe void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref uint rc, ref float tc, ref float n, ref float v)
        {
            _glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN((IntPtr)rc, (IntPtr)tc, (IntPtr)n, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, float, float, float, float, void> _glReplacementCodeuiTexCoord2fVertex3fSUN;
        
        public static unsafe void glReplacementCodeuiTexCoord2fVertex3fSUN(uint rc, float s, float t, float x, float y, float z)
        {
            _glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, void> _glReplacementCodeuiTexCoord2fVertex3fvSUN;
        
        public static unsafe void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref uint rc, ref float tc, ref float v)
        {
            _glReplacementCodeuiTexCoord2fVertex3fvSUN((IntPtr)rc, (IntPtr)tc, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, float, float, void> _glReplacementCodeuiVertex3fSUN;
        
        public static unsafe void glReplacementCodeuiVertex3fSUN(uint rc, float x, float y, float z)
        {
            _glReplacementCodeuiVertex3fSUN(rc, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glReplacementCodeuiVertex3fvSUN;
        
        public static unsafe void glReplacementCodeuiVertex3fvSUN(ref uint rc, ref float v)
        {
            _glReplacementCodeuiVertex3fvSUN((IntPtr)rc, (IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glReplacementCodeuivSUN;
        
        public static unsafe void glReplacementCodeuivSUN(ref uint code)
        {
            _glReplacementCodeuivSUN((IntPtr)code);
        }
        
        public static unsafe delegate*<ushort, void> _glReplacementCodeusSUN;
        
        public static unsafe void glReplacementCodeusSUN(ushort code)
        {
            _glReplacementCodeusSUN(code);
        }
        
        public static unsafe delegate*<IntPtr, void> _glReplacementCodeusvSUN;
        
        public static unsafe void glReplacementCodeusvSUN(ref ushort code)
        {
            _glReplacementCodeusvSUN((IntPtr)code);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glRequestResidentProgramsNV;
        
        public static unsafe void glRequestResidentProgramsNV(int n, ref uint programs)
        {
            _glRequestResidentProgramsNV(n, (IntPtr)programs);
        }
        
        public static unsafe delegate*<HistogramTargetEXT, void> _glResetHistogram;
        
        public static unsafe void glResetHistogram(HistogramTargetEXT target)
        {
            _glResetHistogram(target);
        }
        
        public static unsafe delegate*<HistogramTargetEXT, void> _glResetHistogramEXT;
        
        public static unsafe void glResetHistogramEXT(HistogramTargetEXT target)
        {
            _glResetHistogramEXT(target);
        }
        
        public static unsafe delegate*<uint, uint, void> _glResetMemoryObjectParameterNV;
        
        public static unsafe void glResetMemoryObjectParameterNV(uint memory, uint pname)
        {
            _glResetMemoryObjectParameterNV(memory, pname);
        }
        
        public static unsafe delegate*<MinmaxTargetEXT, void> _glResetMinmax;
        
        public static unsafe void glResetMinmax(MinmaxTargetEXT target)
        {
            _glResetMinmax(target);
        }
        
        public static unsafe delegate*<MinmaxTargetEXT, void> _glResetMinmaxEXT;
        
        public static unsafe void glResetMinmaxEXT(MinmaxTargetEXT target)
        {
            _glResetMinmaxEXT(target);
        }
        
        public static unsafe delegate*<void> _glResizeBuffersMESA;
        
        public static unsafe void glResizeBuffersMESA()
        {
            _glResizeBuffersMESA();
        }
        
        public static unsafe delegate*<void> _glResolveDepthValuesNV;
        
        public static unsafe void glResolveDepthValuesNV()
        {
            _glResolveDepthValuesNV();
        }
        
        public static unsafe delegate*<void> _glResolveMultisampleFramebufferAPPLE;
        
        public static unsafe void glResolveMultisampleFramebufferAPPLE()
        {
            _glResolveMultisampleFramebufferAPPLE();
        }
        
        public static unsafe delegate*<void> _glResumeTransformFeedback;
        
        public static unsafe void glResumeTransformFeedback()
        {
            _glResumeTransformFeedback();
        }
        
        public static unsafe delegate*<void> _glResumeTransformFeedbackNV;
        
        public static unsafe void glResumeTransformFeedbackNV()
        {
            _glResumeTransformFeedbackNV();
        }
        
        public static unsafe delegate*<double, double, double, double, void> _glRotated;
        
        public static unsafe void glRotated(double angle, double x, double y, double z)
        {
            _glRotated(angle, x, y, z);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glRotatef;
        
        public static unsafe void glRotatef(float angle, float x, float y, float z)
        {
            _glRotatef(angle, x, y, z);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glRotatex;
        
        public static unsafe void glRotatex(int angle, int x, int y, int z)
        {
            _glRotatex(angle, x, y, z);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glRotatexOES;
        
        public static unsafe void glRotatexOES(int angle, int x, int y, int z)
        {
            _glRotatexOES(angle, x, y, z);
        }
        
        public static unsafe delegate*<float, byte, void> _glSampleCoverage;
        
        public static unsafe void glSampleCoverage(float value, byte invert)
        {
            _glSampleCoverage(value, invert);
        }
        
        public static unsafe delegate*<float, byte, void> _glSampleCoverageARB;
        
        public static unsafe void glSampleCoverageARB(float value, byte invert)
        {
            _glSampleCoverageARB(value, invert);
        }
        
        public static unsafe delegate*<int, byte, void> _glSampleCoveragex;
        
        public static unsafe void glSampleCoveragex(int value, byte invert)
        {
            _glSampleCoveragex(value, invert);
        }
        
        public static unsafe delegate*<int, byte, void> _glSampleCoveragexOES;
        
        public static unsafe void glSampleCoveragexOES(int value, byte invert)
        {
            _glSampleCoveragexOES(value, invert);
        }
        
        public static unsafe delegate*<uint, uint, SwizzleOpATI, void> _glSampleMapATI;
        
        public static unsafe void glSampleMapATI(uint dst, uint interp, SwizzleOpATI swizzle)
        {
            _glSampleMapATI(dst, interp, swizzle);
        }
        
        public static unsafe delegate*<float, byte, void> _glSampleMaskEXT;
        
        public static unsafe void glSampleMaskEXT(float value, byte invert)
        {
            _glSampleMaskEXT(value, invert);
        }
        
        public static unsafe delegate*<uint, uint, void> _glSampleMaskIndexedNV;
        
        public static unsafe void glSampleMaskIndexedNV(uint index, uint mask)
        {
            _glSampleMaskIndexedNV(index, mask);
        }
        
        public static unsafe delegate*<float, byte, void> _glSampleMaskSGIS;
        
        public static unsafe void glSampleMaskSGIS(float value, byte invert)
        {
            _glSampleMaskSGIS(value, invert);
        }
        
        public static unsafe delegate*<uint, uint, void> _glSampleMaski;
        
        public static unsafe void glSampleMaski(uint maskNumber, uint mask)
        {
            _glSampleMaski(maskNumber, mask);
        }
        
        public static unsafe delegate*<SamplePatternEXT, void> _glSamplePatternEXT;
        
        public static unsafe void glSamplePatternEXT(SamplePatternEXT pattern)
        {
            _glSamplePatternEXT(pattern);
        }
        
        public static unsafe delegate*<SamplePatternSGIS, void> _glSamplePatternSGIS;
        
        public static unsafe void glSamplePatternSGIS(SamplePatternSGIS pattern)
        {
            _glSamplePatternSGIS(pattern);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glSamplerParameterIiv;
        
        public static unsafe void glSamplerParameterIiv(uint sampler, SamplerParameterI pname, ref int param)
        {
            _glSamplerParameterIiv(sampler, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glSamplerParameterIivEXT;
        
        public static unsafe void glSamplerParameterIivEXT(uint sampler, SamplerParameterI pname, ref int param)
        {
            _glSamplerParameterIivEXT(sampler, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glSamplerParameterIivOES;
        
        public static unsafe void glSamplerParameterIivOES(uint sampler, SamplerParameterI pname, ref int param)
        {
            _glSamplerParameterIivOES(sampler, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glSamplerParameterIuiv;
        
        public static unsafe void glSamplerParameterIuiv(uint sampler, SamplerParameterI pname, ref uint param)
        {
            _glSamplerParameterIuiv(sampler, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glSamplerParameterIuivEXT;
        
        public static unsafe void glSamplerParameterIuivEXT(uint sampler, SamplerParameterI pname, ref uint param)
        {
            _glSamplerParameterIuivEXT(sampler, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glSamplerParameterIuivOES;
        
        public static unsafe void glSamplerParameterIuivOES(uint sampler, SamplerParameterI pname, ref uint param)
        {
            _glSamplerParameterIuivOES(sampler, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, SamplerParameterF, float, void> _glSamplerParameterf;
        
        public static unsafe void glSamplerParameterf(uint sampler, SamplerParameterF pname, float param)
        {
            _glSamplerParameterf(sampler, pname, param);
        }
        
        public static unsafe delegate*<uint, SamplerParameterF, IntPtr, void> _glSamplerParameterfv;
        
        public static unsafe void glSamplerParameterfv(uint sampler, SamplerParameterF pname, ref float param)
        {
            _glSamplerParameterfv(sampler, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, int, void> _glSamplerParameteri;
        
        public static unsafe void glSamplerParameteri(uint sampler, SamplerParameterI pname, int param)
        {
            _glSamplerParameteri(sampler, pname, param);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glSamplerParameteriv;
        
        public static unsafe void glSamplerParameteriv(uint sampler, SamplerParameterI pname, ref int param)
        {
            _glSamplerParameteriv(sampler, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<double, double, double, void> _glScaled;
        
        public static unsafe void glScaled(double x, double y, double z)
        {
            _glScaled(x, y, z);
        }
        
        public static unsafe delegate*<float, float, float, void> _glScalef;
        
        public static unsafe void glScalef(float x, float y, float z)
        {
            _glScalef(x, y, z);
        }
        
        public static unsafe delegate*<int, int, int, void> _glScalex;
        
        public static unsafe void glScalex(int x, int y, int z)
        {
            _glScalex(x, y, z);
        }
        
        public static unsafe delegate*<int, int, int, void> _glScalexOES;
        
        public static unsafe void glScalexOES(int x, int y, int z)
        {
            _glScalexOES(x, y, z);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glScissor;
        
        public static unsafe void glScissor(int x, int y, int width, int height)
        {
            _glScissor(x, y, width, height);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glScissorArrayv;
        
        public static unsafe void glScissorArrayv(uint first, int count, ref int v)
        {
            _glScissorArrayv(first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glScissorArrayvNV;
        
        public static unsafe void glScissorArrayvNV(uint first, int count, ref int v)
        {
            _glScissorArrayvNV(first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glScissorArrayvOES;
        
        public static unsafe void glScissorArrayvOES(uint first, int count, ref int v)
        {
            _glScissorArrayvOES(first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glScissorExclusiveArrayvNV;
        
        public static unsafe void glScissorExclusiveArrayvNV(uint first, int count, ref int v)
        {
            _glScissorExclusiveArrayvNV(first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glScissorExclusiveNV;
        
        public static unsafe void glScissorExclusiveNV(int x, int y, int width, int height)
        {
            _glScissorExclusiveNV(x, y, width, height);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, void> _glScissorIndexed;
        
        public static unsafe void glScissorIndexed(uint index, int left, int bottom, int width, int height)
        {
            _glScissorIndexed(index, left, bottom, width, height);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, void> _glScissorIndexedNV;
        
        public static unsafe void glScissorIndexedNV(uint index, int left, int bottom, int width, int height)
        {
            _glScissorIndexedNV(index, left, bottom, width, height);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, void> _glScissorIndexedOES;
        
        public static unsafe void glScissorIndexedOES(uint index, int left, int bottom, int width, int height)
        {
            _glScissorIndexedOES(index, left, bottom, width, height);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glScissorIndexedv;
        
        public static unsafe void glScissorIndexedv(uint index, ref int v)
        {
            _glScissorIndexedv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glScissorIndexedvNV;
        
        public static unsafe void glScissorIndexedvNV(uint index, ref int v)
        {
            _glScissorIndexedvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glScissorIndexedvOES;
        
        public static unsafe void glScissorIndexedvOES(uint index, ref int v)
        {
            _glScissorIndexedvOES(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, void> _glSecondaryColor3b;
        
        public static unsafe void glSecondaryColor3b(sbyte red, sbyte green, sbyte blue)
        {
            _glSecondaryColor3b(red, green, blue);
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, void> _glSecondaryColor3bEXT;
        
        public static unsafe void glSecondaryColor3bEXT(sbyte red, sbyte green, sbyte blue)
        {
            _glSecondaryColor3bEXT(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3bv;
        
        public static unsafe void glSecondaryColor3bv(ref sbyte v)
        {
            _glSecondaryColor3bv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3bvEXT;
        
        public static unsafe void glSecondaryColor3bvEXT(ref sbyte v)
        {
            _glSecondaryColor3bvEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, void> _glSecondaryColor3d;
        
        public static unsafe void glSecondaryColor3d(double red, double green, double blue)
        {
            _glSecondaryColor3d(red, green, blue);
        }
        
        public static unsafe delegate*<double, double, double, void> _glSecondaryColor3dEXT;
        
        public static unsafe void glSecondaryColor3dEXT(double red, double green, double blue)
        {
            _glSecondaryColor3dEXT(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3dv;
        
        public static unsafe void glSecondaryColor3dv(ref double v)
        {
            _glSecondaryColor3dv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3dvEXT;
        
        public static unsafe void glSecondaryColor3dvEXT(ref double v)
        {
            _glSecondaryColor3dvEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glSecondaryColor3f;
        
        public static unsafe void glSecondaryColor3f(float red, float green, float blue)
        {
            _glSecondaryColor3f(red, green, blue);
        }
        
        public static unsafe delegate*<float, float, float, void> _glSecondaryColor3fEXT;
        
        public static unsafe void glSecondaryColor3fEXT(float red, float green, float blue)
        {
            _glSecondaryColor3fEXT(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3fv;
        
        public static unsafe void glSecondaryColor3fv(ref float v)
        {
            _glSecondaryColor3fv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3fvEXT;
        
        public static unsafe void glSecondaryColor3fvEXT(ref float v)
        {
            _glSecondaryColor3fvEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, void> _glSecondaryColor3hNV;
        
        public static unsafe void glSecondaryColor3hNV(ushort red, ushort green, ushort blue)
        {
            _glSecondaryColor3hNV(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3hvNV;
        
        public static unsafe void glSecondaryColor3hvNV(ref ushort v)
        {
            _glSecondaryColor3hvNV((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glSecondaryColor3i;
        
        public static unsafe void glSecondaryColor3i(int red, int green, int blue)
        {
            _glSecondaryColor3i(red, green, blue);
        }
        
        public static unsafe delegate*<int, int, int, void> _glSecondaryColor3iEXT;
        
        public static unsafe void glSecondaryColor3iEXT(int red, int green, int blue)
        {
            _glSecondaryColor3iEXT(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3iv;
        
        public static unsafe void glSecondaryColor3iv(ref int v)
        {
            _glSecondaryColor3iv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3ivEXT;
        
        public static unsafe void glSecondaryColor3ivEXT(ref int v)
        {
            _glSecondaryColor3ivEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glSecondaryColor3s;
        
        public static unsafe void glSecondaryColor3s(short red, short green, short blue)
        {
            _glSecondaryColor3s(red, green, blue);
        }
        
        public static unsafe delegate*<short, short, short, void> _glSecondaryColor3sEXT;
        
        public static unsafe void glSecondaryColor3sEXT(short red, short green, short blue)
        {
            _glSecondaryColor3sEXT(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3sv;
        
        public static unsafe void glSecondaryColor3sv(ref short v)
        {
            _glSecondaryColor3sv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3svEXT;
        
        public static unsafe void glSecondaryColor3svEXT(ref short v)
        {
            _glSecondaryColor3svEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<byte, byte, byte, void> _glSecondaryColor3ub;
        
        public static unsafe void glSecondaryColor3ub(byte red, byte green, byte blue)
        {
            _glSecondaryColor3ub(red, green, blue);
        }
        
        public static unsafe delegate*<byte, byte, byte, void> _glSecondaryColor3ubEXT;
        
        public static unsafe void glSecondaryColor3ubEXT(byte red, byte green, byte blue)
        {
            _glSecondaryColor3ubEXT(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3ubv;
        
        public static unsafe void glSecondaryColor3ubv(ref byte v)
        {
            _glSecondaryColor3ubv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3ubvEXT;
        
        public static unsafe void glSecondaryColor3ubvEXT(ref byte v)
        {
            _glSecondaryColor3ubvEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glSecondaryColor3ui;
        
        public static unsafe void glSecondaryColor3ui(uint red, uint green, uint blue)
        {
            _glSecondaryColor3ui(red, green, blue);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glSecondaryColor3uiEXT;
        
        public static unsafe void glSecondaryColor3uiEXT(uint red, uint green, uint blue)
        {
            _glSecondaryColor3uiEXT(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3uiv;
        
        public static unsafe void glSecondaryColor3uiv(ref uint v)
        {
            _glSecondaryColor3uiv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3uivEXT;
        
        public static unsafe void glSecondaryColor3uivEXT(ref uint v)
        {
            _glSecondaryColor3uivEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, void> _glSecondaryColor3us;
        
        public static unsafe void glSecondaryColor3us(ushort red, ushort green, ushort blue)
        {
            _glSecondaryColor3us(red, green, blue);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, void> _glSecondaryColor3usEXT;
        
        public static unsafe void glSecondaryColor3usEXT(ushort red, ushort green, ushort blue)
        {
            _glSecondaryColor3usEXT(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3usv;
        
        public static unsafe void glSecondaryColor3usv(ref ushort v)
        {
            _glSecondaryColor3usv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3usvEXT;
        
        public static unsafe void glSecondaryColor3usvEXT(ref ushort v)
        {
            _glSecondaryColor3usvEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<int, ColorPointerType, int, void> _glSecondaryColorFormatNV;
        
        public static unsafe void glSecondaryColorFormatNV(int size, ColorPointerType type, int stride)
        {
            _glSecondaryColorFormatNV(size, type, stride);
        }
        
        public static unsafe delegate*<ColorPointerType, uint, void> _glSecondaryColorP3ui;
        
        public static unsafe void glSecondaryColorP3ui(ColorPointerType type, uint color)
        {
            _glSecondaryColorP3ui(type, color);
        }
        
        public static unsafe delegate*<ColorPointerType, IntPtr, void> _glSecondaryColorP3uiv;
        
        public static unsafe void glSecondaryColorP3uiv(ColorPointerType type, ref uint color)
        {
            _glSecondaryColorP3uiv(type, (IntPtr)color);
        }
        
        public static unsafe delegate*<int, ColorPointerType, int, IntPtr, void> _glSecondaryColorPointer;
        
        public static unsafe void glSecondaryColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
        {
            _glSecondaryColorPointer(size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, ColorPointerType, int, IntPtr, void> _glSecondaryColorPointerEXT;
        
        public static unsafe void glSecondaryColorPointerEXT(int size, ColorPointerType type, int stride, IntPtr pointer)
        {
            _glSecondaryColorPointerEXT(size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, SecondaryColorPointerTypeIBM, int, IntPtr, int, void> _glSecondaryColorPointerListIBM;
        
        public static unsafe void glSecondaryColorPointerListIBM(int size, SecondaryColorPointerTypeIBM type, int stride, out IntPtr pointer, int ptrstride)
        {
            _glSecondaryColorPointerListIBM(size, type, stride, (IntPtr)pointer, ptrstride);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glSelectBuffer;
        
        public static unsafe void glSelectBuffer(int size, ref uint buffer)
        {
            _glSelectBuffer(size, (IntPtr)buffer);
        }
        
        public static unsafe delegate*<uint, byte, uint, int, IntPtr, void> _glSelectPerfMonitorCountersAMD;
        
        public static unsafe void glSelectPerfMonitorCountersAMD(uint monitor, byte enable, uint group, int numCounters, ref uint counterList)
        {
            _glSelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, (IntPtr)counterList);
        }
        
        public static unsafe delegate*<uint, SemaphoreParameterName, IntPtr, void> _glSemaphoreParameterivNV;
        
        public static unsafe void glSemaphoreParameterivNV(uint semaphore, SemaphoreParameterName pname, ref int @params)
        {
            _glSemaphoreParameterivNV(semaphore, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SemaphoreParameterName, IntPtr, void> _glSemaphoreParameterui64vEXT;
        
        public static unsafe void glSemaphoreParameterui64vEXT(uint semaphore, SemaphoreParameterName pname, ref ulong @params)
        {
            _glSemaphoreParameterui64vEXT(semaphore, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, IntPtr, IntPtr, void> _glSeparableFilter2D;
        
        public static unsafe void glSeparableFilter2D(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
        {
            _glSeparableFilter2D(target, internalformat, width, height, format, type, (IntPtr)row, (IntPtr)column);
        }
        
        public static unsafe delegate*<SeparableTargetEXT, InternalFormat, int, int, PixelFormat, PixelType, IntPtr, IntPtr, void> _glSeparableFilter2DEXT;
        
        public static unsafe void glSeparableFilter2DEXT(SeparableTargetEXT target, InternalFormat internalformat, int width, int height, PixelFormat format, PixelType type, IntPtr row, IntPtr column)
        {
            _glSeparableFilter2DEXT(target, internalformat, width, height, format, type, (IntPtr)row, (IntPtr)column);
        }
        
        public static unsafe delegate*<uint, void> _glSetFenceAPPLE;
        
        public static unsafe void glSetFenceAPPLE(uint fence)
        {
            _glSetFenceAPPLE(fence);
        }
        
        public static unsafe delegate*<uint, FenceConditionNV, void> _glSetFenceNV;
        
        public static unsafe void glSetFenceNV(uint fence, FenceConditionNV condition)
        {
            _glSetFenceNV(fence, condition);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glSetFragmentShaderConstantATI;
        
        public static unsafe void glSetFragmentShaderConstantATI(uint dst, ref float value)
        {
            _glSetFragmentShaderConstantATI(dst, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, ScalarType, IntPtr, void> _glSetInvariantEXT;
        
        public static unsafe void glSetInvariantEXT(uint id, ScalarType type, IntPtr addr)
        {
            _glSetInvariantEXT(id, type, (IntPtr)addr);
        }
        
        public static unsafe delegate*<uint, ScalarType, IntPtr, void> _glSetLocalConstantEXT;
        
        public static unsafe void glSetLocalConstantEXT(uint id, ScalarType type, IntPtr addr)
        {
            _glSetLocalConstantEXT(id, type, (IntPtr)addr);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glSetMultisamplefvAMD;
        
        public static unsafe void glSetMultisamplefvAMD(uint pname, uint index, ref float val)
        {
            _glSetMultisamplefvAMD(pname, index, (IntPtr)val);
        }
        
        public static unsafe delegate*<ShadingModel, void> _glShadeModel;
        
        public static unsafe void glShadeModel(ShadingModel mode)
        {
            _glShadeModel(mode);
        }
        
        public static unsafe delegate*<int, IntPtr, ShaderBinaryFormat, IntPtr, int, void> _glShaderBinary;
        
        public static unsafe void glShaderBinary(int count, ref uint shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
        {
            _glShaderBinary(count, (IntPtr)shaders, binaryFormat, (IntPtr)binary, length);
        }
        
        public static unsafe delegate*<VertexShaderOpEXT, uint, uint, void> _glShaderOp1EXT;
        
        public static unsafe void glShaderOp1EXT(VertexShaderOpEXT op, uint res, uint arg1)
        {
            _glShaderOp1EXT(op, res, arg1);
        }
        
        public static unsafe delegate*<VertexShaderOpEXT, uint, uint, uint, void> _glShaderOp2EXT;
        
        public static unsafe void glShaderOp2EXT(VertexShaderOpEXT op, uint res, uint arg1, uint arg2)
        {
            _glShaderOp2EXT(op, res, arg1, arg2);
        }
        
        public static unsafe delegate*<VertexShaderOpEXT, uint, uint, uint, uint, void> _glShaderOp3EXT;
        
        public static unsafe void glShaderOp3EXT(VertexShaderOpEXT op, uint res, uint arg1, uint arg2, uint arg3)
        {
            _glShaderOp3EXT(op, res, arg1, arg2, arg3);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glShaderSource;
        
        public static unsafe void glShaderSource(uint shader, int count, out IntPtr @string, ref int length)
        {
            _glShaderSource(shader, count, (IntPtr)@string, (IntPtr)length);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glShaderSourceARB;
        
        public static unsafe void glShaderSourceARB(uint shaderObj, int count, out IntPtr @string, ref int length)
        {
            _glShaderSourceARB(shaderObj, count, (IntPtr)@string, (IntPtr)length);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glShaderStorageBlockBinding;
        
        public static unsafe void glShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding)
        {
            _glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
        }
        
        public static unsafe delegate*<byte, void> _glShadingRateImageBarrierNV;
        
        public static unsafe void glShadingRateImageBarrierNV(byte synchronize)
        {
            _glShadingRateImageBarrierNV(synchronize);
        }
        
        public static unsafe delegate*<ShadingRateQCOM, void> _glShadingRateQCOM;
        
        public static unsafe void glShadingRateQCOM(ShadingRateQCOM rate)
        {
            _glShadingRateQCOM(rate);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, void> _glShadingRateImagePaletteNV;
        
        public static unsafe void glShadingRateImagePaletteNV(uint viewport, uint first, int count, ref uint rates)
        {
            _glShadingRateImagePaletteNV(viewport, first, count, (IntPtr)rates);
        }
        
        public static unsafe delegate*<uint, void> _glShadingRateSampleOrderNV;
        
        public static unsafe void glShadingRateSampleOrderNV(uint order)
        {
            _glShadingRateSampleOrderNV(order);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glShadingRateSampleOrderCustomNV;
        
        public static unsafe void glShadingRateSampleOrderCustomNV(uint rate, uint samples, ref int locations)
        {
            _glShadingRateSampleOrderCustomNV(rate, samples, (IntPtr)locations);
        }
        
        public static unsafe delegate*<TextureTarget, int, IntPtr, void> _glSharpenTexFuncSGIS;
        
        public static unsafe void glSharpenTexFuncSGIS(TextureTarget target, int n, out IntPtr points)
        {
            _glSharpenTexFuncSGIS(target, n, (IntPtr)points);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, uint, IntPtr, IntPtr, void> _glSignalSemaphoreEXT;
        
        public static unsafe void glSignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, ref uint buffers, uint numTextureBarriers, ref uint textures, ref TextureLayout dstLayouts)
        {
            _glSignalSemaphoreEXT(semaphore, numBufferBarriers, (IntPtr)buffers, numTextureBarriers, (IntPtr)textures, (IntPtr)dstLayouts);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glSignalSemaphoreui64NVX;
        
        public static unsafe void glSignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, ref uint semaphoreArray, ref ulong fenceValueArray)
        {
            _glSignalSemaphoreui64NVX(signalGpu, fenceObjectCount, (IntPtr)semaphoreArray, (IntPtr)fenceValueArray);
        }
        
        public static unsafe delegate*<uint, IntPtr, uint, IntPtr, IntPtr, void> _glSpecializeShader;
        
        public static unsafe void glSpecializeShader(uint shader, ref sbyte pEntryPoint, uint numSpecializationConstants, ref uint pConstantIndex, ref uint pConstantValue)
        {
            _glSpecializeShader(shader, (IntPtr)pEntryPoint, numSpecializationConstants, (IntPtr)pConstantIndex, (IntPtr)pConstantValue);
        }
        
        public static unsafe delegate*<uint, IntPtr, uint, IntPtr, IntPtr, void> _glSpecializeShaderARB;
        
        public static unsafe void glSpecializeShaderARB(uint shader, ref sbyte pEntryPoint, uint numSpecializationConstants, ref uint pConstantIndex, ref uint pConstantValue)
        {
            _glSpecializeShaderARB(shader, (IntPtr)pEntryPoint, numSpecializationConstants, (IntPtr)pConstantIndex, (IntPtr)pConstantValue);
        }
        
        public static unsafe delegate*<SpriteParameterNameSGIX, float, void> _glSpriteParameterfSGIX;
        
        public static unsafe void glSpriteParameterfSGIX(SpriteParameterNameSGIX pname, float param)
        {
            _glSpriteParameterfSGIX(pname, param);
        }
        
        public static unsafe delegate*<SpriteParameterNameSGIX, IntPtr, void> _glSpriteParameterfvSGIX;
        
        public static unsafe void glSpriteParameterfvSGIX(SpriteParameterNameSGIX pname, ref float @params)
        {
            _glSpriteParameterfvSGIX(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<SpriteParameterNameSGIX, int, void> _glSpriteParameteriSGIX;
        
        public static unsafe void glSpriteParameteriSGIX(SpriteParameterNameSGIX pname, int param)
        {
            _glSpriteParameteriSGIX(pname, param);
        }
        
        public static unsafe delegate*<SpriteParameterNameSGIX, IntPtr, void> _glSpriteParameterivSGIX;
        
        public static unsafe void glSpriteParameterivSGIX(SpriteParameterNameSGIX pname, ref int @params)
        {
            _glSpriteParameterivSGIX(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<void> _glStartInstrumentsSGIX;
        
        public static unsafe void glStartInstrumentsSGIX()
        {
            _glStartInstrumentsSGIX();
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, uint, void> _glStartTilingQCOM;
        
        public static unsafe void glStartTilingQCOM(uint x, uint y, uint width, uint height, uint preserveMask)
        {
            _glStartTilingQCOM(x, y, width, height, preserveMask);
        }
        
        public static unsafe delegate*<uint, uint, void> _glStateCaptureNV;
        
        public static unsafe void glStateCaptureNV(uint state, uint mode)
        {
            _glStateCaptureNV(state, mode);
        }
        
        public static unsafe delegate*<int, uint, void> _glStencilClearTagEXT;
        
        public static unsafe void glStencilClearTagEXT(int stencilTagBits, uint stencilClearTag)
        {
            _glStencilClearTagEXT(stencilTagBits, stencilClearTag);
        }
        
        public static unsafe delegate*<int, PathElementType, IntPtr, uint, PathFillMode, uint, PathTransformType, IntPtr, void> _glStencilFillPathInstancedNV;
        
        public static unsafe void glStencilFillPathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, PathFillMode fillMode, uint mask, PathTransformType transformType, ref float transformValues)
        {
            _glStencilFillPathInstancedNV(numPaths, pathNameType, (IntPtr)paths, pathBase, fillMode, mask, transformType, (IntPtr)transformValues);
        }
        
        public static unsafe delegate*<uint, PathFillMode, uint, void> _glStencilFillPathNV;
        
        public static unsafe void glStencilFillPathNV(uint path, PathFillMode fillMode, uint mask)
        {
            _glStencilFillPathNV(path, fillMode, mask);
        }
        
        public static unsafe delegate*<StencilFunction, int, uint, void> _glStencilFunc;
        
        public static unsafe void glStencilFunc(StencilFunction func, int @ref, uint mask)
        {
            _glStencilFunc(func, @ref, mask);
        }
        
        public static unsafe delegate*<StencilFaceDirection, StencilFunction, int, uint, void> _glStencilFuncSeparate;
        
        public static unsafe void glStencilFuncSeparate(StencilFaceDirection face, StencilFunction func, int @ref, uint mask)
        {
            _glStencilFuncSeparate(face, func, @ref, mask);
        }
        
        public static unsafe delegate*<StencilFunction, StencilFunction, int, uint, void> _glStencilFuncSeparateATI;
        
        public static unsafe void glStencilFuncSeparateATI(StencilFunction frontfunc, StencilFunction backfunc, int @ref, uint mask)
        {
            _glStencilFuncSeparateATI(frontfunc, backfunc, @ref, mask);
        }
        
        public static unsafe delegate*<uint, void> _glStencilMask;
        
        public static unsafe void glStencilMask(uint mask)
        {
            _glStencilMask(mask);
        }
        
        public static unsafe delegate*<StencilFaceDirection, uint, void> _glStencilMaskSeparate;
        
        public static unsafe void glStencilMaskSeparate(StencilFaceDirection face, uint mask)
        {
            _glStencilMaskSeparate(face, mask);
        }
        
        public static unsafe delegate*<StencilOp, StencilOp, StencilOp, void> _glStencilOp;
        
        public static unsafe void glStencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass)
        {
            _glStencilOp(fail, zfail, zpass);
        }
        
        public static unsafe delegate*<StencilFaceDirection, StencilOp, StencilOp, StencilOp, void> _glStencilOpSeparate;
        
        public static unsafe void glStencilOpSeparate(StencilFaceDirection face, StencilOp sfail, StencilOp dpfail, StencilOp dppass)
        {
            _glStencilOpSeparate(face, sfail, dpfail, dppass);
        }
        
        public static unsafe delegate*<StencilFaceDirection, StencilOp, StencilOp, StencilOp, void> _glStencilOpSeparateATI;
        
        public static unsafe void glStencilOpSeparateATI(StencilFaceDirection face, StencilOp sfail, StencilOp dpfail, StencilOp dppass)
        {
            _glStencilOpSeparateATI(face, sfail, dpfail, dppass);
        }
        
        public static unsafe delegate*<StencilFaceDirection, uint, void> _glStencilOpValueAMD;
        
        public static unsafe void glStencilOpValueAMD(StencilFaceDirection face, uint value)
        {
            _glStencilOpValueAMD(face, value);
        }
        
        public static unsafe delegate*<int, PathElementType, IntPtr, uint, int, uint, PathTransformType, IntPtr, void> _glStencilStrokePathInstancedNV;
        
        public static unsafe void glStencilStrokePathInstancedNV(int numPaths, PathElementType pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, PathTransformType transformType, ref float transformValues)
        {
            _glStencilStrokePathInstancedNV(numPaths, pathNameType, (IntPtr)paths, pathBase, reference, mask, transformType, (IntPtr)transformValues);
        }
        
        public static unsafe delegate*<uint, int, uint, void> _glStencilStrokePathNV;
        
        public static unsafe void glStencilStrokePathNV(uint path, int reference, uint mask)
        {
            _glStencilStrokePathNV(path, reference, mask);
        }
        
        public static unsafe delegate*<int, uint, IntPtr, uint, uint, uint, uint, uint, IntPtr, void> _glStencilThenCoverFillPathInstancedNV;
        
        public static unsafe void glStencilThenCoverFillPathInstancedNV(int numPaths, uint pathNameType, IntPtr paths, uint pathBase, uint fillMode, uint mask, uint coverMode, uint transformType, ref float transformValues)
        {
            _glStencilThenCoverFillPathInstancedNV(numPaths, pathNameType, (IntPtr)paths, pathBase, fillMode, mask, coverMode, transformType, (IntPtr)transformValues);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, void> _glStencilThenCoverFillPathNV;
        
        public static unsafe void glStencilThenCoverFillPathNV(uint path, uint fillMode, uint mask, uint coverMode)
        {
            _glStencilThenCoverFillPathNV(path, fillMode, mask, coverMode);
        }
        
        public static unsafe delegate*<int, uint, IntPtr, uint, int, uint, uint, uint, IntPtr, void> _glStencilThenCoverStrokePathInstancedNV;
        
        public static unsafe void glStencilThenCoverStrokePathInstancedNV(int numPaths, uint pathNameType, IntPtr paths, uint pathBase, int reference, uint mask, uint coverMode, uint transformType, ref float transformValues)
        {
            _glStencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, (IntPtr)paths, pathBase, reference, mask, coverMode, transformType, (IntPtr)transformValues);
        }
        
        public static unsafe delegate*<uint, int, uint, uint, void> _glStencilThenCoverStrokePathNV;
        
        public static unsafe void glStencilThenCoverStrokePathNV(uint path, int reference, uint mask, uint coverMode)
        {
            _glStencilThenCoverStrokePathNV(path, reference, mask, coverMode);
        }
        
        public static unsafe delegate*<int, void> _glStopInstrumentsSGIX;
        
        public static unsafe void glStopInstrumentsSGIX(int marker)
        {
            _glStopInstrumentsSGIX(marker);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glStringMarkerGREMEDY;
        
        public static unsafe void glStringMarkerGREMEDY(int len, IntPtr @string)
        {
            _glStringMarkerGREMEDY(len, (IntPtr)@string);
        }
        
        public static unsafe delegate*<uint, uint, void> _glSubpixelPrecisionBiasNV;
        
        public static unsafe void glSubpixelPrecisionBiasNV(uint xbits, uint ybits)
        {
            _glSubpixelPrecisionBiasNV(xbits, ybits);
        }
        
        public static unsafe delegate*<uint, uint, VertexShaderCoordOutEXT, VertexShaderCoordOutEXT, VertexShaderCoordOutEXT, VertexShaderCoordOutEXT, void> _glSwizzleEXT;
        
        public static unsafe void glSwizzleEXT(uint res, uint @in, VertexShaderCoordOutEXT outX, VertexShaderCoordOutEXT outY, VertexShaderCoordOutEXT outZ, VertexShaderCoordOutEXT outW)
        {
            _glSwizzleEXT(res, @in, outX, outY, outZ, outW);
        }
        
        public static unsafe delegate*<uint, void> _glSyncTextureINTEL;
        
        public static unsafe void glSyncTextureINTEL(uint texture)
        {
            _glSyncTextureINTEL(texture);
        }
        
        public static unsafe delegate*<void> _glTagSampleBufferSGIX;
        
        public static unsafe void glTagSampleBufferSGIX()
        {
            _glTagSampleBufferSGIX();
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, void> _glTangent3bEXT;
        
        public static unsafe void glTangent3bEXT(sbyte tx, sbyte ty, sbyte tz)
        {
            _glTangent3bEXT(tx, ty, tz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTangent3bvEXT;
        
        public static unsafe void glTangent3bvEXT(ref sbyte v)
        {
            _glTangent3bvEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, void> _glTangent3dEXT;
        
        public static unsafe void glTangent3dEXT(double tx, double ty, double tz)
        {
            _glTangent3dEXT(tx, ty, tz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTangent3dvEXT;
        
        public static unsafe void glTangent3dvEXT(ref double v)
        {
            _glTangent3dvEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glTangent3fEXT;
        
        public static unsafe void glTangent3fEXT(float tx, float ty, float tz)
        {
            _glTangent3fEXT(tx, ty, tz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTangent3fvEXT;
        
        public static unsafe void glTangent3fvEXT(ref float v)
        {
            _glTangent3fvEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glTangent3iEXT;
        
        public static unsafe void glTangent3iEXT(int tx, int ty, int tz)
        {
            _glTangent3iEXT(tx, ty, tz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTangent3ivEXT;
        
        public static unsafe void glTangent3ivEXT(ref int v)
        {
            _glTangent3ivEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glTangent3sEXT;
        
        public static unsafe void glTangent3sEXT(short tx, short ty, short tz)
        {
            _glTangent3sEXT(tx, ty, tz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTangent3svEXT;
        
        public static unsafe void glTangent3svEXT(ref short v)
        {
            _glTangent3svEXT((IntPtr)v);
        }
        
        public static unsafe delegate*<TangentPointerTypeEXT, int, IntPtr, void> _glTangentPointerEXT;
        
        public static unsafe void glTangentPointerEXT(TangentPointerTypeEXT type, int stride, IntPtr pointer)
        {
            _glTangentPointerEXT(type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, void> _glTbufferMask3DFX;
        
        public static unsafe void glTbufferMask3DFX(uint mask)
        {
            _glTbufferMask3DFX(mask);
        }
        
        public static unsafe delegate*<float, void> _glTessellationFactorAMD;
        
        public static unsafe void glTessellationFactorAMD(float factor)
        {
            _glTessellationFactorAMD(factor);
        }
        
        public static unsafe delegate*<uint, void> _glTessellationModeAMD;
        
        public static unsafe void glTessellationModeAMD(uint mode)
        {
            _glTessellationModeAMD(mode);
        }
        
        public static unsafe delegate*<uint, byte> _glTestFenceAPPLE;
        
        public static unsafe byte glTestFenceAPPLE(uint fence)
        {
            return _glTestFenceAPPLE(fence);
        }
        
        public static unsafe delegate*<uint, byte> _glTestFenceNV;
        
        public static unsafe byte glTestFenceNV(uint fence)
        {
            return _glTestFenceNV(fence);
        }
        
        public static unsafe delegate*<ObjectTypeAPPLE, uint, byte> _glTestObjectAPPLE;
        
        public static unsafe byte glTestObjectAPPLE(ObjectTypeAPPLE @object, uint name)
        {
            return _glTestObjectAPPLE(@object, name);
        }
        
        public static unsafe delegate*<TextureTarget, uint, ulong, void> _glTexAttachMemoryNV;
        
        public static unsafe void glTexAttachMemoryNV(TextureTarget target, uint memory, ulong offset)
        {
            _glTexAttachMemoryNV(target, memory, offset);
        }
        
        public static unsafe delegate*<TextureTarget, SizedInternalFormat, uint, void> _glTexBuffer;
        
        public static unsafe void glTexBuffer(TextureTarget target, SizedInternalFormat internalformat, uint buffer)
        {
            _glTexBuffer(target, internalformat, buffer);
        }
        
        public static unsafe delegate*<TextureTarget, SizedInternalFormat, uint, void> _glTexBufferARB;
        
        public static unsafe void glTexBufferARB(TextureTarget target, SizedInternalFormat internalformat, uint buffer)
        {
            _glTexBufferARB(target, internalformat, buffer);
        }
        
        public static unsafe delegate*<TextureTarget, SizedInternalFormat, uint, void> _glTexBufferEXT;
        
        public static unsafe void glTexBufferEXT(TextureTarget target, SizedInternalFormat internalformat, uint buffer)
        {
            _glTexBufferEXT(target, internalformat, buffer);
        }
        
        public static unsafe delegate*<TextureTarget, SizedInternalFormat, uint, void> _glTexBufferOES;
        
        public static unsafe void glTexBufferOES(TextureTarget target, SizedInternalFormat internalformat, uint buffer)
        {
            _glTexBufferOES(target, internalformat, buffer);
        }
        
        public static unsafe delegate*<TextureTarget, SizedInternalFormat, uint, long, long, void> _glTexBufferRange;
        
        public static unsafe void glTexBufferRange(TextureTarget target, SizedInternalFormat internalformat, uint buffer, long offset, long size)
        {
            _glTexBufferRange(target, internalformat, buffer, offset, size);
        }
        
        public static unsafe delegate*<TextureTarget, SizedInternalFormat, uint, long, long, void> _glTexBufferRangeEXT;
        
        public static unsafe void glTexBufferRangeEXT(TextureTarget target, SizedInternalFormat internalformat, uint buffer, long offset, long size)
        {
            _glTexBufferRangeEXT(target, internalformat, buffer, offset, size);
        }
        
        public static unsafe delegate*<TextureTarget, SizedInternalFormat, uint, long, long, void> _glTexBufferRangeOES;
        
        public static unsafe void glTexBufferRangeOES(TextureTarget target, SizedInternalFormat internalformat, uint buffer, long offset, long size)
        {
            _glTexBufferRangeOES(target, internalformat, buffer, offset, size);
        }
        
        public static unsafe delegate*<TexBumpParameterATI, IntPtr, void> _glTexBumpParameterfvATI;
        
        public static unsafe void glTexBumpParameterfvATI(TexBumpParameterATI pname, ref float param)
        {
            _glTexBumpParameterfvATI(pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<TexBumpParameterATI, IntPtr, void> _glTexBumpParameterivATI;
        
        public static unsafe void glTexBumpParameterivATI(TexBumpParameterATI pname, ref int param)
        {
            _glTexBumpParameterivATI(pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<sbyte, void> _glTexCoord1bOES;
        
        public static unsafe void glTexCoord1bOES(sbyte s)
        {
            _glTexCoord1bOES(s);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord1bvOES;
        
        public static unsafe void glTexCoord1bvOES(ref sbyte coords)
        {
            _glTexCoord1bvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<double, void> _glTexCoord1d;
        
        public static unsafe void glTexCoord1d(double s)
        {
            _glTexCoord1d(s);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord1dv;
        
        public static unsafe void glTexCoord1dv(ref double v)
        {
            _glTexCoord1dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, void> _glTexCoord1f;
        
        public static unsafe void glTexCoord1f(float s)
        {
            _glTexCoord1f(s);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord1fv;
        
        public static unsafe void glTexCoord1fv(ref float v)
        {
            _glTexCoord1fv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, void> _glTexCoord1hNV;
        
        public static unsafe void glTexCoord1hNV(ushort s)
        {
            _glTexCoord1hNV(s);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord1hvNV;
        
        public static unsafe void glTexCoord1hvNV(ref ushort v)
        {
            _glTexCoord1hvNV((IntPtr)v);
        }
        
        public static unsafe delegate*<int, void> _glTexCoord1i;
        
        public static unsafe void glTexCoord1i(int s)
        {
            _glTexCoord1i(s);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord1iv;
        
        public static unsafe void glTexCoord1iv(ref int v)
        {
            _glTexCoord1iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, void> _glTexCoord1s;
        
        public static unsafe void glTexCoord1s(short s)
        {
            _glTexCoord1s(s);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord1sv;
        
        public static unsafe void glTexCoord1sv(ref short v)
        {
            _glTexCoord1sv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, void> _glTexCoord1xOES;
        
        public static unsafe void glTexCoord1xOES(int s)
        {
            _glTexCoord1xOES(s);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord1xvOES;
        
        public static unsafe void glTexCoord1xvOES(ref int coords)
        {
            _glTexCoord1xvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<sbyte, sbyte, void> _glTexCoord2bOES;
        
        public static unsafe void glTexCoord2bOES(sbyte s, sbyte t)
        {
            _glTexCoord2bOES(s, t);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord2bvOES;
        
        public static unsafe void glTexCoord2bvOES(ref sbyte coords)
        {
            _glTexCoord2bvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<double, double, void> _glTexCoord2d;
        
        public static unsafe void glTexCoord2d(double s, double t)
        {
            _glTexCoord2d(s, t);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord2dv;
        
        public static unsafe void glTexCoord2dv(ref double v)
        {
            _glTexCoord2dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, void> _glTexCoord2f;
        
        public static unsafe void glTexCoord2f(float s, float t)
        {
            _glTexCoord2f(s, t);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, float, float, void> _glTexCoord2fColor3fVertex3fSUN;
        
        public static unsafe void glTexCoord2fColor3fVertex3fSUN(float s, float t, float r, float g, float b, float x, float y, float z)
        {
            _glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, void> _glTexCoord2fColor3fVertex3fvSUN;
        
        public static unsafe void glTexCoord2fColor3fVertex3fvSUN(ref float tc, ref float c, ref float v)
        {
            _glTexCoord2fColor3fVertex3fvSUN((IntPtr)tc, (IntPtr)c, (IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, float, float, float, float, float, float, void> _glTexCoord2fColor4fNormal3fVertex3fSUN;
        
        public static unsafe void glTexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z)
        {
            _glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, IntPtr, void> _glTexCoord2fColor4fNormal3fVertex3fvSUN;
        
        public static unsafe void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref float tc, ref float c, ref float n, ref float v)
        {
            _glTexCoord2fColor4fNormal3fVertex3fvSUN((IntPtr)tc, (IntPtr)c, (IntPtr)n, (IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, byte, byte, byte, byte, float, float, float, void> _glTexCoord2fColor4ubVertex3fSUN;
        
        public static unsafe void glTexCoord2fColor4ubVertex3fSUN(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z)
        {
            _glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, void> _glTexCoord2fColor4ubVertex3fvSUN;
        
        public static unsafe void glTexCoord2fColor4ubVertex3fvSUN(ref float tc, ref byte c, ref float v)
        {
            _glTexCoord2fColor4ubVertex3fvSUN((IntPtr)tc, (IntPtr)c, (IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, float, float, void> _glTexCoord2fNormal3fVertex3fSUN;
        
        public static unsafe void glTexCoord2fNormal3fVertex3fSUN(float s, float t, float nx, float ny, float nz, float x, float y, float z)
        {
            _glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, void> _glTexCoord2fNormal3fVertex3fvSUN;
        
        public static unsafe void glTexCoord2fNormal3fVertex3fvSUN(ref float tc, ref float n, ref float v)
        {
            _glTexCoord2fNormal3fVertex3fvSUN((IntPtr)tc, (IntPtr)n, (IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, float, float, void> _glTexCoord2fVertex3fSUN;
        
        public static unsafe void glTexCoord2fVertex3fSUN(float s, float t, float x, float y, float z)
        {
            _glTexCoord2fVertex3fSUN(s, t, x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glTexCoord2fVertex3fvSUN;
        
        public static unsafe void glTexCoord2fVertex3fvSUN(ref float tc, ref float v)
        {
            _glTexCoord2fVertex3fvSUN((IntPtr)tc, (IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord2fv;
        
        public static unsafe void glTexCoord2fv(ref float v)
        {
            _glTexCoord2fv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, void> _glTexCoord2hNV;
        
        public static unsafe void glTexCoord2hNV(ushort s, ushort t)
        {
            _glTexCoord2hNV(s, t);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord2hvNV;
        
        public static unsafe void glTexCoord2hvNV(ref ushort v)
        {
            _glTexCoord2hvNV((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, void> _glTexCoord2i;
        
        public static unsafe void glTexCoord2i(int s, int t)
        {
            _glTexCoord2i(s, t);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord2iv;
        
        public static unsafe void glTexCoord2iv(ref int v)
        {
            _glTexCoord2iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, void> _glTexCoord2s;
        
        public static unsafe void glTexCoord2s(short s, short t)
        {
            _glTexCoord2s(s, t);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord2sv;
        
        public static unsafe void glTexCoord2sv(ref short v)
        {
            _glTexCoord2sv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, void> _glTexCoord2xOES;
        
        public static unsafe void glTexCoord2xOES(int s, int t)
        {
            _glTexCoord2xOES(s, t);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord2xvOES;
        
        public static unsafe void glTexCoord2xvOES(ref int coords)
        {
            _glTexCoord2xvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, void> _glTexCoord3bOES;
        
        public static unsafe void glTexCoord3bOES(sbyte s, sbyte t, sbyte r)
        {
            _glTexCoord3bOES(s, t, r);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord3bvOES;
        
        public static unsafe void glTexCoord3bvOES(ref sbyte coords)
        {
            _glTexCoord3bvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<double, double, double, void> _glTexCoord3d;
        
        public static unsafe void glTexCoord3d(double s, double t, double r)
        {
            _glTexCoord3d(s, t, r);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord3dv;
        
        public static unsafe void glTexCoord3dv(ref double v)
        {
            _glTexCoord3dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glTexCoord3f;
        
        public static unsafe void glTexCoord3f(float s, float t, float r)
        {
            _glTexCoord3f(s, t, r);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord3fv;
        
        public static unsafe void glTexCoord3fv(ref float v)
        {
            _glTexCoord3fv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, void> _glTexCoord3hNV;
        
        public static unsafe void glTexCoord3hNV(ushort s, ushort t, ushort r)
        {
            _glTexCoord3hNV(s, t, r);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord3hvNV;
        
        public static unsafe void glTexCoord3hvNV(ref ushort v)
        {
            _glTexCoord3hvNV((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glTexCoord3i;
        
        public static unsafe void glTexCoord3i(int s, int t, int r)
        {
            _glTexCoord3i(s, t, r);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord3iv;
        
        public static unsafe void glTexCoord3iv(ref int v)
        {
            _glTexCoord3iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glTexCoord3s;
        
        public static unsafe void glTexCoord3s(short s, short t, short r)
        {
            _glTexCoord3s(s, t, r);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord3sv;
        
        public static unsafe void glTexCoord3sv(ref short v)
        {
            _glTexCoord3sv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glTexCoord3xOES;
        
        public static unsafe void glTexCoord3xOES(int s, int t, int r)
        {
            _glTexCoord3xOES(s, t, r);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord3xvOES;
        
        public static unsafe void glTexCoord3xvOES(ref int coords)
        {
            _glTexCoord3xvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, sbyte, void> _glTexCoord4bOES;
        
        public static unsafe void glTexCoord4bOES(sbyte s, sbyte t, sbyte r, sbyte q)
        {
            _glTexCoord4bOES(s, t, r, q);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord4bvOES;
        
        public static unsafe void glTexCoord4bvOES(ref sbyte coords)
        {
            _glTexCoord4bvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<double, double, double, double, void> _glTexCoord4d;
        
        public static unsafe void glTexCoord4d(double s, double t, double r, double q)
        {
            _glTexCoord4d(s, t, r, q);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord4dv;
        
        public static unsafe void glTexCoord4dv(ref double v)
        {
            _glTexCoord4dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glTexCoord4f;
        
        public static unsafe void glTexCoord4f(float s, float t, float r, float q)
        {
            _glTexCoord4f(s, t, r, q);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, void> _glTexCoord4fColor4fNormal3fVertex4fSUN;
        
        public static unsafe void glTexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w)
        {
            _glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, IntPtr, IntPtr, void> _glTexCoord4fColor4fNormal3fVertex4fvSUN;
        
        public static unsafe void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref float tc, ref float c, ref float n, ref float v)
        {
            _glTexCoord4fColor4fNormal3fVertex4fvSUN((IntPtr)tc, (IntPtr)c, (IntPtr)n, (IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, float, float, float, float, float, void> _glTexCoord4fVertex4fSUN;
        
        public static unsafe void glTexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w)
        {
            _glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glTexCoord4fVertex4fvSUN;
        
        public static unsafe void glTexCoord4fVertex4fvSUN(ref float tc, ref float v)
        {
            _glTexCoord4fVertex4fvSUN((IntPtr)tc, (IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord4fv;
        
        public static unsafe void glTexCoord4fv(ref float v)
        {
            _glTexCoord4fv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, ushort, void> _glTexCoord4hNV;
        
        public static unsafe void glTexCoord4hNV(ushort s, ushort t, ushort r, ushort q)
        {
            _glTexCoord4hNV(s, t, r, q);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord4hvNV;
        
        public static unsafe void glTexCoord4hvNV(ref ushort v)
        {
            _glTexCoord4hvNV((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glTexCoord4i;
        
        public static unsafe void glTexCoord4i(int s, int t, int r, int q)
        {
            _glTexCoord4i(s, t, r, q);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord4iv;
        
        public static unsafe void glTexCoord4iv(ref int v)
        {
            _glTexCoord4iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, short, void> _glTexCoord4s;
        
        public static unsafe void glTexCoord4s(short s, short t, short r, short q)
        {
            _glTexCoord4s(s, t, r, q);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord4sv;
        
        public static unsafe void glTexCoord4sv(ref short v)
        {
            _glTexCoord4sv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glTexCoord4xOES;
        
        public static unsafe void glTexCoord4xOES(int s, int t, int r, int q)
        {
            _glTexCoord4xOES(s, t, r, q);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord4xvOES;
        
        public static unsafe void glTexCoord4xvOES(ref int coords)
        {
            _glTexCoord4xvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<int, uint, int, void> _glTexCoordFormatNV;
        
        public static unsafe void glTexCoordFormatNV(int size, uint type, int stride)
        {
            _glTexCoordFormatNV(size, type, stride);
        }
        
        public static unsafe delegate*<TexCoordPointerType, uint, void> _glTexCoordP1ui;
        
        public static unsafe void glTexCoordP1ui(TexCoordPointerType type, uint coords)
        {
            _glTexCoordP1ui(type, coords);
        }
        
        public static unsafe delegate*<TexCoordPointerType, IntPtr, void> _glTexCoordP1uiv;
        
        public static unsafe void glTexCoordP1uiv(TexCoordPointerType type, ref uint coords)
        {
            _glTexCoordP1uiv(type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TexCoordPointerType, uint, void> _glTexCoordP2ui;
        
        public static unsafe void glTexCoordP2ui(TexCoordPointerType type, uint coords)
        {
            _glTexCoordP2ui(type, coords);
        }
        
        public static unsafe delegate*<TexCoordPointerType, IntPtr, void> _glTexCoordP2uiv;
        
        public static unsafe void glTexCoordP2uiv(TexCoordPointerType type, ref uint coords)
        {
            _glTexCoordP2uiv(type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TexCoordPointerType, uint, void> _glTexCoordP3ui;
        
        public static unsafe void glTexCoordP3ui(TexCoordPointerType type, uint coords)
        {
            _glTexCoordP3ui(type, coords);
        }
        
        public static unsafe delegate*<TexCoordPointerType, IntPtr, void> _glTexCoordP3uiv;
        
        public static unsafe void glTexCoordP3uiv(TexCoordPointerType type, ref uint coords)
        {
            _glTexCoordP3uiv(type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TexCoordPointerType, uint, void> _glTexCoordP4ui;
        
        public static unsafe void glTexCoordP4ui(TexCoordPointerType type, uint coords)
        {
            _glTexCoordP4ui(type, coords);
        }
        
        public static unsafe delegate*<TexCoordPointerType, IntPtr, void> _glTexCoordP4uiv;
        
        public static unsafe void glTexCoordP4uiv(TexCoordPointerType type, ref uint coords)
        {
            _glTexCoordP4uiv(type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<int, TexCoordPointerType, int, IntPtr, void> _glTexCoordPointer;
        
        public static unsafe void glTexCoordPointer(int size, TexCoordPointerType type, int stride, IntPtr pointer)
        {
            _glTexCoordPointer(size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, TexCoordPointerType, int, int, IntPtr, void> _glTexCoordPointerEXT;
        
        public static unsafe void glTexCoordPointerEXT(int size, TexCoordPointerType type, int stride, int count, IntPtr pointer)
        {
            _glTexCoordPointerEXT(size, type, stride, count, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, TexCoordPointerType, int, IntPtr, int, void> _glTexCoordPointerListIBM;
        
        public static unsafe void glTexCoordPointerListIBM(int size, TexCoordPointerType type, int stride, out IntPtr pointer, int ptrstride)
        {
            _glTexCoordPointerListIBM(size, type, stride, (IntPtr)pointer, ptrstride);
        }
        
        public static unsafe delegate*<int, VertexPointerType, IntPtr, void> _glTexCoordPointervINTEL;
        
        public static unsafe void glTexCoordPointervINTEL(int size, VertexPointerType type, out IntPtr pointer)
        {
            _glTexCoordPointervINTEL(size, type, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, float, void> _glTexEnvf;
        
        public static unsafe void glTexEnvf(TextureEnvTarget target, TextureEnvParameter pname, float param)
        {
            _glTexEnvf(target, pname, param);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glTexEnvfv;
        
        public static unsafe void glTexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, ref float @params)
        {
            _glTexEnvfv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, int, void> _glTexEnvi;
        
        public static unsafe void glTexEnvi(TextureEnvTarget target, TextureEnvParameter pname, int param)
        {
            _glTexEnvi(target, pname, param);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glTexEnviv;
        
        public static unsafe void glTexEnviv(TextureEnvTarget target, TextureEnvParameter pname, ref int @params)
        {
            _glTexEnviv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, int, void> _glTexEnvx;
        
        public static unsafe void glTexEnvx(TextureEnvTarget target, TextureEnvParameter pname, int param)
        {
            _glTexEnvx(target, pname, param);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, int, void> _glTexEnvxOES;
        
        public static unsafe void glTexEnvxOES(TextureEnvTarget target, TextureEnvParameter pname, int param)
        {
            _glTexEnvxOES(target, pname, param);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glTexEnvxv;
        
        public static unsafe void glTexEnvxv(TextureEnvTarget target, TextureEnvParameter pname, ref int @params)
        {
            _glTexEnvxv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glTexEnvxvOES;
        
        public static unsafe void glTexEnvxvOES(TextureEnvTarget target, TextureEnvParameter pname, ref int @params)
        {
            _glTexEnvxvOES(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glTexEstimateMotionQCOM;
        
        public static unsafe void glTexEstimateMotionQCOM(uint @ref, uint target, uint output)
        {
            _glTexEstimateMotionQCOM(@ref, target, output);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, void> _glTexEstimateMotionRegionsQCOM;
        
        public static unsafe void glTexEstimateMotionRegionsQCOM(uint @ref, uint target, uint output, uint mask)
        {
            _glTexEstimateMotionRegionsQCOM(@ref, target, output, mask);
        }
        
        public static unsafe delegate*<uint, uint, uint, float, void> _glExtrapolateTex2DQCOM;
        
        public static unsafe void glExtrapolateTex2DQCOM(uint src1, uint src2, uint output, float scaleFactor)
        {
            _glExtrapolateTex2DQCOM(src1, src2, output, scaleFactor);
        }
        
        public static unsafe delegate*<TextureTarget, TextureFilterSGIS, int, IntPtr, void> _glTexFilterFuncSGIS;
        
        public static unsafe void glTexFilterFuncSGIS(TextureTarget target, TextureFilterSGIS filter, int n, ref float weights)
        {
            _glTexFilterFuncSGIS(target, filter, n, (IntPtr)weights);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, double, void> _glTexGend;
        
        public static unsafe void glTexGend(TextureCoordName coord, TextureGenParameter pname, double param)
        {
            _glTexGend(coord, pname, param);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glTexGendv;
        
        public static unsafe void glTexGendv(TextureCoordName coord, TextureGenParameter pname, ref double @params)
        {
            _glTexGendv(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, float, void> _glTexGenf;
        
        public static unsafe void glTexGenf(TextureCoordName coord, TextureGenParameter pname, float param)
        {
            _glTexGenf(coord, pname, param);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, float, void> _glTexGenfOES;
        
        public static unsafe void glTexGenfOES(TextureCoordName coord, TextureGenParameter pname, float param)
        {
            _glTexGenfOES(coord, pname, param);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glTexGenfv;
        
        public static unsafe void glTexGenfv(TextureCoordName coord, TextureGenParameter pname, ref float @params)
        {
            _glTexGenfv(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glTexGenfvOES;
        
        public static unsafe void glTexGenfvOES(TextureCoordName coord, TextureGenParameter pname, ref float @params)
        {
            _glTexGenfvOES(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, int, void> _glTexGeni;
        
        public static unsafe void glTexGeni(TextureCoordName coord, TextureGenParameter pname, int param)
        {
            _glTexGeni(coord, pname, param);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, int, void> _glTexGeniOES;
        
        public static unsafe void glTexGeniOES(TextureCoordName coord, TextureGenParameter pname, int param)
        {
            _glTexGeniOES(coord, pname, param);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glTexGeniv;
        
        public static unsafe void glTexGeniv(TextureCoordName coord, TextureGenParameter pname, ref int @params)
        {
            _glTexGeniv(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glTexGenivOES;
        
        public static unsafe void glTexGenivOES(TextureCoordName coord, TextureGenParameter pname, ref int @params)
        {
            _glTexGenivOES(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, int, void> _glTexGenxOES;
        
        public static unsafe void glTexGenxOES(TextureCoordName coord, TextureGenParameter pname, int param)
        {
            _glTexGenxOES(coord, pname, param);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glTexGenxvOES;
        
        public static unsafe void glTexGenxvOES(TextureCoordName coord, TextureGenParameter pname, ref int @params)
        {
            _glTexGenxvOES(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexImage1D;
        
        public static unsafe void glTexImage1D(TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexImage1D(target, level, internalformat, width, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexImage2D;
        
        public static unsafe void glTexImage2D(TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexImage2D(target, level, internalformat, width, height, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, byte, void> _glTexImage2DMultisample;
        
        public static unsafe void glTexImage2DMultisample(TextureTarget target, int samples, InternalFormat internalformat, int width, int height, byte fixedsamplelocations)
        {
            _glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, byte, void> _glTexImage2DMultisampleCoverageNV;
        
        public static unsafe void glTexImage2DMultisampleCoverageNV(TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, byte fixedSampleLocations)
        {
            _glTexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexImage3D;
        
        public static unsafe void glTexImage3D(TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexImage3DEXT;
        
        public static unsafe void glTexImage3DEXT(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, byte, void> _glTexImage3DMultisample;
        
        public static unsafe void glTexImage3DMultisample(TextureTarget target, int samples, InternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, byte, void> _glTexImage3DMultisampleCoverageNV;
        
        public static unsafe void glTexImage3DMultisampleCoverageNV(TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations)
        {
            _glTexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexImage3DOES;
        
        public static unsafe void glTexImage3DOES(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexImage4DSGIS;
        
        public static unsafe void glTexImage4DSGIS(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int size4d, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, byte, void> _glTexPageCommitmentARB;
        
        public static unsafe void glTexPageCommitmentARB(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit)
        {
            _glTexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, byte, void> _glTexPageCommitmentEXT;
        
        public static unsafe void glTexPageCommitmentEXT(uint target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit)
        {
            _glTexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, int, uint, ulong, byte, void> _glTexPageCommitmentMemNV;
        
        public static unsafe void glTexPageCommitmentMemNV(TextureTarget target, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, byte commit)
        {
            _glTexPageCommitmentMemNV(target, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, IntPtr, void> _glTexParameterIiv;
        
        public static unsafe void glTexParameterIiv(TextureTarget target, TextureParameterName pname, ref int @params)
        {
            _glTexParameterIiv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, IntPtr, void> _glTexParameterIivEXT;
        
        public static unsafe void glTexParameterIivEXT(TextureTarget target, TextureParameterName pname, ref int @params)
        {
            _glTexParameterIivEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, IntPtr, void> _glTexParameterIivOES;
        
        public static unsafe void glTexParameterIivOES(TextureTarget target, TextureParameterName pname, ref int @params)
        {
            _glTexParameterIivOES(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, IntPtr, void> _glTexParameterIuiv;
        
        public static unsafe void glTexParameterIuiv(TextureTarget target, TextureParameterName pname, ref uint @params)
        {
            _glTexParameterIuiv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, IntPtr, void> _glTexParameterIuivEXT;
        
        public static unsafe void glTexParameterIuivEXT(TextureTarget target, TextureParameterName pname, ref uint @params)
        {
            _glTexParameterIuivEXT(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, IntPtr, void> _glTexParameterIuivOES;
        
        public static unsafe void glTexParameterIuivOES(TextureTarget target, TextureParameterName pname, ref uint @params)
        {
            _glTexParameterIuivOES(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, float, void> _glTexParameterf;
        
        public static unsafe void glTexParameterf(TextureTarget target, TextureParameterName pname, float param)
        {
            _glTexParameterf(target, pname, param);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, IntPtr, void> _glTexParameterfv;
        
        public static unsafe void glTexParameterfv(TextureTarget target, TextureParameterName pname, ref float @params)
        {
            _glTexParameterfv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, int, void> _glTexParameteri;
        
        public static unsafe void glTexParameteri(TextureTarget target, TextureParameterName pname, int param)
        {
            _glTexParameteri(target, pname, param);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, IntPtr, void> _glTexParameteriv;
        
        public static unsafe void glTexParameteriv(TextureTarget target, TextureParameterName pname, ref int @params)
        {
            _glTexParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, int, void> _glTexParameterx;
        
        public static unsafe void glTexParameterx(TextureTarget target, GetTextureParameter pname, int param)
        {
            _glTexParameterx(target, pname, param);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, int, void> _glTexParameterxOES;
        
        public static unsafe void glTexParameterxOES(TextureTarget target, GetTextureParameter pname, int param)
        {
            _glTexParameterxOES(target, pname, param);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glTexParameterxv;
        
        public static unsafe void glTexParameterxv(TextureTarget target, GetTextureParameter pname, ref int @params)
        {
            _glTexParameterxv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glTexParameterxvOES;
        
        public static unsafe void glTexParameterxvOES(TextureTarget target, GetTextureParameter pname, ref int @params)
        {
            _glTexParameterxvOES(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, uint, void> _glTexRenderbufferNV;
        
        public static unsafe void glTexRenderbufferNV(TextureTarget target, uint renderbuffer)
        {
            _glTexRenderbufferNV(target, renderbuffer);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, void> _glTexStorage1D;
        
        public static unsafe void glTexStorage1D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width)
        {
            _glTexStorage1D(target, levels, internalformat, width);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, void> _glTexStorage1DEXT;
        
        public static unsafe void glTexStorage1DEXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width)
        {
            _glTexStorage1DEXT(target, levels, internalformat, width);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, void> _glTexStorage2D;
        
        public static unsafe void glTexStorage2D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height)
        {
            _glTexStorage2D(target, levels, internalformat, width, height);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, void> _glTexStorage2DEXT;
        
        public static unsafe void glTexStorage2DEXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height)
        {
            _glTexStorage2DEXT(target, levels, internalformat, width, height);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, byte, void> _glTexStorage2DMultisample;
        
        public static unsafe void glTexStorage2DMultisample(TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, byte fixedsamplelocations)
        {
            _glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, int, void> _glTexStorage3D;
        
        public static unsafe void glTexStorage3D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
        {
            _glTexStorage3D(target, levels, internalformat, width, height, depth);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, int, void> _glTexStorage3DEXT;
        
        public static unsafe void glTexStorage3DEXT(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
        {
            _glTexStorage3DEXT(target, levels, internalformat, width, height, depth);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, int, byte, void> _glTexStorage3DMultisample;
        
        public static unsafe void glTexStorage3DMultisample(TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, int, byte, void> _glTexStorage3DMultisampleOES;
        
        public static unsafe void glTexStorage3DMultisampleOES(TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _glTexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, uint, ulong, void> _glTexStorageMem1DEXT;
        
        public static unsafe void glTexStorageMem1DEXT(TextureTarget target, int levels, SizedInternalFormat internalFormat, int width, uint memory, ulong offset)
        {
            _glTexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, uint, ulong, void> _glTexStorageMem2DEXT;
        
        public static unsafe void glTexStorageMem2DEXT(TextureTarget target, int levels, SizedInternalFormat internalFormat, int width, int height, uint memory, ulong offset)
        {
            _glTexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, byte, uint, ulong, void> _glTexStorageMem2DMultisampleEXT;
        
        public static unsafe void glTexStorageMem2DMultisampleEXT(TextureTarget target, int samples, SizedInternalFormat internalFormat, int width, int height, byte fixedSampleLocations, uint memory, ulong offset)
        {
            _glTexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, int, uint, ulong, void> _glTexStorageMem3DEXT;
        
        public static unsafe void glTexStorageMem3DEXT(TextureTarget target, int levels, SizedInternalFormat internalFormat, int width, int height, int depth, uint memory, ulong offset)
        {
            _glTexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, int, byte, uint, ulong, void> _glTexStorageMem3DMultisampleEXT;
        
        public static unsafe void glTexStorageMem3DMultisampleEXT(TextureTarget target, int samples, SizedInternalFormat internalFormat, int width, int height, int depth, byte fixedSampleLocations, uint memory, ulong offset)
        {
            _glTexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        }
        
        public static unsafe delegate*<TextureTarget, SizedInternalFormat, int, int, int, int, uint, void> _glTexStorageSparseAMD;
        
        public static unsafe void glTexStorageSparseAMD(TextureTarget target, SizedInternalFormat internalFormat, int width, int height, int depth, int layers, uint flags)
        {
            _glTexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexSubImage1D;
        
        public static unsafe void glTexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexSubImage1D(target, level, xoffset, width, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexSubImage1DEXT;
        
        public static unsafe void glTexSubImage1DEXT(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexSubImage1DEXT(target, level, xoffset, width, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexSubImage2D;
        
        public static unsafe void glTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexSubImage2DEXT;
        
        public static unsafe void glTexSubImage2DEXT(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexSubImage3D;
        
        public static unsafe void glTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexSubImage3DEXT;
        
        public static unsafe void glTexSubImage3DEXT(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexSubImage3DOES;
        
        public static unsafe void glTexSubImage3DOES(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexSubImage4DSGIS;
        
        public static unsafe void glTexSubImage4DSGIS(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, uint, ulong, void> _glTextureAttachMemoryNV;
        
        public static unsafe void glTextureAttachMemoryNV(uint texture, uint memory, ulong offset)
        {
            _glTextureAttachMemoryNV(texture, memory, offset);
        }
        
        public static unsafe delegate*<void> _glTextureBarrier;
        
        public static unsafe void glTextureBarrier()
        {
            _glTextureBarrier();
        }
        
        public static unsafe delegate*<void> _glTextureBarrierNV;
        
        public static unsafe void glTextureBarrierNV()
        {
            _glTextureBarrierNV();
        }
        
        public static unsafe delegate*<uint, SizedInternalFormat, uint, void> _glTextureBuffer;
        
        public static unsafe void glTextureBuffer(uint texture, SizedInternalFormat internalformat, uint buffer)
        {
            _glTextureBuffer(texture, internalformat, buffer);
        }
        
        public static unsafe delegate*<uint, TextureTarget, SizedInternalFormat, uint, void> _glTextureBufferEXT;
        
        public static unsafe void glTextureBufferEXT(uint texture, TextureTarget target, SizedInternalFormat internalformat, uint buffer)
        {
            _glTextureBufferEXT(texture, target, internalformat, buffer);
        }
        
        public static unsafe delegate*<uint, SizedInternalFormat, uint, long, long, void> _glTextureBufferRange;
        
        public static unsafe void glTextureBufferRange(uint texture, SizedInternalFormat internalformat, uint buffer, long offset, long size)
        {
            _glTextureBufferRange(texture, internalformat, buffer, offset, size);
        }
        
        public static unsafe delegate*<uint, TextureTarget, SizedInternalFormat, uint, long, long, void> _glTextureBufferRangeEXT;
        
        public static unsafe void glTextureBufferRangeEXT(uint texture, TextureTarget target, SizedInternalFormat internalformat, uint buffer, long offset, long size)
        {
            _glTextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size);
        }
        
        public static unsafe delegate*<byte, byte, byte, byte, void> _glTextureColorMaskSGIS;
        
        public static unsafe void glTextureColorMaskSGIS(byte red, byte green, byte blue, byte alpha)
        {
            _glTextureColorMaskSGIS(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<uint, uint, uint, float, float, float, float, float, void> _glTextureFoveationParametersQCOM;
        
        public static unsafe void glTextureFoveationParametersQCOM(uint texture, uint layer, uint focalPoint, float focalX, float focalY, float gainX, float gainY, float foveaArea)
        {
            _glTextureFoveationParametersQCOM(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTextureImage1DEXT;
        
        public static unsafe void glTextureImage1DEXT(uint texture, TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTextureImage2DEXT;
        
        public static unsafe void glTextureImage2DEXT(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, int, int, byte, void> _glTextureImage2DMultisampleCoverageNV;
        
        public static unsafe void glTextureImage2DMultisampleCoverageNV(uint texture, TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, byte fixedSampleLocations)
        {
            _glTextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, int, byte, void> _glTextureImage2DMultisampleNV;
        
        public static unsafe void glTextureImage2DMultisampleNV(uint texture, TextureTarget target, int samples, int internalFormat, int width, int height, byte fixedSampleLocations)
        {
            _glTextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTextureImage3DEXT;
        
        public static unsafe void glTextureImage3DEXT(uint texture, TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, int, int, int, byte, void> _glTextureImage3DMultisampleCoverageNV;
        
        public static unsafe void glTextureImage3DMultisampleCoverageNV(uint texture, TextureTarget target, int coverageSamples, int colorSamples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations)
        {
            _glTextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, int, int, byte, void> _glTextureImage3DMultisampleNV;
        
        public static unsafe void glTextureImage3DMultisampleNV(uint texture, TextureTarget target, int samples, int internalFormat, int width, int height, int depth, byte fixedSampleLocations)
        {
            _glTextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
        }
        
        public static unsafe delegate*<LightTexturePNameEXT, void> _glTextureLightEXT;
        
        public static unsafe void glTextureLightEXT(LightTexturePNameEXT pname)
        {
            _glTextureLightEXT(pname);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, void> _glTextureMaterialEXT;
        
        public static unsafe void glTextureMaterialEXT(MaterialFace face, MaterialParameter mode)
        {
            _glTextureMaterialEXT(face, mode);
        }
        
        public static unsafe delegate*<TextureNormalModeEXT, void> _glTextureNormalEXT;
        
        public static unsafe void glTextureNormalEXT(TextureNormalModeEXT mode)
        {
            _glTextureNormalEXT(mode);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, byte, void> _glTexturePageCommitmentEXT;
        
        public static unsafe void glTexturePageCommitmentEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit)
        {
            _glTexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, int, uint, ulong, byte, void> _glTexturePageCommitmentMemNV;
        
        public static unsafe void glTexturePageCommitmentMemNV(uint texture, int layer, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, uint memory, ulong offset, byte commit)
        {
            _glTexturePageCommitmentMemNV(texture, layer, level, xoffset, yoffset, zoffset, width, height, depth, memory, offset, commit);
        }
        
        public static unsafe delegate*<uint, TextureParameterName, IntPtr, void> _glTextureParameterIiv;
        
        public static unsafe void glTextureParameterIiv(uint texture, TextureParameterName pname, ref int @params)
        {
            _glTextureParameterIiv(texture, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, TextureTarget, TextureParameterName, IntPtr, void> _glTextureParameterIivEXT;
        
        public static unsafe void glTextureParameterIivEXT(uint texture, TextureTarget target, TextureParameterName pname, ref int @params)
        {
            _glTextureParameterIivEXT(texture, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, TextureParameterName, IntPtr, void> _glTextureParameterIuiv;
        
        public static unsafe void glTextureParameterIuiv(uint texture, TextureParameterName pname, ref uint @params)
        {
            _glTextureParameterIuiv(texture, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, TextureTarget, TextureParameterName, IntPtr, void> _glTextureParameterIuivEXT;
        
        public static unsafe void glTextureParameterIuivEXT(uint texture, TextureTarget target, TextureParameterName pname, ref uint @params)
        {
            _glTextureParameterIuivEXT(texture, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, TextureParameterName, float, void> _glTextureParameterf;
        
        public static unsafe void glTextureParameterf(uint texture, TextureParameterName pname, float param)
        {
            _glTextureParameterf(texture, pname, param);
        }
        
        public static unsafe delegate*<uint, TextureTarget, TextureParameterName, float, void> _glTextureParameterfEXT;
        
        public static unsafe void glTextureParameterfEXT(uint texture, TextureTarget target, TextureParameterName pname, float param)
        {
            _glTextureParameterfEXT(texture, target, pname, param);
        }
        
        public static unsafe delegate*<uint, TextureParameterName, IntPtr, void> _glTextureParameterfv;
        
        public static unsafe void glTextureParameterfv(uint texture, TextureParameterName pname, ref float param)
        {
            _glTextureParameterfv(texture, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, TextureTarget, TextureParameterName, IntPtr, void> _glTextureParameterfvEXT;
        
        public static unsafe void glTextureParameterfvEXT(uint texture, TextureTarget target, TextureParameterName pname, ref float @params)
        {
            _glTextureParameterfvEXT(texture, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, TextureParameterName, int, void> _glTextureParameteri;
        
        public static unsafe void glTextureParameteri(uint texture, TextureParameterName pname, int param)
        {
            _glTextureParameteri(texture, pname, param);
        }
        
        public static unsafe delegate*<uint, TextureTarget, TextureParameterName, int, void> _glTextureParameteriEXT;
        
        public static unsafe void glTextureParameteriEXT(uint texture, TextureTarget target, TextureParameterName pname, int param)
        {
            _glTextureParameteriEXT(texture, target, pname, param);
        }
        
        public static unsafe delegate*<uint, TextureParameterName, IntPtr, void> _glTextureParameteriv;
        
        public static unsafe void glTextureParameteriv(uint texture, TextureParameterName pname, ref int param)
        {
            _glTextureParameteriv(texture, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, TextureTarget, TextureParameterName, IntPtr, void> _glTextureParameterivEXT;
        
        public static unsafe void glTextureParameterivEXT(uint texture, TextureTarget target, TextureParameterName pname, ref int @params)
        {
            _glTextureParameterivEXT(texture, target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glTextureRangeAPPLE;
        
        public static unsafe void glTextureRangeAPPLE(uint target, int length, IntPtr pointer)
        {
            _glTextureRangeAPPLE(target, length, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, TextureTarget, uint, void> _glTextureRenderbufferEXT;
        
        public static unsafe void glTextureRenderbufferEXT(uint texture, TextureTarget target, uint renderbuffer)
        {
            _glTextureRenderbufferEXT(texture, target, renderbuffer);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, void> _glTextureStorage1D;
        
        public static unsafe void glTextureStorage1D(uint texture, int levels, SizedInternalFormat internalformat, int width)
        {
            _glTextureStorage1D(texture, levels, internalformat, width);
        }
        
        public static unsafe delegate*<uint, uint, int, SizedInternalFormat, int, void> _glTextureStorage1DEXT;
        
        public static unsafe void glTextureStorage1DEXT(uint texture, uint target, int levels, SizedInternalFormat internalformat, int width)
        {
            _glTextureStorage1DEXT(texture, target, levels, internalformat, width);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, int, void> _glTextureStorage2D;
        
        public static unsafe void glTextureStorage2D(uint texture, int levels, SizedInternalFormat internalformat, int width, int height)
        {
            _glTextureStorage2D(texture, levels, internalformat, width, height);
        }
        
        public static unsafe delegate*<uint, uint, int, SizedInternalFormat, int, int, void> _glTextureStorage2DEXT;
        
        public static unsafe void glTextureStorage2DEXT(uint texture, uint target, int levels, SizedInternalFormat internalformat, int width, int height)
        {
            _glTextureStorage2DEXT(texture, target, levels, internalformat, width, height);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, int, byte, void> _glTextureStorage2DMultisample;
        
        public static unsafe void glTextureStorage2DMultisample(uint texture, int samples, SizedInternalFormat internalformat, int width, int height, byte fixedsamplelocations)
        {
            _glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, SizedInternalFormat, int, int, byte, void> _glTextureStorage2DMultisampleEXT;
        
        public static unsafe void glTextureStorage2DMultisampleEXT(uint texture, TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, byte fixedsamplelocations)
        {
            _glTextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, int, int, void> _glTextureStorage3D;
        
        public static unsafe void glTextureStorage3D(uint texture, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
        {
            _glTextureStorage3D(texture, levels, internalformat, width, height, depth);
        }
        
        public static unsafe delegate*<uint, uint, int, SizedInternalFormat, int, int, int, void> _glTextureStorage3DEXT;
        
        public static unsafe void glTextureStorage3DEXT(uint texture, uint target, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
        {
            _glTextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, int, int, byte, void> _glTextureStorage3DMultisample;
        
        public static unsafe void glTextureStorage3DMultisample(uint texture, int samples, SizedInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        public static unsafe delegate*<uint, uint, int, SizedInternalFormat, int, int, int, byte, void> _glTextureStorage3DMultisampleEXT;
        
        public static unsafe void glTextureStorage3DMultisampleEXT(uint texture, uint target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _glTextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, uint, ulong, void> _glTextureStorageMem1DEXT;
        
        public static unsafe void glTextureStorageMem1DEXT(uint texture, int levels, SizedInternalFormat internalFormat, int width, uint memory, ulong offset)
        {
            _glTextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, int, uint, ulong, void> _glTextureStorageMem2DEXT;
        
        public static unsafe void glTextureStorageMem2DEXT(uint texture, int levels, SizedInternalFormat internalFormat, int width, int height, uint memory, ulong offset)
        {
            _glTextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, int, byte, uint, ulong, void> _glTextureStorageMem2DMultisampleEXT;
        
        public static unsafe void glTextureStorageMem2DMultisampleEXT(uint texture, int samples, SizedInternalFormat internalFormat, int width, int height, byte fixedSampleLocations, uint memory, ulong offset)
        {
            _glTextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, int, int, uint, ulong, void> _glTextureStorageMem3DEXT;
        
        public static unsafe void glTextureStorageMem3DEXT(uint texture, int levels, SizedInternalFormat internalFormat, int width, int height, int depth, uint memory, ulong offset)
        {
            _glTextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, int, int, byte, uint, ulong, void> _glTextureStorageMem3DMultisampleEXT;
        
        public static unsafe void glTextureStorageMem3DMultisampleEXT(uint texture, int samples, SizedInternalFormat internalFormat, int width, int height, int depth, byte fixedSampleLocations, uint memory, ulong offset)
        {
            _glTextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
        }
        
        public static unsafe delegate*<uint, uint, SizedInternalFormat, int, int, int, int, uint, void> _glTextureStorageSparseAMD;
        
        public static unsafe void glTextureStorageSparseAMD(uint texture, uint target, SizedInternalFormat internalFormat, int width, int height, int depth, int layers, uint flags)
        {
            _glTextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags);
        }
        
        public static unsafe delegate*<uint, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTextureSubImage1D;
        
        public static unsafe void glTextureSubImage1D(uint texture, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTextureSubImage1D(texture, level, xoffset, width, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTextureSubImage1DEXT;
        
        public static unsafe void glTextureSubImage1DEXT(uint texture, TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTextureSubImage2D;
        
        public static unsafe void glTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTextureSubImage2DEXT;
        
        public static unsafe void glTextureSubImage2DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTextureSubImage3D;
        
        public static unsafe void glTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTextureSubImage3DEXT;
        
        public static unsafe void glTextureSubImage3DEXT(uint texture, TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, TextureTarget, uint, SizedInternalFormat, uint, uint, uint, uint, void> _glTextureView;
        
        public static unsafe void glTextureView(uint texture, TextureTarget target, uint origtexture, SizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            _glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        
        public static unsafe delegate*<uint, TextureTarget, uint, SizedInternalFormat, uint, uint, uint, uint, void> _glTextureViewEXT;
        
        public static unsafe void glTextureViewEXT(uint texture, TextureTarget target, uint origtexture, SizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            _glTextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        
        public static unsafe delegate*<uint, TextureTarget, uint, SizedInternalFormat, uint, uint, uint, uint, void> _glTextureViewOES;
        
        public static unsafe void glTextureViewOES(uint texture, TextureTarget target, uint origtexture, SizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            _glTextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        
        public static unsafe delegate*<VertexAttribEnumNV, uint, VertexAttribEnumNV, VertexAttribEnumNV, void> _glTrackMatrixNV;
        
        public static unsafe void glTrackMatrixNV(VertexAttribEnumNV target, uint address, VertexAttribEnumNV matrix, VertexAttribEnumNV transform)
        {
            _glTrackMatrixNV(target, address, matrix, transform);
        }
        
        public static unsafe delegate*<int, IntPtr, uint, void> _glTransformFeedbackAttribsNV;
        
        public static unsafe void glTransformFeedbackAttribsNV(int count, ref int attribs, uint bufferMode)
        {
            _glTransformFeedbackAttribsNV(count, (IntPtr)attribs, bufferMode);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glTransformFeedbackBufferBase;
        
        public static unsafe void glTransformFeedbackBufferBase(uint xfb, uint index, uint buffer)
        {
            _glTransformFeedbackBufferBase(xfb, index, buffer);
        }
        
        public static unsafe delegate*<uint, uint, uint, long, long, void> _glTransformFeedbackBufferRange;
        
        public static unsafe void glTransformFeedbackBufferRange(uint xfb, uint index, uint buffer, long offset, long size)
        {
            _glTransformFeedbackBufferRange(xfb, index, buffer, offset, size);
        }
        
        public static unsafe delegate*<int, IntPtr, int, IntPtr, uint, void> _glTransformFeedbackStreamAttribsNV;
        
        public static unsafe void glTransformFeedbackStreamAttribsNV(int count, ref int attribs, int nbuffers, ref int bufstreams, uint bufferMode)
        {
            _glTransformFeedbackStreamAttribsNV(count, (IntPtr)attribs, nbuffers, (IntPtr)bufstreams, bufferMode);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, TransformFeedbackBufferMode, void> _glTransformFeedbackVaryings;
        
        public static unsafe void glTransformFeedbackVaryings(uint program, int count, out IntPtr varyings, TransformFeedbackBufferMode bufferMode)
        {
            _glTransformFeedbackVaryings(program, count, (IntPtr)varyings, bufferMode);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, uint, void> _glTransformFeedbackVaryingsEXT;
        
        public static unsafe void glTransformFeedbackVaryingsEXT(uint program, int count, out IntPtr varyings, uint bufferMode)
        {
            _glTransformFeedbackVaryingsEXT(program, count, (IntPtr)varyings, bufferMode);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, uint, void> _glTransformFeedbackVaryingsNV;
        
        public static unsafe void glTransformFeedbackVaryingsNV(uint program, int count, ref int locations, uint bufferMode)
        {
            _glTransformFeedbackVaryingsNV(program, count, (IntPtr)locations, bufferMode);
        }
        
        public static unsafe delegate*<uint, uint, PathTransformType, IntPtr, void> _glTransformPathNV;
        
        public static unsafe void glTransformPathNV(uint resultPath, uint srcPath, PathTransformType transformType, ref float transformValues)
        {
            _glTransformPathNV(resultPath, srcPath, transformType, (IntPtr)transformValues);
        }
        
        public static unsafe delegate*<double, double, double, void> _glTranslated;
        
        public static unsafe void glTranslated(double x, double y, double z)
        {
            _glTranslated(x, y, z);
        }
        
        public static unsafe delegate*<float, float, float, void> _glTranslatef;
        
        public static unsafe void glTranslatef(float x, float y, float z)
        {
            _glTranslatef(x, y, z);
        }
        
        public static unsafe delegate*<int, int, int, void> _glTranslatex;
        
        public static unsafe void glTranslatex(int x, int y, int z)
        {
            _glTranslatex(x, y, z);
        }
        
        public static unsafe delegate*<int, int, int, void> _glTranslatexOES;
        
        public static unsafe void glTranslatexOES(int x, int y, int z)
        {
            _glTranslatexOES(x, y, z);
        }
        
        public static unsafe delegate*<int, double, void> _glUniform1d;
        
        public static unsafe void glUniform1d(int location, double x)
        {
            _glUniform1d(location, x);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1dv;
        
        public static unsafe void glUniform1dv(int location, int count, out IntPtr value)
        {
            _glUniform1dv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, float, void> _glUniform1f;
        
        public static unsafe void glUniform1f(int location, float v0)
        {
            _glUniform1f(location, v0);
        }
        
        public static unsafe delegate*<int, float, void> _glUniform1fARB;
        
        public static unsafe void glUniform1fARB(int location, float v0)
        {
            _glUniform1fARB(location, v0);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1fv;
        
        public static unsafe void glUniform1fv(int location, int count, out IntPtr value)
        {
            _glUniform1fv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1fvARB;
        
        public static unsafe void glUniform1fvARB(int location, int count, out IntPtr value)
        {
            _glUniform1fvARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, void> _glUniform1i;
        
        public static unsafe void glUniform1i(int location, int v0)
        {
            _glUniform1i(location, v0);
        }
        
        public static unsafe delegate*<int, long, void> _glUniform1i64ARB;
        
        public static unsafe void glUniform1i64ARB(int location, long x)
        {
            _glUniform1i64ARB(location, x);
        }
        
        public static unsafe delegate*<int, long, void> _glUniform1i64NV;
        
        public static unsafe void glUniform1i64NV(int location, long x)
        {
            _glUniform1i64NV(location, x);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1i64vARB;
        
        public static unsafe void glUniform1i64vARB(int location, int count, out IntPtr value)
        {
            _glUniform1i64vARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1i64vNV;
        
        public static unsafe void glUniform1i64vNV(int location, int count, out IntPtr value)
        {
            _glUniform1i64vNV(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, void> _glUniform1iARB;
        
        public static unsafe void glUniform1iARB(int location, int v0)
        {
            _glUniform1iARB(location, v0);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1iv;
        
        public static unsafe void glUniform1iv(int location, int count, out IntPtr value)
        {
            _glUniform1iv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1ivARB;
        
        public static unsafe void glUniform1ivARB(int location, int count, out IntPtr value)
        {
            _glUniform1ivARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, uint, void> _glUniform1ui;
        
        public static unsafe void glUniform1ui(int location, uint v0)
        {
            _glUniform1ui(location, v0);
        }
        
        public static unsafe delegate*<int, ulong, void> _glUniform1ui64ARB;
        
        public static unsafe void glUniform1ui64ARB(int location, ulong x)
        {
            _glUniform1ui64ARB(location, x);
        }
        
        public static unsafe delegate*<int, ulong, void> _glUniform1ui64NV;
        
        public static unsafe void glUniform1ui64NV(int location, ulong x)
        {
            _glUniform1ui64NV(location, x);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1ui64vARB;
        
        public static unsafe void glUniform1ui64vARB(int location, int count, out IntPtr value)
        {
            _glUniform1ui64vARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1ui64vNV;
        
        public static unsafe void glUniform1ui64vNV(int location, int count, out IntPtr value)
        {
            _glUniform1ui64vNV(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, uint, void> _glUniform1uiEXT;
        
        public static unsafe void glUniform1uiEXT(int location, uint v0)
        {
            _glUniform1uiEXT(location, v0);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1uiv;
        
        public static unsafe void glUniform1uiv(int location, int count, out IntPtr value)
        {
            _glUniform1uiv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1uivEXT;
        
        public static unsafe void glUniform1uivEXT(int location, int count, out IntPtr value)
        {
            _glUniform1uivEXT(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, double, double, void> _glUniform2d;
        
        public static unsafe void glUniform2d(int location, double x, double y)
        {
            _glUniform2d(location, x, y);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2dv;
        
        public static unsafe void glUniform2dv(int location, int count, out IntPtr value)
        {
            _glUniform2dv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, float, float, void> _glUniform2f;
        
        public static unsafe void glUniform2f(int location, float v0, float v1)
        {
            _glUniform2f(location, v0, v1);
        }
        
        public static unsafe delegate*<int, float, float, void> _glUniform2fARB;
        
        public static unsafe void glUniform2fARB(int location, float v0, float v1)
        {
            _glUniform2fARB(location, v0, v1);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2fv;
        
        public static unsafe void glUniform2fv(int location, int count, out IntPtr value)
        {
            _glUniform2fv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2fvARB;
        
        public static unsafe void glUniform2fvARB(int location, int count, out IntPtr value)
        {
            _glUniform2fvARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, int, void> _glUniform2i;
        
        public static unsafe void glUniform2i(int location, int v0, int v1)
        {
            _glUniform2i(location, v0, v1);
        }
        
        public static unsafe delegate*<int, long, long, void> _glUniform2i64ARB;
        
        public static unsafe void glUniform2i64ARB(int location, long x, long y)
        {
            _glUniform2i64ARB(location, x, y);
        }
        
        public static unsafe delegate*<int, long, long, void> _glUniform2i64NV;
        
        public static unsafe void glUniform2i64NV(int location, long x, long y)
        {
            _glUniform2i64NV(location, x, y);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2i64vARB;
        
        public static unsafe void glUniform2i64vARB(int location, int count, out IntPtr value)
        {
            _glUniform2i64vARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2i64vNV;
        
        public static unsafe void glUniform2i64vNV(int location, int count, out IntPtr value)
        {
            _glUniform2i64vNV(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, int, void> _glUniform2iARB;
        
        public static unsafe void glUniform2iARB(int location, int v0, int v1)
        {
            _glUniform2iARB(location, v0, v1);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2iv;
        
        public static unsafe void glUniform2iv(int location, int count, out IntPtr value)
        {
            _glUniform2iv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2ivARB;
        
        public static unsafe void glUniform2ivARB(int location, int count, out IntPtr value)
        {
            _glUniform2ivARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, uint, uint, void> _glUniform2ui;
        
        public static unsafe void glUniform2ui(int location, uint v0, uint v1)
        {
            _glUniform2ui(location, v0, v1);
        }
        
        public static unsafe delegate*<int, ulong, ulong, void> _glUniform2ui64ARB;
        
        public static unsafe void glUniform2ui64ARB(int location, ulong x, ulong y)
        {
            _glUniform2ui64ARB(location, x, y);
        }
        
        public static unsafe delegate*<int, ulong, ulong, void> _glUniform2ui64NV;
        
        public static unsafe void glUniform2ui64NV(int location, ulong x, ulong y)
        {
            _glUniform2ui64NV(location, x, y);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2ui64vARB;
        
        public static unsafe void glUniform2ui64vARB(int location, int count, out IntPtr value)
        {
            _glUniform2ui64vARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2ui64vNV;
        
        public static unsafe void glUniform2ui64vNV(int location, int count, out IntPtr value)
        {
            _glUniform2ui64vNV(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, uint, uint, void> _glUniform2uiEXT;
        
        public static unsafe void glUniform2uiEXT(int location, uint v0, uint v1)
        {
            _glUniform2uiEXT(location, v0, v1);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2uiv;
        
        public static unsafe void glUniform2uiv(int location, int count, out IntPtr value)
        {
            _glUniform2uiv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2uivEXT;
        
        public static unsafe void glUniform2uivEXT(int location, int count, out IntPtr value)
        {
            _glUniform2uivEXT(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, double, double, double, void> _glUniform3d;
        
        public static unsafe void glUniform3d(int location, double x, double y, double z)
        {
            _glUniform3d(location, x, y, z);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3dv;
        
        public static unsafe void glUniform3dv(int location, int count, out IntPtr value)
        {
            _glUniform3dv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, float, float, float, void> _glUniform3f;
        
        public static unsafe void glUniform3f(int location, float v0, float v1, float v2)
        {
            _glUniform3f(location, v0, v1, v2);
        }
        
        public static unsafe delegate*<int, float, float, float, void> _glUniform3fARB;
        
        public static unsafe void glUniform3fARB(int location, float v0, float v1, float v2)
        {
            _glUniform3fARB(location, v0, v1, v2);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3fv;
        
        public static unsafe void glUniform3fv(int location, int count, out IntPtr value)
        {
            _glUniform3fv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3fvARB;
        
        public static unsafe void glUniform3fvARB(int location, int count, out IntPtr value)
        {
            _glUniform3fvARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glUniform3i;
        
        public static unsafe void glUniform3i(int location, int v0, int v1, int v2)
        {
            _glUniform3i(location, v0, v1, v2);
        }
        
        public static unsafe delegate*<int, long, long, long, void> _glUniform3i64ARB;
        
        public static unsafe void glUniform3i64ARB(int location, long x, long y, long z)
        {
            _glUniform3i64ARB(location, x, y, z);
        }
        
        public static unsafe delegate*<int, long, long, long, void> _glUniform3i64NV;
        
        public static unsafe void glUniform3i64NV(int location, long x, long y, long z)
        {
            _glUniform3i64NV(location, x, y, z);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3i64vARB;
        
        public static unsafe void glUniform3i64vARB(int location, int count, out IntPtr value)
        {
            _glUniform3i64vARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3i64vNV;
        
        public static unsafe void glUniform3i64vNV(int location, int count, out IntPtr value)
        {
            _glUniform3i64vNV(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glUniform3iARB;
        
        public static unsafe void glUniform3iARB(int location, int v0, int v1, int v2)
        {
            _glUniform3iARB(location, v0, v1, v2);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3iv;
        
        public static unsafe void glUniform3iv(int location, int count, out IntPtr value)
        {
            _glUniform3iv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3ivARB;
        
        public static unsafe void glUniform3ivARB(int location, int count, out IntPtr value)
        {
            _glUniform3ivARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, uint, uint, uint, void> _glUniform3ui;
        
        public static unsafe void glUniform3ui(int location, uint v0, uint v1, uint v2)
        {
            _glUniform3ui(location, v0, v1, v2);
        }
        
        public static unsafe delegate*<int, ulong, ulong, ulong, void> _glUniform3ui64ARB;
        
        public static unsafe void glUniform3ui64ARB(int location, ulong x, ulong y, ulong z)
        {
            _glUniform3ui64ARB(location, x, y, z);
        }
        
        public static unsafe delegate*<int, ulong, ulong, ulong, void> _glUniform3ui64NV;
        
        public static unsafe void glUniform3ui64NV(int location, ulong x, ulong y, ulong z)
        {
            _glUniform3ui64NV(location, x, y, z);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3ui64vARB;
        
        public static unsafe void glUniform3ui64vARB(int location, int count, out IntPtr value)
        {
            _glUniform3ui64vARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3ui64vNV;
        
        public static unsafe void glUniform3ui64vNV(int location, int count, out IntPtr value)
        {
            _glUniform3ui64vNV(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, uint, uint, uint, void> _glUniform3uiEXT;
        
        public static unsafe void glUniform3uiEXT(int location, uint v0, uint v1, uint v2)
        {
            _glUniform3uiEXT(location, v0, v1, v2);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3uiv;
        
        public static unsafe void glUniform3uiv(int location, int count, out IntPtr value)
        {
            _glUniform3uiv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3uivEXT;
        
        public static unsafe void glUniform3uivEXT(int location, int count, out IntPtr value)
        {
            _glUniform3uivEXT(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, double, double, double, double, void> _glUniform4d;
        
        public static unsafe void glUniform4d(int location, double x, double y, double z, double w)
        {
            _glUniform4d(location, x, y, z, w);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4dv;
        
        public static unsafe void glUniform4dv(int location, int count, out IntPtr value)
        {
            _glUniform4dv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, float, float, float, float, void> _glUniform4f;
        
        public static unsafe void glUniform4f(int location, float v0, float v1, float v2, float v3)
        {
            _glUniform4f(location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<int, float, float, float, float, void> _glUniform4fARB;
        
        public static unsafe void glUniform4fARB(int location, float v0, float v1, float v2, float v3)
        {
            _glUniform4fARB(location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4fv;
        
        public static unsafe void glUniform4fv(int location, int count, out IntPtr value)
        {
            _glUniform4fv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4fvARB;
        
        public static unsafe void glUniform4fvARB(int location, int count, out IntPtr value)
        {
            _glUniform4fvARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, int, int, int, void> _glUniform4i;
        
        public static unsafe void glUniform4i(int location, int v0, int v1, int v2, int v3)
        {
            _glUniform4i(location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<int, long, long, long, long, void> _glUniform4i64ARB;
        
        public static unsafe void glUniform4i64ARB(int location, long x, long y, long z, long w)
        {
            _glUniform4i64ARB(location, x, y, z, w);
        }
        
        public static unsafe delegate*<int, long, long, long, long, void> _glUniform4i64NV;
        
        public static unsafe void glUniform4i64NV(int location, long x, long y, long z, long w)
        {
            _glUniform4i64NV(location, x, y, z, w);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4i64vARB;
        
        public static unsafe void glUniform4i64vARB(int location, int count, out IntPtr value)
        {
            _glUniform4i64vARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4i64vNV;
        
        public static unsafe void glUniform4i64vNV(int location, int count, out IntPtr value)
        {
            _glUniform4i64vNV(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, int, int, int, void> _glUniform4iARB;
        
        public static unsafe void glUniform4iARB(int location, int v0, int v1, int v2, int v3)
        {
            _glUniform4iARB(location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4iv;
        
        public static unsafe void glUniform4iv(int location, int count, out IntPtr value)
        {
            _glUniform4iv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4ivARB;
        
        public static unsafe void glUniform4ivARB(int location, int count, out IntPtr value)
        {
            _glUniform4ivARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, uint, uint, uint, uint, void> _glUniform4ui;
        
        public static unsafe void glUniform4ui(int location, uint v0, uint v1, uint v2, uint v3)
        {
            _glUniform4ui(location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<int, ulong, ulong, ulong, ulong, void> _glUniform4ui64ARB;
        
        public static unsafe void glUniform4ui64ARB(int location, ulong x, ulong y, ulong z, ulong w)
        {
            _glUniform4ui64ARB(location, x, y, z, w);
        }
        
        public static unsafe delegate*<int, ulong, ulong, ulong, ulong, void> _glUniform4ui64NV;
        
        public static unsafe void glUniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w)
        {
            _glUniform4ui64NV(location, x, y, z, w);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4ui64vARB;
        
        public static unsafe void glUniform4ui64vARB(int location, int count, out IntPtr value)
        {
            _glUniform4ui64vARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4ui64vNV;
        
        public static unsafe void glUniform4ui64vNV(int location, int count, out IntPtr value)
        {
            _glUniform4ui64vNV(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, uint, uint, uint, uint, void> _glUniform4uiEXT;
        
        public static unsafe void glUniform4uiEXT(int location, uint v0, uint v1, uint v2, uint v3)
        {
            _glUniform4uiEXT(location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4uiv;
        
        public static unsafe void glUniform4uiv(int location, int count, out IntPtr value)
        {
            _glUniform4uiv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4uivEXT;
        
        public static unsafe void glUniform4uivEXT(int location, int count, out IntPtr value)
        {
            _glUniform4uivEXT(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glUniformBlockBinding;
        
        public static unsafe void glUniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
        {
            _glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
        }
        
        public static unsafe delegate*<uint, int, uint, void> _glUniformBufferEXT;
        
        public static unsafe void glUniformBufferEXT(uint program, int location, uint buffer)
        {
            _glUniformBufferEXT(program, location, buffer);
        }
        
        public static unsafe delegate*<int, ulong, void> _glUniformHandleui64ARB;
        
        public static unsafe void glUniformHandleui64ARB(int location, ulong value)
        {
            _glUniformHandleui64ARB(location, value);
        }
        
        public static unsafe delegate*<int, ulong, void> _glUniformHandleui64IMG;
        
        public static unsafe void glUniformHandleui64IMG(int location, ulong value)
        {
            _glUniformHandleui64IMG(location, value);
        }
        
        public static unsafe delegate*<int, ulong, void> _glUniformHandleui64NV;
        
        public static unsafe void glUniformHandleui64NV(int location, ulong value)
        {
            _glUniformHandleui64NV(location, value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniformHandleui64vARB;
        
        public static unsafe void glUniformHandleui64vARB(int location, int count, ref ulong value)
        {
            _glUniformHandleui64vARB(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniformHandleui64vIMG;
        
        public static unsafe void glUniformHandleui64vIMG(int location, int count, ref ulong value)
        {
            _glUniformHandleui64vIMG(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniformHandleui64vNV;
        
        public static unsafe void glUniformHandleui64vNV(int location, int count, ref ulong value)
        {
            _glUniformHandleui64vNV(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2dv;
        
        public static unsafe void glUniformMatrix2dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2fv;
        
        public static unsafe void glUniformMatrix2fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2fvARB;
        
        public static unsafe void glUniformMatrix2fvARB(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2fvARB(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2x3dv;
        
        public static unsafe void glUniformMatrix2x3dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2x3dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2x3fv;
        
        public static unsafe void glUniformMatrix2x3fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2x3fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2x3fvNV;
        
        public static unsafe void glUniformMatrix2x3fvNV(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2x3fvNV(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2x4dv;
        
        public static unsafe void glUniformMatrix2x4dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2x4dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2x4fv;
        
        public static unsafe void glUniformMatrix2x4fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2x4fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2x4fvNV;
        
        public static unsafe void glUniformMatrix2x4fvNV(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2x4fvNV(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3dv;
        
        public static unsafe void glUniformMatrix3dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3fv;
        
        public static unsafe void glUniformMatrix3fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3fvARB;
        
        public static unsafe void glUniformMatrix3fvARB(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3fvARB(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3x2dv;
        
        public static unsafe void glUniformMatrix3x2dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3x2dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3x2fv;
        
        public static unsafe void glUniformMatrix3x2fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3x2fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3x2fvNV;
        
        public static unsafe void glUniformMatrix3x2fvNV(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3x2fvNV(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3x4dv;
        
        public static unsafe void glUniformMatrix3x4dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3x4dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3x4fv;
        
        public static unsafe void glUniformMatrix3x4fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3x4fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3x4fvNV;
        
        public static unsafe void glUniformMatrix3x4fvNV(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3x4fvNV(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4dv;
        
        public static unsafe void glUniformMatrix4dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4fv;
        
        public static unsafe void glUniformMatrix4fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4fvARB;
        
        public static unsafe void glUniformMatrix4fvARB(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4fvARB(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4x2dv;
        
        public static unsafe void glUniformMatrix4x2dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4x2dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4x2fv;
        
        public static unsafe void glUniformMatrix4x2fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4x2fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4x2fvNV;
        
        public static unsafe void glUniformMatrix4x2fvNV(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4x2fvNV(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4x3dv;
        
        public static unsafe void glUniformMatrix4x3dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4x3dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4x3fv;
        
        public static unsafe void glUniformMatrix4x3fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4x3fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4x3fvNV;
        
        public static unsafe void glUniformMatrix4x3fvNV(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4x3fvNV(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<ShaderType, int, IntPtr, void> _glUniformSubroutinesuiv;
        
        public static unsafe void glUniformSubroutinesuiv(ShaderType shadertype, int count, ref uint indices)
        {
            _glUniformSubroutinesuiv(shadertype, count, (IntPtr)indices);
        }
        
        public static unsafe delegate*<int, ulong, void> _glUniformui64NV;
        
        public static unsafe void glUniformui64NV(int location, ulong value)
        {
            _glUniformui64NV(location, value);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniformui64vNV;
        
        public static unsafe void glUniformui64vNV(int location, int count, out IntPtr value)
        {
            _glUniformui64vNV(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<void> _glUnlockArraysEXT;
        
        public static unsafe void glUnlockArraysEXT()
        {
            _glUnlockArraysEXT();
        }
        
        public static unsafe delegate*<BufferTargetARB, byte> _glUnmapBuffer;
        
        public static unsafe byte glUnmapBuffer(BufferTargetARB target)
        {
            return _glUnmapBuffer(target);
        }
        
        public static unsafe delegate*<BufferTargetARB, byte> _glUnmapBufferARB;
        
        public static unsafe byte glUnmapBufferARB(BufferTargetARB target)
        {
            return _glUnmapBufferARB(target);
        }
        
        public static unsafe delegate*<uint, byte> _glUnmapBufferOES;
        
        public static unsafe byte glUnmapBufferOES(uint target)
        {
            return _glUnmapBufferOES(target);
        }
        
        public static unsafe delegate*<uint, byte> _glUnmapNamedBuffer;
        
        public static unsafe byte glUnmapNamedBuffer(uint buffer)
        {
            return _glUnmapNamedBuffer(buffer);
        }
        
        public static unsafe delegate*<uint, byte> _glUnmapNamedBufferEXT;
        
        public static unsafe byte glUnmapNamedBufferEXT(uint buffer)
        {
            return _glUnmapNamedBufferEXT(buffer);
        }
        
        public static unsafe delegate*<uint, void> _glUnmapObjectBufferATI;
        
        public static unsafe void glUnmapObjectBufferATI(uint buffer)
        {
            _glUnmapObjectBufferATI(buffer);
        }
        
        public static unsafe delegate*<uint, int, void> _glUnmapTexture2DINTEL;
        
        public static unsafe void glUnmapTexture2DINTEL(uint texture, int level)
        {
            _glUnmapTexture2DINTEL(texture, level);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, PreserveModeATI, void> _glUpdateObjectBufferATI;
        
        public static unsafe void glUpdateObjectBufferATI(uint buffer, uint offset, int size, IntPtr pointer, PreserveModeATI preserve)
        {
            _glUpdateObjectBufferATI(buffer, offset, size, (IntPtr)pointer, preserve);
        }
        
        public static unsafe delegate*<uint, void> _glUploadGpuMaskNVX;
        
        public static unsafe void glUploadGpuMaskNVX(uint mask)
        {
            _glUploadGpuMaskNVX(mask);
        }
        
        public static unsafe delegate*<uint, void> _glUseProgram;
        
        public static unsafe void glUseProgram(uint program)
        {
            _glUseProgram(program);
        }
        
        public static unsafe delegate*<uint, void> _glUseProgramObjectARB;
        
        public static unsafe void glUseProgramObjectARB(uint programObj)
        {
            _glUseProgramObjectARB(programObj);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glUseProgramStages;
        
        public static unsafe void glUseProgramStages(uint pipeline, uint stages, uint program)
        {
            _glUseProgramStages(pipeline, stages, program);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glUseProgramStagesEXT;
        
        public static unsafe void glUseProgramStagesEXT(uint pipeline, uint stages, uint program)
        {
            _glUseProgramStagesEXT(pipeline, stages, program);
        }
        
        public static unsafe delegate*<uint, uint, void> _glUseShaderProgramEXT;
        
        public static unsafe void glUseShaderProgramEXT(uint type, uint program)
        {
            _glUseShaderProgramEXT(type, program);
        }
        
        public static unsafe delegate*<void> _glVDPAUFiniNV;
        
        public static unsafe void glVDPAUFiniNV()
        {
            _glVDPAUFiniNV();
        }
        
        public static unsafe delegate*<long, uint, int, IntPtr, IntPtr, void> _glVDPAUGetSurfaceivNV;
        
        public static unsafe void glVDPAUGetSurfaceivNV(long surface, uint pname, int count, ref int length, ref int values)
        {
            _glVDPAUGetSurfaceivNV(surface, pname, count, (IntPtr)length, (IntPtr)values);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glVDPAUInitNV;
        
        public static unsafe void glVDPAUInitNV(IntPtr vdpDevice, IntPtr getProcAddress)
        {
            _glVDPAUInitNV((IntPtr)vdpDevice, (IntPtr)getProcAddress);
        }
        
        public static unsafe delegate*<long, byte> _glVDPAUIsSurfaceNV;
        
        public static unsafe byte glVDPAUIsSurfaceNV(long surface)
        {
            return _glVDPAUIsSurfaceNV(surface);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glVDPAUMapSurfacesNV;
        
        public static unsafe void glVDPAUMapSurfacesNV(int numSurfaces, ref long surfaces)
        {
            _glVDPAUMapSurfacesNV(numSurfaces, (IntPtr)surfaces);
        }
        
        public static unsafe delegate*<IntPtr, uint, int, IntPtr, long> _glVDPAURegisterOutputSurfaceNV;
        
        public static unsafe long glVDPAURegisterOutputSurfaceNV(IntPtr vdpSurface, uint target, int numTextureNames, ref uint textureNames)
        {
            return _glVDPAURegisterOutputSurfaceNV((IntPtr)vdpSurface, target, numTextureNames, (IntPtr)textureNames);
        }
        
        public static unsafe delegate*<IntPtr, uint, int, IntPtr, long> _glVDPAURegisterVideoSurfaceNV;
        
        public static unsafe long glVDPAURegisterVideoSurfaceNV(IntPtr vdpSurface, uint target, int numTextureNames, ref uint textureNames)
        {
            return _glVDPAURegisterVideoSurfaceNV((IntPtr)vdpSurface, target, numTextureNames, (IntPtr)textureNames);
        }
        
        public static unsafe delegate*<IntPtr, uint, int, IntPtr, byte, long> _glVDPAURegisterVideoSurfaceWithPictureStructureNV;
        
        public static unsafe long glVDPAURegisterVideoSurfaceWithPictureStructureNV(IntPtr vdpSurface, uint target, int numTextureNames, ref uint textureNames, byte isFrameStructure)
        {
            return _glVDPAURegisterVideoSurfaceWithPictureStructureNV((IntPtr)vdpSurface, target, numTextureNames, (IntPtr)textureNames, isFrameStructure);
        }
        
        public static unsafe delegate*<long, uint, void> _glVDPAUSurfaceAccessNV;
        
        public static unsafe void glVDPAUSurfaceAccessNV(long surface, uint access)
        {
            _glVDPAUSurfaceAccessNV(surface, access);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glVDPAUUnmapSurfacesNV;
        
        public static unsafe void glVDPAUUnmapSurfacesNV(int numSurface, ref long surfaces)
        {
            _glVDPAUUnmapSurfacesNV(numSurface, (IntPtr)surfaces);
        }
        
        public static unsafe delegate*<long, void> _glVDPAUUnregisterSurfaceNV;
        
        public static unsafe void glVDPAUUnregisterSurfaceNV(long surface)
        {
            _glVDPAUUnregisterSurfaceNV(surface);
        }
        
        public static unsafe delegate*<uint, void> _glValidateProgram;
        
        public static unsafe void glValidateProgram(uint program)
        {
            _glValidateProgram(program);
        }
        
        public static unsafe delegate*<uint, void> _glValidateProgramARB;
        
        public static unsafe void glValidateProgramARB(uint programObj)
        {
            _glValidateProgramARB(programObj);
        }
        
        public static unsafe delegate*<uint, void> _glValidateProgramPipeline;
        
        public static unsafe void glValidateProgramPipeline(uint pipeline)
        {
            _glValidateProgramPipeline(pipeline);
        }
        
        public static unsafe delegate*<uint, void> _glValidateProgramPipelineEXT;
        
        public static unsafe void glValidateProgramPipelineEXT(uint pipeline)
        {
            _glValidateProgramPipelineEXT(pipeline);
        }
        
        public static unsafe delegate*<uint, ScalarType, int, uint, uint, void> _glVariantArrayObjectATI;
        
        public static unsafe void glVariantArrayObjectATI(uint id, ScalarType type, int stride, uint buffer, uint offset)
        {
            _glVariantArrayObjectATI(id, type, stride, buffer, offset);
        }
        
        public static unsafe delegate*<uint, ScalarType, uint, IntPtr, void> _glVariantPointerEXT;
        
        public static unsafe void glVariantPointerEXT(uint id, ScalarType type, uint stride, IntPtr addr)
        {
            _glVariantPointerEXT(id, type, stride, (IntPtr)addr);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVariantbvEXT;
        
        public static unsafe void glVariantbvEXT(uint id, ref sbyte addr)
        {
            _glVariantbvEXT(id, (IntPtr)addr);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVariantdvEXT;
        
        public static unsafe void glVariantdvEXT(uint id, ref double addr)
        {
            _glVariantdvEXT(id, (IntPtr)addr);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVariantfvEXT;
        
        public static unsafe void glVariantfvEXT(uint id, ref float addr)
        {
            _glVariantfvEXT(id, (IntPtr)addr);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVariantivEXT;
        
        public static unsafe void glVariantivEXT(uint id, ref int addr)
        {
            _glVariantivEXT(id, (IntPtr)addr);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVariantsvEXT;
        
        public static unsafe void glVariantsvEXT(uint id, ref short addr)
        {
            _glVariantsvEXT(id, (IntPtr)addr);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVariantubvEXT;
        
        public static unsafe void glVariantubvEXT(uint id, ref byte addr)
        {
            _glVariantubvEXT(id, (IntPtr)addr);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVariantuivEXT;
        
        public static unsafe void glVariantuivEXT(uint id, ref uint addr)
        {
            _glVariantuivEXT(id, (IntPtr)addr);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVariantusvEXT;
        
        public static unsafe void glVariantusvEXT(uint id, ref ushort addr)
        {
            _glVariantusvEXT(id, (IntPtr)addr);
        }
        
        public static unsafe delegate*<sbyte, sbyte, void> _glVertex2bOES;
        
        public static unsafe void glVertex2bOES(sbyte x, sbyte y)
        {
            _glVertex2bOES(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex2bvOES;
        
        public static unsafe void glVertex2bvOES(ref sbyte coords)
        {
            _glVertex2bvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<double, double, void> _glVertex2d;
        
        public static unsafe void glVertex2d(double x, double y)
        {
            _glVertex2d(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex2dv;
        
        public static unsafe void glVertex2dv(ref double v)
        {
            _glVertex2dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, void> _glVertex2f;
        
        public static unsafe void glVertex2f(float x, float y)
        {
            _glVertex2f(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex2fv;
        
        public static unsafe void glVertex2fv(ref float v)
        {
            _glVertex2fv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, void> _glVertex2hNV;
        
        public static unsafe void glVertex2hNV(ushort x, ushort y)
        {
            _glVertex2hNV(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex2hvNV;
        
        public static unsafe void glVertex2hvNV(ref ushort v)
        {
            _glVertex2hvNV((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, void> _glVertex2i;
        
        public static unsafe void glVertex2i(int x, int y)
        {
            _glVertex2i(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex2iv;
        
        public static unsafe void glVertex2iv(ref int v)
        {
            _glVertex2iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, void> _glVertex2s;
        
        public static unsafe void glVertex2s(short x, short y)
        {
            _glVertex2s(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex2sv;
        
        public static unsafe void glVertex2sv(ref short v)
        {
            _glVertex2sv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, void> _glVertex2xOES;
        
        public static unsafe void glVertex2xOES(int x)
        {
            _glVertex2xOES(x);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex2xvOES;
        
        public static unsafe void glVertex2xvOES(ref int coords)
        {
            _glVertex2xvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, void> _glVertex3bOES;
        
        public static unsafe void glVertex3bOES(sbyte x, sbyte y, sbyte z)
        {
            _glVertex3bOES(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex3bvOES;
        
        public static unsafe void glVertex3bvOES(ref sbyte coords)
        {
            _glVertex3bvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<double, double, double, void> _glVertex3d;
        
        public static unsafe void glVertex3d(double x, double y, double z)
        {
            _glVertex3d(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex3dv;
        
        public static unsafe void glVertex3dv(ref double v)
        {
            _glVertex3dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glVertex3f;
        
        public static unsafe void glVertex3f(float x, float y, float z)
        {
            _glVertex3f(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex3fv;
        
        public static unsafe void glVertex3fv(ref float v)
        {
            _glVertex3fv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, void> _glVertex3hNV;
        
        public static unsafe void glVertex3hNV(ushort x, ushort y, ushort z)
        {
            _glVertex3hNV(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex3hvNV;
        
        public static unsafe void glVertex3hvNV(ref ushort v)
        {
            _glVertex3hvNV((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glVertex3i;
        
        public static unsafe void glVertex3i(int x, int y, int z)
        {
            _glVertex3i(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex3iv;
        
        public static unsafe void glVertex3iv(ref int v)
        {
            _glVertex3iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glVertex3s;
        
        public static unsafe void glVertex3s(short x, short y, short z)
        {
            _glVertex3s(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex3sv;
        
        public static unsafe void glVertex3sv(ref short v)
        {
            _glVertex3sv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, void> _glVertex3xOES;
        
        public static unsafe void glVertex3xOES(int x, int y)
        {
            _glVertex3xOES(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex3xvOES;
        
        public static unsafe void glVertex3xvOES(ref int coords)
        {
            _glVertex3xvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, sbyte, void> _glVertex4bOES;
        
        public static unsafe void glVertex4bOES(sbyte x, sbyte y, sbyte z, sbyte w)
        {
            _glVertex4bOES(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex4bvOES;
        
        public static unsafe void glVertex4bvOES(ref sbyte coords)
        {
            _glVertex4bvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<double, double, double, double, void> _glVertex4d;
        
        public static unsafe void glVertex4d(double x, double y, double z, double w)
        {
            _glVertex4d(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex4dv;
        
        public static unsafe void glVertex4dv(ref double v)
        {
            _glVertex4dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glVertex4f;
        
        public static unsafe void glVertex4f(float x, float y, float z, float w)
        {
            _glVertex4f(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex4fv;
        
        public static unsafe void glVertex4fv(ref float v)
        {
            _glVertex4fv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, ushort, void> _glVertex4hNV;
        
        public static unsafe void glVertex4hNV(ushort x, ushort y, ushort z, ushort w)
        {
            _glVertex4hNV(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex4hvNV;
        
        public static unsafe void glVertex4hvNV(ref ushort v)
        {
            _glVertex4hvNV((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glVertex4i;
        
        public static unsafe void glVertex4i(int x, int y, int z, int w)
        {
            _glVertex4i(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex4iv;
        
        public static unsafe void glVertex4iv(ref int v)
        {
            _glVertex4iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, short, void> _glVertex4s;
        
        public static unsafe void glVertex4s(short x, short y, short z, short w)
        {
            _glVertex4s(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex4sv;
        
        public static unsafe void glVertex4sv(ref short v)
        {
            _glVertex4sv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glVertex4xOES;
        
        public static unsafe void glVertex4xOES(int x, int y, int z)
        {
            _glVertex4xOES(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex4xvOES;
        
        public static unsafe void glVertex4xvOES(ref int coords)
        {
            _glVertex4xvOES((IntPtr)coords);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glVertexArrayAttribBinding;
        
        public static unsafe void glVertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex)
        {
            _glVertexArrayAttribBinding(vaobj, attribindex, bindingindex);
        }
        
        public static unsafe delegate*<uint, uint, int, VertexAttribType, byte, uint, void> _glVertexArrayAttribFormat;
        
        public static unsafe void glVertexArrayAttribFormat(uint vaobj, uint attribindex, int size, VertexAttribType type, byte normalized, uint relativeoffset)
        {
            _glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
        }
        
        public static unsafe delegate*<uint, uint, int, VertexAttribIType, uint, void> _glVertexArrayAttribIFormat;
        
        public static unsafe void glVertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, VertexAttribIType type, uint relativeoffset)
        {
            _glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
        }
        
        public static unsafe delegate*<uint, uint, int, VertexAttribLType, uint, void> _glVertexArrayAttribLFormat;
        
        public static unsafe void glVertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, VertexAttribLType type, uint relativeoffset)
        {
            _glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
        }
        
        public static unsafe delegate*<uint, uint, uint, long, int, void> _glVertexArrayBindVertexBufferEXT;
        
        public static unsafe void glVertexArrayBindVertexBufferEXT(uint vaobj, uint bindingindex, uint buffer, long offset, int stride)
        {
            _glVertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glVertexArrayBindingDivisor;
        
        public static unsafe void glVertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor)
        {
            _glVertexArrayBindingDivisor(vaobj, bindingindex, divisor);
        }
        
        public static unsafe delegate*<uint, uint, int, ColorPointerType, int, long, void> _glVertexArrayColorOffsetEXT;
        
        public static unsafe void glVertexArrayColorOffsetEXT(uint vaobj, uint buffer, int size, ColorPointerType type, int stride, long offset)
        {
            _glVertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
        }
        
        public static unsafe delegate*<uint, uint, int, long, void> _glVertexArrayEdgeFlagOffsetEXT;
        
        public static unsafe void glVertexArrayEdgeFlagOffsetEXT(uint vaobj, uint buffer, int stride, long offset)
        {
            _glVertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexArrayElementBuffer;
        
        public static unsafe void glVertexArrayElementBuffer(uint vaobj, uint buffer)
        {
            _glVertexArrayElementBuffer(vaobj, buffer);
        }
        
        public static unsafe delegate*<uint, uint, FogCoordinatePointerType, int, long, void> _glVertexArrayFogCoordOffsetEXT;
        
        public static unsafe void glVertexArrayFogCoordOffsetEXT(uint vaobj, uint buffer, FogCoordinatePointerType type, int stride, long offset)
        {
            _glVertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset);
        }
        
        public static unsafe delegate*<uint, uint, IndexPointerType, int, long, void> _glVertexArrayIndexOffsetEXT;
        
        public static unsafe void glVertexArrayIndexOffsetEXT(uint vaobj, uint buffer, IndexPointerType type, int stride, long offset)
        {
            _glVertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset);
        }
        
        public static unsafe delegate*<uint, uint, uint, int, TexCoordPointerType, int, long, void> _glVertexArrayMultiTexCoordOffsetEXT;
        
        public static unsafe void glVertexArrayMultiTexCoordOffsetEXT(uint vaobj, uint buffer, uint texunit, int size, TexCoordPointerType type, int stride, long offset)
        {
            _glVertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset);
        }
        
        public static unsafe delegate*<uint, uint, NormalPointerType, int, long, void> _glVertexArrayNormalOffsetEXT;
        
        public static unsafe void glVertexArrayNormalOffsetEXT(uint vaobj, uint buffer, NormalPointerType type, int stride, long offset)
        {
            _glVertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset);
        }
        
        public static unsafe delegate*<VertexArrayPNameAPPLE, int, void> _glVertexArrayParameteriAPPLE;
        
        public static unsafe void glVertexArrayParameteriAPPLE(VertexArrayPNameAPPLE pname, int param)
        {
            _glVertexArrayParameteriAPPLE(pname, param);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glVertexArrayRangeAPPLE;
        
        public static unsafe void glVertexArrayRangeAPPLE(int length, IntPtr pointer)
        {
            _glVertexArrayRangeAPPLE(length, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glVertexArrayRangeNV;
        
        public static unsafe void glVertexArrayRangeNV(int length, IntPtr pointer)
        {
            _glVertexArrayRangeNV(length, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, uint, int, ColorPointerType, int, long, void> _glVertexArraySecondaryColorOffsetEXT;
        
        public static unsafe void glVertexArraySecondaryColorOffsetEXT(uint vaobj, uint buffer, int size, ColorPointerType type, int stride, long offset)
        {
            _glVertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset);
        }
        
        public static unsafe delegate*<uint, uint, int, TexCoordPointerType, int, long, void> _glVertexArrayTexCoordOffsetEXT;
        
        public static unsafe void glVertexArrayTexCoordOffsetEXT(uint vaobj, uint buffer, int size, TexCoordPointerType type, int stride, long offset)
        {
            _glVertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glVertexArrayVertexAttribBindingEXT;
        
        public static unsafe void glVertexArrayVertexAttribBindingEXT(uint vaobj, uint attribindex, uint bindingindex)
        {
            _glVertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glVertexArrayVertexAttribDivisorEXT;
        
        public static unsafe void glVertexArrayVertexAttribDivisorEXT(uint vaobj, uint index, uint divisor)
        {
            _glVertexArrayVertexAttribDivisorEXT(vaobj, index, divisor);
        }
        
        public static unsafe delegate*<uint, uint, int, VertexAttribType, byte, uint, void> _glVertexArrayVertexAttribFormatEXT;
        
        public static unsafe void glVertexArrayVertexAttribFormatEXT(uint vaobj, uint attribindex, int size, VertexAttribType type, byte normalized, uint relativeoffset)
        {
            _glVertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset);
        }
        
        public static unsafe delegate*<uint, uint, int, VertexAttribIType, uint, void> _glVertexArrayVertexAttribIFormatEXT;
        
        public static unsafe void glVertexArrayVertexAttribIFormatEXT(uint vaobj, uint attribindex, int size, VertexAttribIType type, uint relativeoffset)
        {
            _glVertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset);
        }
        
        public static unsafe delegate*<uint, uint, uint, int, VertexAttribType, int, long, void> _glVertexArrayVertexAttribIOffsetEXT;
        
        public static unsafe void glVertexArrayVertexAttribIOffsetEXT(uint vaobj, uint buffer, uint index, int size, VertexAttribType type, int stride, long offset)
        {
            _glVertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
        }
        
        public static unsafe delegate*<uint, uint, int, VertexAttribLType, uint, void> _glVertexArrayVertexAttribLFormatEXT;
        
        public static unsafe void glVertexArrayVertexAttribLFormatEXT(uint vaobj, uint attribindex, int size, VertexAttribLType type, uint relativeoffset)
        {
            _glVertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset);
        }
        
        public static unsafe delegate*<uint, uint, uint, int, VertexAttribLType, int, long, void> _glVertexArrayVertexAttribLOffsetEXT;
        
        public static unsafe void glVertexArrayVertexAttribLOffsetEXT(uint vaobj, uint buffer, uint index, int size, VertexAttribLType type, int stride, long offset)
        {
            _glVertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset);
        }
        
        public static unsafe delegate*<uint, uint, uint, int, VertexAttribPointerType, byte, int, long, void> _glVertexArrayVertexAttribOffsetEXT;
        
        public static unsafe void glVertexArrayVertexAttribOffsetEXT(uint vaobj, uint buffer, uint index, int size, VertexAttribPointerType type, byte normalized, int stride, long offset)
        {
            _glVertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glVertexArrayVertexBindingDivisorEXT;
        
        public static unsafe void glVertexArrayVertexBindingDivisorEXT(uint vaobj, uint bindingindex, uint divisor)
        {
            _glVertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor);
        }
        
        public static unsafe delegate*<uint, uint, uint, long, int, void> _glVertexArrayVertexBuffer;
        
        public static unsafe void glVertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, long offset, int stride)
        {
            _glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, IntPtr, void> _glVertexArrayVertexBuffers;
        
        public static unsafe void glVertexArrayVertexBuffers(uint vaobj, uint first, int count, ref uint buffers, ref long offsets, ref int strides)
        {
            _glVertexArrayVertexBuffers(vaobj, first, count, (IntPtr)buffers, (IntPtr)offsets, (IntPtr)strides);
        }
        
        public static unsafe delegate*<uint, uint, int, VertexPointerType, int, long, void> _glVertexArrayVertexOffsetEXT;
        
        public static unsafe void glVertexArrayVertexOffsetEXT(uint vaobj, uint buffer, int size, VertexPointerType type, int stride, long offset)
        {
            _glVertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset);
        }
        
        public static unsafe delegate*<uint, double, void> _glVertexAttrib1d;
        
        public static unsafe void glVertexAttrib1d(uint index, double x)
        {
            _glVertexAttrib1d(index, x);
        }
        
        public static unsafe delegate*<uint, double, void> _glVertexAttrib1dARB;
        
        public static unsafe void glVertexAttrib1dARB(uint index, double x)
        {
            _glVertexAttrib1dARB(index, x);
        }
        
        public static unsafe delegate*<uint, double, void> _glVertexAttrib1dNV;
        
        public static unsafe void glVertexAttrib1dNV(uint index, double x)
        {
            _glVertexAttrib1dNV(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib1dv;
        
        public static unsafe void glVertexAttrib1dv(uint index, ref double v)
        {
            _glVertexAttrib1dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib1dvARB;
        
        public static unsafe void glVertexAttrib1dvARB(uint index, ref double v)
        {
            _glVertexAttrib1dvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib1dvNV;
        
        public static unsafe void glVertexAttrib1dvNV(uint index, ref double v)
        {
            _glVertexAttrib1dvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, void> _glVertexAttrib1f;
        
        public static unsafe void glVertexAttrib1f(uint index, float x)
        {
            _glVertexAttrib1f(index, x);
        }
        
        public static unsafe delegate*<uint, float, void> _glVertexAttrib1fARB;
        
        public static unsafe void glVertexAttrib1fARB(uint index, float x)
        {
            _glVertexAttrib1fARB(index, x);
        }
        
        public static unsafe delegate*<uint, float, void> _glVertexAttrib1fNV;
        
        public static unsafe void glVertexAttrib1fNV(uint index, float x)
        {
            _glVertexAttrib1fNV(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib1fv;
        
        public static unsafe void glVertexAttrib1fv(uint index, ref float v)
        {
            _glVertexAttrib1fv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib1fvARB;
        
        public static unsafe void glVertexAttrib1fvARB(uint index, ref float v)
        {
            _glVertexAttrib1fvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib1fvNV;
        
        public static unsafe void glVertexAttrib1fvNV(uint index, ref float v)
        {
            _glVertexAttrib1fvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, ushort, void> _glVertexAttrib1hNV;
        
        public static unsafe void glVertexAttrib1hNV(uint index, ushort x)
        {
            _glVertexAttrib1hNV(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib1hvNV;
        
        public static unsafe void glVertexAttrib1hvNV(uint index, ref ushort v)
        {
            _glVertexAttrib1hvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, short, void> _glVertexAttrib1s;
        
        public static unsafe void glVertexAttrib1s(uint index, short x)
        {
            _glVertexAttrib1s(index, x);
        }
        
        public static unsafe delegate*<uint, short, void> _glVertexAttrib1sARB;
        
        public static unsafe void glVertexAttrib1sARB(uint index, short x)
        {
            _glVertexAttrib1sARB(index, x);
        }
        
        public static unsafe delegate*<uint, short, void> _glVertexAttrib1sNV;
        
        public static unsafe void glVertexAttrib1sNV(uint index, short x)
        {
            _glVertexAttrib1sNV(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib1sv;
        
        public static unsafe void glVertexAttrib1sv(uint index, ref short v)
        {
            _glVertexAttrib1sv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib1svARB;
        
        public static unsafe void glVertexAttrib1svARB(uint index, ref short v)
        {
            _glVertexAttrib1svARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib1svNV;
        
        public static unsafe void glVertexAttrib1svNV(uint index, ref short v)
        {
            _glVertexAttrib1svNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, double, double, void> _glVertexAttrib2d;
        
        public static unsafe void glVertexAttrib2d(uint index, double x, double y)
        {
            _glVertexAttrib2d(index, x, y);
        }
        
        public static unsafe delegate*<uint, double, double, void> _glVertexAttrib2dARB;
        
        public static unsafe void glVertexAttrib2dARB(uint index, double x, double y)
        {
            _glVertexAttrib2dARB(index, x, y);
        }
        
        public static unsafe delegate*<uint, double, double, void> _glVertexAttrib2dNV;
        
        public static unsafe void glVertexAttrib2dNV(uint index, double x, double y)
        {
            _glVertexAttrib2dNV(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib2dv;
        
        public static unsafe void glVertexAttrib2dv(uint index, ref double v)
        {
            _glVertexAttrib2dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib2dvARB;
        
        public static unsafe void glVertexAttrib2dvARB(uint index, ref double v)
        {
            _glVertexAttrib2dvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib2dvNV;
        
        public static unsafe void glVertexAttrib2dvNV(uint index, ref double v)
        {
            _glVertexAttrib2dvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, float, void> _glVertexAttrib2f;
        
        public static unsafe void glVertexAttrib2f(uint index, float x, float y)
        {
            _glVertexAttrib2f(index, x, y);
        }
        
        public static unsafe delegate*<uint, float, float, void> _glVertexAttrib2fARB;
        
        public static unsafe void glVertexAttrib2fARB(uint index, float x, float y)
        {
            _glVertexAttrib2fARB(index, x, y);
        }
        
        public static unsafe delegate*<uint, float, float, void> _glVertexAttrib2fNV;
        
        public static unsafe void glVertexAttrib2fNV(uint index, float x, float y)
        {
            _glVertexAttrib2fNV(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib2fv;
        
        public static unsafe void glVertexAttrib2fv(uint index, ref float v)
        {
            _glVertexAttrib2fv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib2fvARB;
        
        public static unsafe void glVertexAttrib2fvARB(uint index, ref float v)
        {
            _glVertexAttrib2fvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib2fvNV;
        
        public static unsafe void glVertexAttrib2fvNV(uint index, ref float v)
        {
            _glVertexAttrib2fvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, ushort, ushort, void> _glVertexAttrib2hNV;
        
        public static unsafe void glVertexAttrib2hNV(uint index, ushort x, ushort y)
        {
            _glVertexAttrib2hNV(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib2hvNV;
        
        public static unsafe void glVertexAttrib2hvNV(uint index, ref ushort v)
        {
            _glVertexAttrib2hvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, short, short, void> _glVertexAttrib2s;
        
        public static unsafe void glVertexAttrib2s(uint index, short x, short y)
        {
            _glVertexAttrib2s(index, x, y);
        }
        
        public static unsafe delegate*<uint, short, short, void> _glVertexAttrib2sARB;
        
        public static unsafe void glVertexAttrib2sARB(uint index, short x, short y)
        {
            _glVertexAttrib2sARB(index, x, y);
        }
        
        public static unsafe delegate*<uint, short, short, void> _glVertexAttrib2sNV;
        
        public static unsafe void glVertexAttrib2sNV(uint index, short x, short y)
        {
            _glVertexAttrib2sNV(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib2sv;
        
        public static unsafe void glVertexAttrib2sv(uint index, ref short v)
        {
            _glVertexAttrib2sv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib2svARB;
        
        public static unsafe void glVertexAttrib2svARB(uint index, ref short v)
        {
            _glVertexAttrib2svARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib2svNV;
        
        public static unsafe void glVertexAttrib2svNV(uint index, ref short v)
        {
            _glVertexAttrib2svNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, double, double, double, void> _glVertexAttrib3d;
        
        public static unsafe void glVertexAttrib3d(uint index, double x, double y, double z)
        {
            _glVertexAttrib3d(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, double, double, double, void> _glVertexAttrib3dARB;
        
        public static unsafe void glVertexAttrib3dARB(uint index, double x, double y, double z)
        {
            _glVertexAttrib3dARB(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, double, double, double, void> _glVertexAttrib3dNV;
        
        public static unsafe void glVertexAttrib3dNV(uint index, double x, double y, double z)
        {
            _glVertexAttrib3dNV(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib3dv;
        
        public static unsafe void glVertexAttrib3dv(uint index, ref double v)
        {
            _glVertexAttrib3dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib3dvARB;
        
        public static unsafe void glVertexAttrib3dvARB(uint index, ref double v)
        {
            _glVertexAttrib3dvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib3dvNV;
        
        public static unsafe void glVertexAttrib3dvNV(uint index, ref double v)
        {
            _glVertexAttrib3dvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, float, float, void> _glVertexAttrib3f;
        
        public static unsafe void glVertexAttrib3f(uint index, float x, float y, float z)
        {
            _glVertexAttrib3f(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, float, float, float, void> _glVertexAttrib3fARB;
        
        public static unsafe void glVertexAttrib3fARB(uint index, float x, float y, float z)
        {
            _glVertexAttrib3fARB(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, float, float, float, void> _glVertexAttrib3fNV;
        
        public static unsafe void glVertexAttrib3fNV(uint index, float x, float y, float z)
        {
            _glVertexAttrib3fNV(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib3fv;
        
        public static unsafe void glVertexAttrib3fv(uint index, ref float v)
        {
            _glVertexAttrib3fv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib3fvARB;
        
        public static unsafe void glVertexAttrib3fvARB(uint index, ref float v)
        {
            _glVertexAttrib3fvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib3fvNV;
        
        public static unsafe void glVertexAttrib3fvNV(uint index, ref float v)
        {
            _glVertexAttrib3fvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, ushort, ushort, ushort, void> _glVertexAttrib3hNV;
        
        public static unsafe void glVertexAttrib3hNV(uint index, ushort x, ushort y, ushort z)
        {
            _glVertexAttrib3hNV(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib3hvNV;
        
        public static unsafe void glVertexAttrib3hvNV(uint index, ref ushort v)
        {
            _glVertexAttrib3hvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, short, short, short, void> _glVertexAttrib3s;
        
        public static unsafe void glVertexAttrib3s(uint index, short x, short y, short z)
        {
            _glVertexAttrib3s(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, short, short, short, void> _glVertexAttrib3sARB;
        
        public static unsafe void glVertexAttrib3sARB(uint index, short x, short y, short z)
        {
            _glVertexAttrib3sARB(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, short, short, short, void> _glVertexAttrib3sNV;
        
        public static unsafe void glVertexAttrib3sNV(uint index, short x, short y, short z)
        {
            _glVertexAttrib3sNV(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib3sv;
        
        public static unsafe void glVertexAttrib3sv(uint index, ref short v)
        {
            _glVertexAttrib3sv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib3svARB;
        
        public static unsafe void glVertexAttrib3svARB(uint index, ref short v)
        {
            _glVertexAttrib3svARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib3svNV;
        
        public static unsafe void glVertexAttrib3svNV(uint index, ref short v)
        {
            _glVertexAttrib3svNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4Nbv;
        
        public static unsafe void glVertexAttrib4Nbv(uint index, ref sbyte v)
        {
            _glVertexAttrib4Nbv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4NbvARB;
        
        public static unsafe void glVertexAttrib4NbvARB(uint index, ref sbyte v)
        {
            _glVertexAttrib4NbvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4Niv;
        
        public static unsafe void glVertexAttrib4Niv(uint index, ref int v)
        {
            _glVertexAttrib4Niv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4NivARB;
        
        public static unsafe void glVertexAttrib4NivARB(uint index, ref int v)
        {
            _glVertexAttrib4NivARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4Nsv;
        
        public static unsafe void glVertexAttrib4Nsv(uint index, ref short v)
        {
            _glVertexAttrib4Nsv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4NsvARB;
        
        public static unsafe void glVertexAttrib4NsvARB(uint index, ref short v)
        {
            _glVertexAttrib4NsvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, byte, byte, byte, byte, void> _glVertexAttrib4Nub;
        
        public static unsafe void glVertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w)
        {
            _glVertexAttrib4Nub(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, byte, byte, byte, byte, void> _glVertexAttrib4NubARB;
        
        public static unsafe void glVertexAttrib4NubARB(uint index, byte x, byte y, byte z, byte w)
        {
            _glVertexAttrib4NubARB(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4Nubv;
        
        public static unsafe void glVertexAttrib4Nubv(uint index, ref byte v)
        {
            _glVertexAttrib4Nubv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4NubvARB;
        
        public static unsafe void glVertexAttrib4NubvARB(uint index, ref byte v)
        {
            _glVertexAttrib4NubvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4Nuiv;
        
        public static unsafe void glVertexAttrib4Nuiv(uint index, ref uint v)
        {
            _glVertexAttrib4Nuiv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4NuivARB;
        
        public static unsafe void glVertexAttrib4NuivARB(uint index, ref uint v)
        {
            _glVertexAttrib4NuivARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4Nusv;
        
        public static unsafe void glVertexAttrib4Nusv(uint index, ref ushort v)
        {
            _glVertexAttrib4Nusv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4NusvARB;
        
        public static unsafe void glVertexAttrib4NusvARB(uint index, ref ushort v)
        {
            _glVertexAttrib4NusvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4bv;
        
        public static unsafe void glVertexAttrib4bv(uint index, ref sbyte v)
        {
            _glVertexAttrib4bv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4bvARB;
        
        public static unsafe void glVertexAttrib4bvARB(uint index, ref sbyte v)
        {
            _glVertexAttrib4bvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, double, double, double, double, void> _glVertexAttrib4d;
        
        public static unsafe void glVertexAttrib4d(uint index, double x, double y, double z, double w)
        {
            _glVertexAttrib4d(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, double, double, double, double, void> _glVertexAttrib4dARB;
        
        public static unsafe void glVertexAttrib4dARB(uint index, double x, double y, double z, double w)
        {
            _glVertexAttrib4dARB(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, double, double, double, double, void> _glVertexAttrib4dNV;
        
        public static unsafe void glVertexAttrib4dNV(uint index, double x, double y, double z, double w)
        {
            _glVertexAttrib4dNV(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4dv;
        
        public static unsafe void glVertexAttrib4dv(uint index, ref double v)
        {
            _glVertexAttrib4dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4dvARB;
        
        public static unsafe void glVertexAttrib4dvARB(uint index, ref double v)
        {
            _glVertexAttrib4dvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4dvNV;
        
        public static unsafe void glVertexAttrib4dvNV(uint index, ref double v)
        {
            _glVertexAttrib4dvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, float, float, float, void> _glVertexAttrib4f;
        
        public static unsafe void glVertexAttrib4f(uint index, float x, float y, float z, float w)
        {
            _glVertexAttrib4f(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, float, float, float, float, void> _glVertexAttrib4fARB;
        
        public static unsafe void glVertexAttrib4fARB(uint index, float x, float y, float z, float w)
        {
            _glVertexAttrib4fARB(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, float, float, float, float, void> _glVertexAttrib4fNV;
        
        public static unsafe void glVertexAttrib4fNV(uint index, float x, float y, float z, float w)
        {
            _glVertexAttrib4fNV(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4fv;
        
        public static unsafe void glVertexAttrib4fv(uint index, ref float v)
        {
            _glVertexAttrib4fv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4fvARB;
        
        public static unsafe void glVertexAttrib4fvARB(uint index, ref float v)
        {
            _glVertexAttrib4fvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4fvNV;
        
        public static unsafe void glVertexAttrib4fvNV(uint index, ref float v)
        {
            _glVertexAttrib4fvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, ushort, ushort, ushort, ushort, void> _glVertexAttrib4hNV;
        
        public static unsafe void glVertexAttrib4hNV(uint index, ushort x, ushort y, ushort z, ushort w)
        {
            _glVertexAttrib4hNV(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4hvNV;
        
        public static unsafe void glVertexAttrib4hvNV(uint index, ref ushort v)
        {
            _glVertexAttrib4hvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4iv;
        
        public static unsafe void glVertexAttrib4iv(uint index, ref int v)
        {
            _glVertexAttrib4iv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4ivARB;
        
        public static unsafe void glVertexAttrib4ivARB(uint index, ref int v)
        {
            _glVertexAttrib4ivARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, short, short, short, short, void> _glVertexAttrib4s;
        
        public static unsafe void glVertexAttrib4s(uint index, short x, short y, short z, short w)
        {
            _glVertexAttrib4s(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, short, short, short, short, void> _glVertexAttrib4sARB;
        
        public static unsafe void glVertexAttrib4sARB(uint index, short x, short y, short z, short w)
        {
            _glVertexAttrib4sARB(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, short, short, short, short, void> _glVertexAttrib4sNV;
        
        public static unsafe void glVertexAttrib4sNV(uint index, short x, short y, short z, short w)
        {
            _glVertexAttrib4sNV(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4sv;
        
        public static unsafe void glVertexAttrib4sv(uint index, ref short v)
        {
            _glVertexAttrib4sv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4svARB;
        
        public static unsafe void glVertexAttrib4svARB(uint index, ref short v)
        {
            _glVertexAttrib4svARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4svNV;
        
        public static unsafe void glVertexAttrib4svNV(uint index, ref short v)
        {
            _glVertexAttrib4svNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, byte, byte, byte, byte, void> _glVertexAttrib4ubNV;
        
        public static unsafe void glVertexAttrib4ubNV(uint index, byte x, byte y, byte z, byte w)
        {
            _glVertexAttrib4ubNV(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4ubv;
        
        public static unsafe void glVertexAttrib4ubv(uint index, ref byte v)
        {
            _glVertexAttrib4ubv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4ubvARB;
        
        public static unsafe void glVertexAttrib4ubvARB(uint index, ref byte v)
        {
            _glVertexAttrib4ubvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4ubvNV;
        
        public static unsafe void glVertexAttrib4ubvNV(uint index, ref byte v)
        {
            _glVertexAttrib4ubvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4uiv;
        
        public static unsafe void glVertexAttrib4uiv(uint index, ref uint v)
        {
            _glVertexAttrib4uiv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4uivARB;
        
        public static unsafe void glVertexAttrib4uivARB(uint index, ref uint v)
        {
            _glVertexAttrib4uivARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4usv;
        
        public static unsafe void glVertexAttrib4usv(uint index, ref ushort v)
        {
            _glVertexAttrib4usv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4usvARB;
        
        public static unsafe void glVertexAttrib4usvARB(uint index, ref ushort v)
        {
            _glVertexAttrib4usvARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribPointerType, byte, int, uint, uint, void> _glVertexAttribArrayObjectATI;
        
        public static unsafe void glVertexAttribArrayObjectATI(uint index, int size, VertexAttribPointerType type, byte normalized, int stride, uint buffer, uint offset)
        {
            _glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexAttribBinding;
        
        public static unsafe void glVertexAttribBinding(uint attribindex, uint bindingindex)
        {
            _glVertexAttribBinding(attribindex, bindingindex);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexAttribDivisor;
        
        public static unsafe void glVertexAttribDivisor(uint index, uint divisor)
        {
            _glVertexAttribDivisor(index, divisor);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexAttribDivisorANGLE;
        
        public static unsafe void glVertexAttribDivisorANGLE(uint index, uint divisor)
        {
            _glVertexAttribDivisorANGLE(index, divisor);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexAttribDivisorARB;
        
        public static unsafe void glVertexAttribDivisorARB(uint index, uint divisor)
        {
            _glVertexAttribDivisorARB(index, divisor);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexAttribDivisorEXT;
        
        public static unsafe void glVertexAttribDivisorEXT(uint index, uint divisor)
        {
            _glVertexAttribDivisorEXT(index, divisor);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexAttribDivisorNV;
        
        public static unsafe void glVertexAttribDivisorNV(uint index, uint divisor)
        {
            _glVertexAttribDivisorNV(index, divisor);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribType, byte, uint, void> _glVertexAttribFormat;
        
        public static unsafe void glVertexAttribFormat(uint attribindex, int size, VertexAttribType type, byte normalized, uint relativeoffset)
        {
            _glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribType, byte, int, void> _glVertexAttribFormatNV;
        
        public static unsafe void glVertexAttribFormatNV(uint index, int size, VertexAttribType type, byte normalized, int stride)
        {
            _glVertexAttribFormatNV(index, size, type, normalized, stride);
        }
        
        public static unsafe delegate*<uint, int, void> _glVertexAttribI1i;
        
        public static unsafe void glVertexAttribI1i(uint index, int x)
        {
            _glVertexAttribI1i(index, x);
        }
        
        public static unsafe delegate*<uint, int, void> _glVertexAttribI1iEXT;
        
        public static unsafe void glVertexAttribI1iEXT(uint index, int x)
        {
            _glVertexAttribI1iEXT(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI1iv;
        
        public static unsafe void glVertexAttribI1iv(uint index, ref int v)
        {
            _glVertexAttribI1iv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI1ivEXT;
        
        public static unsafe void glVertexAttribI1ivEXT(uint index, ref int v)
        {
            _glVertexAttribI1ivEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexAttribI1ui;
        
        public static unsafe void glVertexAttribI1ui(uint index, uint x)
        {
            _glVertexAttribI1ui(index, x);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexAttribI1uiEXT;
        
        public static unsafe void glVertexAttribI1uiEXT(uint index, uint x)
        {
            _glVertexAttribI1uiEXT(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI1uiv;
        
        public static unsafe void glVertexAttribI1uiv(uint index, ref uint v)
        {
            _glVertexAttribI1uiv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI1uivEXT;
        
        public static unsafe void glVertexAttribI1uivEXT(uint index, ref uint v)
        {
            _glVertexAttribI1uivEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, int, void> _glVertexAttribI2i;
        
        public static unsafe void glVertexAttribI2i(uint index, int x, int y)
        {
            _glVertexAttribI2i(index, x, y);
        }
        
        public static unsafe delegate*<uint, int, int, void> _glVertexAttribI2iEXT;
        
        public static unsafe void glVertexAttribI2iEXT(uint index, int x, int y)
        {
            _glVertexAttribI2iEXT(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI2iv;
        
        public static unsafe void glVertexAttribI2iv(uint index, ref int v)
        {
            _glVertexAttribI2iv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI2ivEXT;
        
        public static unsafe void glVertexAttribI2ivEXT(uint index, ref int v)
        {
            _glVertexAttribI2ivEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glVertexAttribI2ui;
        
        public static unsafe void glVertexAttribI2ui(uint index, uint x, uint y)
        {
            _glVertexAttribI2ui(index, x, y);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glVertexAttribI2uiEXT;
        
        public static unsafe void glVertexAttribI2uiEXT(uint index, uint x, uint y)
        {
            _glVertexAttribI2uiEXT(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI2uiv;
        
        public static unsafe void glVertexAttribI2uiv(uint index, ref uint v)
        {
            _glVertexAttribI2uiv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI2uivEXT;
        
        public static unsafe void glVertexAttribI2uivEXT(uint index, ref uint v)
        {
            _glVertexAttribI2uivEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, int, int, void> _glVertexAttribI3i;
        
        public static unsafe void glVertexAttribI3i(uint index, int x, int y, int z)
        {
            _glVertexAttribI3i(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, int, int, int, void> _glVertexAttribI3iEXT;
        
        public static unsafe void glVertexAttribI3iEXT(uint index, int x, int y, int z)
        {
            _glVertexAttribI3iEXT(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI3iv;
        
        public static unsafe void glVertexAttribI3iv(uint index, ref int v)
        {
            _glVertexAttribI3iv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI3ivEXT;
        
        public static unsafe void glVertexAttribI3ivEXT(uint index, ref int v)
        {
            _glVertexAttribI3ivEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, void> _glVertexAttribI3ui;
        
        public static unsafe void glVertexAttribI3ui(uint index, uint x, uint y, uint z)
        {
            _glVertexAttribI3ui(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, void> _glVertexAttribI3uiEXT;
        
        public static unsafe void glVertexAttribI3uiEXT(uint index, uint x, uint y, uint z)
        {
            _glVertexAttribI3uiEXT(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI3uiv;
        
        public static unsafe void glVertexAttribI3uiv(uint index, ref uint v)
        {
            _glVertexAttribI3uiv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI3uivEXT;
        
        public static unsafe void glVertexAttribI3uivEXT(uint index, ref uint v)
        {
            _glVertexAttribI3uivEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4bv;
        
        public static unsafe void glVertexAttribI4bv(uint index, ref sbyte v)
        {
            _glVertexAttribI4bv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4bvEXT;
        
        public static unsafe void glVertexAttribI4bvEXT(uint index, ref sbyte v)
        {
            _glVertexAttribI4bvEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, void> _glVertexAttribI4i;
        
        public static unsafe void glVertexAttribI4i(uint index, int x, int y, int z, int w)
        {
            _glVertexAttribI4i(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, void> _glVertexAttribI4iEXT;
        
        public static unsafe void glVertexAttribI4iEXT(uint index, int x, int y, int z, int w)
        {
            _glVertexAttribI4iEXT(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4iv;
        
        public static unsafe void glVertexAttribI4iv(uint index, ref int v)
        {
            _glVertexAttribI4iv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4ivEXT;
        
        public static unsafe void glVertexAttribI4ivEXT(uint index, ref int v)
        {
            _glVertexAttribI4ivEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4sv;
        
        public static unsafe void glVertexAttribI4sv(uint index, ref short v)
        {
            _glVertexAttribI4sv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4svEXT;
        
        public static unsafe void glVertexAttribI4svEXT(uint index, ref short v)
        {
            _glVertexAttribI4svEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4ubv;
        
        public static unsafe void glVertexAttribI4ubv(uint index, ref byte v)
        {
            _glVertexAttribI4ubv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4ubvEXT;
        
        public static unsafe void glVertexAttribI4ubvEXT(uint index, ref byte v)
        {
            _glVertexAttribI4ubvEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, uint, void> _glVertexAttribI4ui;
        
        public static unsafe void glVertexAttribI4ui(uint index, uint x, uint y, uint z, uint w)
        {
            _glVertexAttribI4ui(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, uint, void> _glVertexAttribI4uiEXT;
        
        public static unsafe void glVertexAttribI4uiEXT(uint index, uint x, uint y, uint z, uint w)
        {
            _glVertexAttribI4uiEXT(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4uiv;
        
        public static unsafe void glVertexAttribI4uiv(uint index, ref uint v)
        {
            _glVertexAttribI4uiv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4uivEXT;
        
        public static unsafe void glVertexAttribI4uivEXT(uint index, ref uint v)
        {
            _glVertexAttribI4uivEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4usv;
        
        public static unsafe void glVertexAttribI4usv(uint index, ref ushort v)
        {
            _glVertexAttribI4usv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4usvEXT;
        
        public static unsafe void glVertexAttribI4usvEXT(uint index, ref ushort v)
        {
            _glVertexAttribI4usvEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribIType, uint, void> _glVertexAttribIFormat;
        
        public static unsafe void glVertexAttribIFormat(uint attribindex, int size, VertexAttribIType type, uint relativeoffset)
        {
            _glVertexAttribIFormat(attribindex, size, type, relativeoffset);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribIType, int, void> _glVertexAttribIFormatNV;
        
        public static unsafe void glVertexAttribIFormatNV(uint index, int size, VertexAttribIType type, int stride)
        {
            _glVertexAttribIFormatNV(index, size, type, stride);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribIType, int, IntPtr, void> _glVertexAttribIPointer;
        
        public static unsafe void glVertexAttribIPointer(uint index, int size, VertexAttribIType type, int stride, IntPtr pointer)
        {
            _glVertexAttribIPointer(index, size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribIType, int, IntPtr, void> _glVertexAttribIPointerEXT;
        
        public static unsafe void glVertexAttribIPointerEXT(uint index, int size, VertexAttribIType type, int stride, IntPtr pointer)
        {
            _glVertexAttribIPointerEXT(index, size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, double, void> _glVertexAttribL1d;
        
        public static unsafe void glVertexAttribL1d(uint index, double x)
        {
            _glVertexAttribL1d(index, x);
        }
        
        public static unsafe delegate*<uint, double, void> _glVertexAttribL1dEXT;
        
        public static unsafe void glVertexAttribL1dEXT(uint index, double x)
        {
            _glVertexAttribL1dEXT(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL1dv;
        
        public static unsafe void glVertexAttribL1dv(uint index, ref double v)
        {
            _glVertexAttribL1dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL1dvEXT;
        
        public static unsafe void glVertexAttribL1dvEXT(uint index, ref double v)
        {
            _glVertexAttribL1dvEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, long, void> _glVertexAttribL1i64NV;
        
        public static unsafe void glVertexAttribL1i64NV(uint index, long x)
        {
            _glVertexAttribL1i64NV(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL1i64vNV;
        
        public static unsafe void glVertexAttribL1i64vNV(uint index, ref long v)
        {
            _glVertexAttribL1i64vNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, ulong, void> _glVertexAttribL1ui64ARB;
        
        public static unsafe void glVertexAttribL1ui64ARB(uint index, ulong x)
        {
            _glVertexAttribL1ui64ARB(index, x);
        }
        
        public static unsafe delegate*<uint, ulong, void> _glVertexAttribL1ui64NV;
        
        public static unsafe void glVertexAttribL1ui64NV(uint index, ulong x)
        {
            _glVertexAttribL1ui64NV(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL1ui64vARB;
        
        public static unsafe void glVertexAttribL1ui64vARB(uint index, ref ulong v)
        {
            _glVertexAttribL1ui64vARB(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL1ui64vNV;
        
        public static unsafe void glVertexAttribL1ui64vNV(uint index, ref ulong v)
        {
            _glVertexAttribL1ui64vNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, double, double, void> _glVertexAttribL2d;
        
        public static unsafe void glVertexAttribL2d(uint index, double x, double y)
        {
            _glVertexAttribL2d(index, x, y);
        }
        
        public static unsafe delegate*<uint, double, double, void> _glVertexAttribL2dEXT;
        
        public static unsafe void glVertexAttribL2dEXT(uint index, double x, double y)
        {
            _glVertexAttribL2dEXT(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL2dv;
        
        public static unsafe void glVertexAttribL2dv(uint index, ref double v)
        {
            _glVertexAttribL2dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL2dvEXT;
        
        public static unsafe void glVertexAttribL2dvEXT(uint index, ref double v)
        {
            _glVertexAttribL2dvEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, long, long, void> _glVertexAttribL2i64NV;
        
        public static unsafe void glVertexAttribL2i64NV(uint index, long x, long y)
        {
            _glVertexAttribL2i64NV(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL2i64vNV;
        
        public static unsafe void glVertexAttribL2i64vNV(uint index, ref long v)
        {
            _glVertexAttribL2i64vNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, ulong, ulong, void> _glVertexAttribL2ui64NV;
        
        public static unsafe void glVertexAttribL2ui64NV(uint index, ulong x, ulong y)
        {
            _glVertexAttribL2ui64NV(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL2ui64vNV;
        
        public static unsafe void glVertexAttribL2ui64vNV(uint index, ref ulong v)
        {
            _glVertexAttribL2ui64vNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, double, double, double, void> _glVertexAttribL3d;
        
        public static unsafe void glVertexAttribL3d(uint index, double x, double y, double z)
        {
            _glVertexAttribL3d(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, double, double, double, void> _glVertexAttribL3dEXT;
        
        public static unsafe void glVertexAttribL3dEXT(uint index, double x, double y, double z)
        {
            _glVertexAttribL3dEXT(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL3dv;
        
        public static unsafe void glVertexAttribL3dv(uint index, ref double v)
        {
            _glVertexAttribL3dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL3dvEXT;
        
        public static unsafe void glVertexAttribL3dvEXT(uint index, ref double v)
        {
            _glVertexAttribL3dvEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, long, long, long, void> _glVertexAttribL3i64NV;
        
        public static unsafe void glVertexAttribL3i64NV(uint index, long x, long y, long z)
        {
            _glVertexAttribL3i64NV(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL3i64vNV;
        
        public static unsafe void glVertexAttribL3i64vNV(uint index, ref long v)
        {
            _glVertexAttribL3i64vNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, ulong, ulong, ulong, void> _glVertexAttribL3ui64NV;
        
        public static unsafe void glVertexAttribL3ui64NV(uint index, ulong x, ulong y, ulong z)
        {
            _glVertexAttribL3ui64NV(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL3ui64vNV;
        
        public static unsafe void glVertexAttribL3ui64vNV(uint index, ref ulong v)
        {
            _glVertexAttribL3ui64vNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, double, double, double, double, void> _glVertexAttribL4d;
        
        public static unsafe void glVertexAttribL4d(uint index, double x, double y, double z, double w)
        {
            _glVertexAttribL4d(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, double, double, double, double, void> _glVertexAttribL4dEXT;
        
        public static unsafe void glVertexAttribL4dEXT(uint index, double x, double y, double z, double w)
        {
            _glVertexAttribL4dEXT(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL4dv;
        
        public static unsafe void glVertexAttribL4dv(uint index, ref double v)
        {
            _glVertexAttribL4dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL4dvEXT;
        
        public static unsafe void glVertexAttribL4dvEXT(uint index, ref double v)
        {
            _glVertexAttribL4dvEXT(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, long, long, long, long, void> _glVertexAttribL4i64NV;
        
        public static unsafe void glVertexAttribL4i64NV(uint index, long x, long y, long z, long w)
        {
            _glVertexAttribL4i64NV(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL4i64vNV;
        
        public static unsafe void glVertexAttribL4i64vNV(uint index, ref long v)
        {
            _glVertexAttribL4i64vNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, ulong, ulong, ulong, ulong, void> _glVertexAttribL4ui64NV;
        
        public static unsafe void glVertexAttribL4ui64NV(uint index, ulong x, ulong y, ulong z, ulong w)
        {
            _glVertexAttribL4ui64NV(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL4ui64vNV;
        
        public static unsafe void glVertexAttribL4ui64vNV(uint index, ref ulong v)
        {
            _glVertexAttribL4ui64vNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribLType, uint, void> _glVertexAttribLFormat;
        
        public static unsafe void glVertexAttribLFormat(uint attribindex, int size, VertexAttribLType type, uint relativeoffset)
        {
            _glVertexAttribLFormat(attribindex, size, type, relativeoffset);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribLType, int, void> _glVertexAttribLFormatNV;
        
        public static unsafe void glVertexAttribLFormatNV(uint index, int size, VertexAttribLType type, int stride)
        {
            _glVertexAttribLFormatNV(index, size, type, stride);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribLType, int, IntPtr, void> _glVertexAttribLPointer;
        
        public static unsafe void glVertexAttribLPointer(uint index, int size, VertexAttribLType type, int stride, IntPtr pointer)
        {
            _glVertexAttribLPointer(index, size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribLType, int, IntPtr, void> _glVertexAttribLPointerEXT;
        
        public static unsafe void glVertexAttribLPointerEXT(uint index, int size, VertexAttribLType type, int stride, IntPtr pointer)
        {
            _glVertexAttribLPointerEXT(index, size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, uint, void> _glVertexAttribP1ui;
        
        public static unsafe void glVertexAttribP1ui(uint index, VertexAttribPointerType type, byte normalized, uint value)
        {
            _glVertexAttribP1ui(index, type, normalized, value);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, IntPtr, void> _glVertexAttribP1uiv;
        
        public static unsafe void glVertexAttribP1uiv(uint index, VertexAttribPointerType type, byte normalized, ref uint value)
        {
            _glVertexAttribP1uiv(index, type, normalized, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, uint, void> _glVertexAttribP2ui;
        
        public static unsafe void glVertexAttribP2ui(uint index, VertexAttribPointerType type, byte normalized, uint value)
        {
            _glVertexAttribP2ui(index, type, normalized, value);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, IntPtr, void> _glVertexAttribP2uiv;
        
        public static unsafe void glVertexAttribP2uiv(uint index, VertexAttribPointerType type, byte normalized, ref uint value)
        {
            _glVertexAttribP2uiv(index, type, normalized, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, uint, void> _glVertexAttribP3ui;
        
        public static unsafe void glVertexAttribP3ui(uint index, VertexAttribPointerType type, byte normalized, uint value)
        {
            _glVertexAttribP3ui(index, type, normalized, value);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, IntPtr, void> _glVertexAttribP3uiv;
        
        public static unsafe void glVertexAttribP3uiv(uint index, VertexAttribPointerType type, byte normalized, ref uint value)
        {
            _glVertexAttribP3uiv(index, type, normalized, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, uint, void> _glVertexAttribP4ui;
        
        public static unsafe void glVertexAttribP4ui(uint index, VertexAttribPointerType type, byte normalized, uint value)
        {
            _glVertexAttribP4ui(index, type, normalized, value);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, IntPtr, void> _glVertexAttribP4uiv;
        
        public static unsafe void glVertexAttribP4uiv(uint index, VertexAttribPointerType type, byte normalized, ref uint value)
        {
            _glVertexAttribP4uiv(index, type, normalized, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, uint, int, void> _glVertexAttribParameteriAMD;
        
        public static unsafe void glVertexAttribParameteriAMD(uint index, uint pname, int param)
        {
            _glVertexAttribParameteriAMD(index, pname, param);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribPointerType, byte, int, IntPtr, void> _glVertexAttribPointer;
        
        public static unsafe void glVertexAttribPointer(uint index, int size, VertexAttribPointerType type, byte normalized, int stride, IntPtr pointer)
        {
            _glVertexAttribPointer(index, size, type, normalized, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribPointerType, byte, int, IntPtr, void> _glVertexAttribPointerARB;
        
        public static unsafe void glVertexAttribPointerARB(uint index, int size, VertexAttribPointerType type, byte normalized, int stride, IntPtr pointer)
        {
            _glVertexAttribPointerARB(index, size, type, normalized, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribEnumNV, int, IntPtr, void> _glVertexAttribPointerNV;
        
        public static unsafe void glVertexAttribPointerNV(uint index, int fsize, VertexAttribEnumNV type, int stride, IntPtr pointer)
        {
            _glVertexAttribPointerNV(index, fsize, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs1dvNV;
        
        public static unsafe void glVertexAttribs1dvNV(uint index, int count, ref double v)
        {
            _glVertexAttribs1dvNV(index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs1fvNV;
        
        public static unsafe void glVertexAttribs1fvNV(uint index, int count, ref float v)
        {
            _glVertexAttribs1fvNV(index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs1hvNV;
        
        public static unsafe void glVertexAttribs1hvNV(uint index, int n, ref ushort v)
        {
            _glVertexAttribs1hvNV(index, n, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs1svNV;
        
        public static unsafe void glVertexAttribs1svNV(uint index, int count, ref short v)
        {
            _glVertexAttribs1svNV(index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs2dvNV;
        
        public static unsafe void glVertexAttribs2dvNV(uint index, int count, out IntPtr v)
        {
            _glVertexAttribs2dvNV(index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs2fvNV;
        
        public static unsafe void glVertexAttribs2fvNV(uint index, int count, out IntPtr v)
        {
            _glVertexAttribs2fvNV(index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs2hvNV;
        
        public static unsafe void glVertexAttribs2hvNV(uint index, int n, ref ushort v)
        {
            _glVertexAttribs2hvNV(index, n, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs2svNV;
        
        public static unsafe void glVertexAttribs2svNV(uint index, int count, out IntPtr v)
        {
            _glVertexAttribs2svNV(index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs3dvNV;
        
        public static unsafe void glVertexAttribs3dvNV(uint index, int count, out IntPtr v)
        {
            _glVertexAttribs3dvNV(index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs3fvNV;
        
        public static unsafe void glVertexAttribs3fvNV(uint index, int count, out IntPtr v)
        {
            _glVertexAttribs3fvNV(index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs3hvNV;
        
        public static unsafe void glVertexAttribs3hvNV(uint index, int n, ref ushort v)
        {
            _glVertexAttribs3hvNV(index, n, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs3svNV;
        
        public static unsafe void glVertexAttribs3svNV(uint index, int count, out IntPtr v)
        {
            _glVertexAttribs3svNV(index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs4dvNV;
        
        public static unsafe void glVertexAttribs4dvNV(uint index, int count, out IntPtr v)
        {
            _glVertexAttribs4dvNV(index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs4fvNV;
        
        public static unsafe void glVertexAttribs4fvNV(uint index, int count, out IntPtr v)
        {
            _glVertexAttribs4fvNV(index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs4hvNV;
        
        public static unsafe void glVertexAttribs4hvNV(uint index, int n, ref ushort v)
        {
            _glVertexAttribs4hvNV(index, n, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs4svNV;
        
        public static unsafe void glVertexAttribs4svNV(uint index, int count, out IntPtr v)
        {
            _glVertexAttribs4svNV(index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glVertexAttribs4ubvNV;
        
        public static unsafe void glVertexAttribs4ubvNV(uint index, int count, out IntPtr v)
        {
            _glVertexAttribs4ubvNV(index, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexBindingDivisor;
        
        public static unsafe void glVertexBindingDivisor(uint bindingindex, uint divisor)
        {
            _glVertexBindingDivisor(bindingindex, divisor);
        }
        
        public static unsafe delegate*<int, void> _glVertexBlendARB;
        
        public static unsafe void glVertexBlendARB(int count)
        {
            _glVertexBlendARB(count);
        }
        
        public static unsafe delegate*<VertexStreamATI, float, void> _glVertexBlendEnvfATI;
        
        public static unsafe void glVertexBlendEnvfATI(VertexStreamATI pname, float param)
        {
            _glVertexBlendEnvfATI(pname, param);
        }
        
        public static unsafe delegate*<VertexStreamATI, int, void> _glVertexBlendEnviATI;
        
        public static unsafe void glVertexBlendEnviATI(VertexStreamATI pname, int param)
        {
            _glVertexBlendEnviATI(pname, param);
        }
        
        public static unsafe delegate*<int, VertexPointerType, int, void> _glVertexFormatNV;
        
        public static unsafe void glVertexFormatNV(int size, VertexPointerType type, int stride)
        {
            _glVertexFormatNV(size, type, stride);
        }
        
        public static unsafe delegate*<VertexPointerType, uint, void> _glVertexP2ui;
        
        public static unsafe void glVertexP2ui(VertexPointerType type, uint value)
        {
            _glVertexP2ui(type, value);
        }
        
        public static unsafe delegate*<VertexPointerType, IntPtr, void> _glVertexP2uiv;
        
        public static unsafe void glVertexP2uiv(VertexPointerType type, ref uint value)
        {
            _glVertexP2uiv(type, (IntPtr)value);
        }
        
        public static unsafe delegate*<VertexPointerType, uint, void> _glVertexP3ui;
        
        public static unsafe void glVertexP3ui(VertexPointerType type, uint value)
        {
            _glVertexP3ui(type, value);
        }
        
        public static unsafe delegate*<VertexPointerType, IntPtr, void> _glVertexP3uiv;
        
        public static unsafe void glVertexP3uiv(VertexPointerType type, ref uint value)
        {
            _glVertexP3uiv(type, (IntPtr)value);
        }
        
        public static unsafe delegate*<VertexPointerType, uint, void> _glVertexP4ui;
        
        public static unsafe void glVertexP4ui(VertexPointerType type, uint value)
        {
            _glVertexP4ui(type, value);
        }
        
        public static unsafe delegate*<VertexPointerType, IntPtr, void> _glVertexP4uiv;
        
        public static unsafe void glVertexP4uiv(VertexPointerType type, ref uint value)
        {
            _glVertexP4uiv(type, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, VertexPointerType, int, IntPtr, void> _glVertexPointer;
        
        public static unsafe void glVertexPointer(int size, VertexPointerType type, int stride, IntPtr pointer)
        {
            _glVertexPointer(size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, VertexPointerType, int, int, IntPtr, void> _glVertexPointerEXT;
        
        public static unsafe void glVertexPointerEXT(int size, VertexPointerType type, int stride, int count, IntPtr pointer)
        {
            _glVertexPointerEXT(size, type, stride, count, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, VertexPointerType, int, IntPtr, int, void> _glVertexPointerListIBM;
        
        public static unsafe void glVertexPointerListIBM(int size, VertexPointerType type, int stride, out IntPtr pointer, int ptrstride)
        {
            _glVertexPointerListIBM(size, type, stride, (IntPtr)pointer, ptrstride);
        }
        
        public static unsafe delegate*<int, VertexPointerType, IntPtr, void> _glVertexPointervINTEL;
        
        public static unsafe void glVertexPointervINTEL(int size, VertexPointerType type, out IntPtr pointer)
        {
            _glVertexPointervINTEL(size, type, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<VertexStreamATI, double, void> _glVertexStream1dATI;
        
        public static unsafe void glVertexStream1dATI(VertexStreamATI stream, double x)
        {
            _glVertexStream1dATI(stream, x);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream1dvATI;
        
        public static unsafe void glVertexStream1dvATI(VertexStreamATI stream, ref double coords)
        {
            _glVertexStream1dvATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, float, void> _glVertexStream1fATI;
        
        public static unsafe void glVertexStream1fATI(VertexStreamATI stream, float x)
        {
            _glVertexStream1fATI(stream, x);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream1fvATI;
        
        public static unsafe void glVertexStream1fvATI(VertexStreamATI stream, ref float coords)
        {
            _glVertexStream1fvATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, int, void> _glVertexStream1iATI;
        
        public static unsafe void glVertexStream1iATI(VertexStreamATI stream, int x)
        {
            _glVertexStream1iATI(stream, x);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream1ivATI;
        
        public static unsafe void glVertexStream1ivATI(VertexStreamATI stream, ref int coords)
        {
            _glVertexStream1ivATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, short, void> _glVertexStream1sATI;
        
        public static unsafe void glVertexStream1sATI(VertexStreamATI stream, short x)
        {
            _glVertexStream1sATI(stream, x);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream1svATI;
        
        public static unsafe void glVertexStream1svATI(VertexStreamATI stream, ref short coords)
        {
            _glVertexStream1svATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, double, double, void> _glVertexStream2dATI;
        
        public static unsafe void glVertexStream2dATI(VertexStreamATI stream, double x, double y)
        {
            _glVertexStream2dATI(stream, x, y);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream2dvATI;
        
        public static unsafe void glVertexStream2dvATI(VertexStreamATI stream, ref double coords)
        {
            _glVertexStream2dvATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, float, float, void> _glVertexStream2fATI;
        
        public static unsafe void glVertexStream2fATI(VertexStreamATI stream, float x, float y)
        {
            _glVertexStream2fATI(stream, x, y);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream2fvATI;
        
        public static unsafe void glVertexStream2fvATI(VertexStreamATI stream, ref float coords)
        {
            _glVertexStream2fvATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, int, int, void> _glVertexStream2iATI;
        
        public static unsafe void glVertexStream2iATI(VertexStreamATI stream, int x, int y)
        {
            _glVertexStream2iATI(stream, x, y);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream2ivATI;
        
        public static unsafe void glVertexStream2ivATI(VertexStreamATI stream, ref int coords)
        {
            _glVertexStream2ivATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, short, short, void> _glVertexStream2sATI;
        
        public static unsafe void glVertexStream2sATI(VertexStreamATI stream, short x, short y)
        {
            _glVertexStream2sATI(stream, x, y);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream2svATI;
        
        public static unsafe void glVertexStream2svATI(VertexStreamATI stream, ref short coords)
        {
            _glVertexStream2svATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, double, double, double, void> _glVertexStream3dATI;
        
        public static unsafe void glVertexStream3dATI(VertexStreamATI stream, double x, double y, double z)
        {
            _glVertexStream3dATI(stream, x, y, z);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream3dvATI;
        
        public static unsafe void glVertexStream3dvATI(VertexStreamATI stream, ref double coords)
        {
            _glVertexStream3dvATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, float, float, float, void> _glVertexStream3fATI;
        
        public static unsafe void glVertexStream3fATI(VertexStreamATI stream, float x, float y, float z)
        {
            _glVertexStream3fATI(stream, x, y, z);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream3fvATI;
        
        public static unsafe void glVertexStream3fvATI(VertexStreamATI stream, ref float coords)
        {
            _glVertexStream3fvATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, int, int, int, void> _glVertexStream3iATI;
        
        public static unsafe void glVertexStream3iATI(VertexStreamATI stream, int x, int y, int z)
        {
            _glVertexStream3iATI(stream, x, y, z);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream3ivATI;
        
        public static unsafe void glVertexStream3ivATI(VertexStreamATI stream, ref int coords)
        {
            _glVertexStream3ivATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, short, short, short, void> _glVertexStream3sATI;
        
        public static unsafe void glVertexStream3sATI(VertexStreamATI stream, short x, short y, short z)
        {
            _glVertexStream3sATI(stream, x, y, z);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream3svATI;
        
        public static unsafe void glVertexStream3svATI(VertexStreamATI stream, ref short coords)
        {
            _glVertexStream3svATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, double, double, double, double, void> _glVertexStream4dATI;
        
        public static unsafe void glVertexStream4dATI(VertexStreamATI stream, double x, double y, double z, double w)
        {
            _glVertexStream4dATI(stream, x, y, z, w);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream4dvATI;
        
        public static unsafe void glVertexStream4dvATI(VertexStreamATI stream, ref double coords)
        {
            _glVertexStream4dvATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, float, float, float, float, void> _glVertexStream4fATI;
        
        public static unsafe void glVertexStream4fATI(VertexStreamATI stream, float x, float y, float z, float w)
        {
            _glVertexStream4fATI(stream, x, y, z, w);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream4fvATI;
        
        public static unsafe void glVertexStream4fvATI(VertexStreamATI stream, ref float coords)
        {
            _glVertexStream4fvATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, int, int, int, int, void> _glVertexStream4iATI;
        
        public static unsafe void glVertexStream4iATI(VertexStreamATI stream, int x, int y, int z, int w)
        {
            _glVertexStream4iATI(stream, x, y, z, w);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream4ivATI;
        
        public static unsafe void glVertexStream4ivATI(VertexStreamATI stream, ref int coords)
        {
            _glVertexStream4ivATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<VertexStreamATI, short, short, short, short, void> _glVertexStream4sATI;
        
        public static unsafe void glVertexStream4sATI(VertexStreamATI stream, short x, short y, short z, short w)
        {
            _glVertexStream4sATI(stream, x, y, z, w);
        }
        
        public static unsafe delegate*<VertexStreamATI, IntPtr, void> _glVertexStream4svATI;
        
        public static unsafe void glVertexStream4svATI(VertexStreamATI stream, ref short coords)
        {
            _glVertexStream4svATI(stream, (IntPtr)coords);
        }
        
        public static unsafe delegate*<int, VertexWeightPointerTypeEXT, int, IntPtr, void> _glVertexWeightPointerEXT;
        
        public static unsafe void glVertexWeightPointerEXT(int size, VertexWeightPointerTypeEXT type, int stride, IntPtr pointer)
        {
            _glVertexWeightPointerEXT(size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<float, void> _glVertexWeightfEXT;
        
        public static unsafe void glVertexWeightfEXT(float weight)
        {
            _glVertexWeightfEXT(weight);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertexWeightfvEXT;
        
        public static unsafe void glVertexWeightfvEXT(ref float weight)
        {
            _glVertexWeightfvEXT((IntPtr)weight);
        }
        
        public static unsafe delegate*<ushort, void> _glVertexWeighthNV;
        
        public static unsafe void glVertexWeighthNV(ushort weight)
        {
            _glVertexWeighthNV(weight);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertexWeighthvNV;
        
        public static unsafe void glVertexWeighthvNV(ref ushort weight)
        {
            _glVertexWeighthvNV((IntPtr)weight);
        }
        
        public static unsafe delegate*<uint, IntPtr, IntPtr, uint> _glVideoCaptureNV;
        
        public static unsafe uint glVideoCaptureNV(uint video_capture_slot, ref uint sequence_num, ref ulong capture_time)
        {
            return _glVideoCaptureNV(video_capture_slot, (IntPtr)sequence_num, (IntPtr)capture_time);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glVideoCaptureStreamParameterdvNV;
        
        public static unsafe void glVideoCaptureStreamParameterdvNV(uint video_capture_slot, uint stream, uint pname, ref double @params)
        {
            _glVideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glVideoCaptureStreamParameterfvNV;
        
        public static unsafe void glVideoCaptureStreamParameterfvNV(uint video_capture_slot, uint stream, uint pname, ref float @params)
        {
            _glVideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glVideoCaptureStreamParameterivNV;
        
        public static unsafe void glVideoCaptureStreamParameterivNV(uint video_capture_slot, uint stream, uint pname, ref int @params)
        {
            _glVideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glViewport;
        
        public static unsafe void glViewport(int x, int y, int width, int height)
        {
            _glViewport(x, y, width, height);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glViewportArrayv;
        
        public static unsafe void glViewportArrayv(uint first, int count, ref float v)
        {
            _glViewportArrayv(first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glViewportArrayvNV;
        
        public static unsafe void glViewportArrayvNV(uint first, int count, ref float v)
        {
            _glViewportArrayvNV(first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glViewportArrayvOES;
        
        public static unsafe void glViewportArrayvOES(uint first, int count, ref float v)
        {
            _glViewportArrayvOES(first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, float, float, float, void> _glViewportIndexedf;
        
        public static unsafe void glViewportIndexedf(uint index, float x, float y, float w, float h)
        {
            _glViewportIndexedf(index, x, y, w, h);
        }
        
        public static unsafe delegate*<uint, float, float, float, float, void> _glViewportIndexedfOES;
        
        public static unsafe void glViewportIndexedfOES(uint index, float x, float y, float w, float h)
        {
            _glViewportIndexedfOES(index, x, y, w, h);
        }
        
        public static unsafe delegate*<uint, float, float, float, float, void> _glViewportIndexedfNV;
        
        public static unsafe void glViewportIndexedfNV(uint index, float x, float y, float w, float h)
        {
            _glViewportIndexedfNV(index, x, y, w, h);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glViewportIndexedfv;
        
        public static unsafe void glViewportIndexedfv(uint index, ref float v)
        {
            _glViewportIndexedfv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glViewportIndexedfvOES;
        
        public static unsafe void glViewportIndexedfvOES(uint index, ref float v)
        {
            _glViewportIndexedfvOES(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glViewportIndexedfvNV;
        
        public static unsafe void glViewportIndexedfvNV(uint index, ref float v)
        {
            _glViewportIndexedfvNV(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, float, void> _glViewportPositionWScaleNV;
        
        public static unsafe void glViewportPositionWScaleNV(uint index, float xcoeff, float ycoeff)
        {
            _glViewportPositionWScaleNV(index, xcoeff, ycoeff);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, uint, void> _glViewportSwizzleNV;
        
        public static unsafe void glViewportSwizzleNV(uint index, uint swizzlex, uint swizzley, uint swizzlez, uint swizzlew)
        {
            _glViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, uint, IntPtr, IntPtr, void> _glWaitSemaphoreEXT;
        
        public static unsafe void glWaitSemaphoreEXT(uint semaphore, uint numBufferBarriers, ref uint buffers, uint numTextureBarriers, ref uint textures, ref TextureLayout srcLayouts)
        {
            _glWaitSemaphoreEXT(semaphore, numBufferBarriers, (IntPtr)buffers, numTextureBarriers, (IntPtr)textures, (IntPtr)srcLayouts);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glWaitSemaphoreui64NVX;
        
        public static unsafe void glWaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, ref uint semaphoreArray, ref ulong fenceValueArray)
        {
            _glWaitSemaphoreui64NVX(waitGpu, fenceObjectCount, (IntPtr)semaphoreArray, (IntPtr)fenceValueArray);
        }
        
        public static unsafe delegate*<IntPtr, uint, ulong, void> _glWaitSync;
        
        public static unsafe void glWaitSync(IntPtr sync, uint flags, ulong timeout)
        {
            _glWaitSync(sync, flags, timeout);
        }
        
        public static unsafe delegate*<IntPtr, uint, ulong, void> _glWaitSyncAPPLE;
        
        public static unsafe void glWaitSyncAPPLE(IntPtr sync, uint flags, ulong timeout)
        {
            _glWaitSyncAPPLE(sync, flags, timeout);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glWeightPathsNV;
        
        public static unsafe void glWeightPathsNV(uint resultPath, int numPaths, ref uint paths, ref float weights)
        {
            _glWeightPathsNV(resultPath, numPaths, (IntPtr)paths, (IntPtr)weights);
        }
        
        public static unsafe delegate*<int, WeightPointerTypeARB, int, IntPtr, void> _glWeightPointerARB;
        
        public static unsafe void glWeightPointerARB(int size, WeightPointerTypeARB type, int stride, IntPtr pointer)
        {
            _glWeightPointerARB(size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, uint, int, IntPtr, void> _glWeightPointerOES;
        
        public static unsafe void glWeightPointerOES(int size, uint type, int stride, IntPtr pointer)
        {
            _glWeightPointerOES(size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glWeightbvARB;
        
        public static unsafe void glWeightbvARB(int size, ref sbyte weights)
        {
            _glWeightbvARB(size, (IntPtr)weights);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glWeightdvARB;
        
        public static unsafe void glWeightdvARB(int size, ref double weights)
        {
            _glWeightdvARB(size, (IntPtr)weights);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glWeightfvARB;
        
        public static unsafe void glWeightfvARB(int size, ref float weights)
        {
            _glWeightfvARB(size, (IntPtr)weights);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glWeightivARB;
        
        public static unsafe void glWeightivARB(int size, ref int weights)
        {
            _glWeightivARB(size, (IntPtr)weights);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glWeightsvARB;
        
        public static unsafe void glWeightsvARB(int size, ref short weights)
        {
            _glWeightsvARB(size, (IntPtr)weights);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glWeightubvARB;
        
        public static unsafe void glWeightubvARB(int size, ref byte weights)
        {
            _glWeightubvARB(size, (IntPtr)weights);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glWeightuivARB;
        
        public static unsafe void glWeightuivARB(int size, ref uint weights)
        {
            _glWeightuivARB(size, (IntPtr)weights);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glWeightusvARB;
        
        public static unsafe void glWeightusvARB(int size, ref ushort weights)
        {
            _glWeightusvARB(size, (IntPtr)weights);
        }
        
        public static unsafe delegate*<double, double, void> _glWindowPos2d;
        
        public static unsafe void glWindowPos2d(double x, double y)
        {
            _glWindowPos2d(x, y);
        }
        
        public static unsafe delegate*<double, double, void> _glWindowPos2dARB;
        
        public static unsafe void glWindowPos2dARB(double x, double y)
        {
            _glWindowPos2dARB(x, y);
        }
        
        public static unsafe delegate*<double, double, void> _glWindowPos2dMESA;
        
        public static unsafe void glWindowPos2dMESA(double x, double y)
        {
            _glWindowPos2dMESA(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2dv;
        
        public static unsafe void glWindowPos2dv(ref double v)
        {
            _glWindowPos2dv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2dvARB;
        
        public static unsafe void glWindowPos2dvARB(ref double v)
        {
            _glWindowPos2dvARB((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2dvMESA;
        
        public static unsafe void glWindowPos2dvMESA(ref double v)
        {
            _glWindowPos2dvMESA((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, void> _glWindowPos2f;
        
        public static unsafe void glWindowPos2f(float x, float y)
        {
            _glWindowPos2f(x, y);
        }
        
        public static unsafe delegate*<float, float, void> _glWindowPos2fARB;
        
        public static unsafe void glWindowPos2fARB(float x, float y)
        {
            _glWindowPos2fARB(x, y);
        }
        
        public static unsafe delegate*<float, float, void> _glWindowPos2fMESA;
        
        public static unsafe void glWindowPos2fMESA(float x, float y)
        {
            _glWindowPos2fMESA(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2fv;
        
        public static unsafe void glWindowPos2fv(ref float v)
        {
            _glWindowPos2fv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2fvARB;
        
        public static unsafe void glWindowPos2fvARB(ref float v)
        {
            _glWindowPos2fvARB((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2fvMESA;
        
        public static unsafe void glWindowPos2fvMESA(ref float v)
        {
            _glWindowPos2fvMESA((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, void> _glWindowPos2i;
        
        public static unsafe void glWindowPos2i(int x, int y)
        {
            _glWindowPos2i(x, y);
        }
        
        public static unsafe delegate*<int, int, void> _glWindowPos2iARB;
        
        public static unsafe void glWindowPos2iARB(int x, int y)
        {
            _glWindowPos2iARB(x, y);
        }
        
        public static unsafe delegate*<int, int, void> _glWindowPos2iMESA;
        
        public static unsafe void glWindowPos2iMESA(int x, int y)
        {
            _glWindowPos2iMESA(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2iv;
        
        public static unsafe void glWindowPos2iv(ref int v)
        {
            _glWindowPos2iv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2ivARB;
        
        public static unsafe void glWindowPos2ivARB(ref int v)
        {
            _glWindowPos2ivARB((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2ivMESA;
        
        public static unsafe void glWindowPos2ivMESA(ref int v)
        {
            _glWindowPos2ivMESA((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, void> _glWindowPos2s;
        
        public static unsafe void glWindowPos2s(short x, short y)
        {
            _glWindowPos2s(x, y);
        }
        
        public static unsafe delegate*<short, short, void> _glWindowPos2sARB;
        
        public static unsafe void glWindowPos2sARB(short x, short y)
        {
            _glWindowPos2sARB(x, y);
        }
        
        public static unsafe delegate*<short, short, void> _glWindowPos2sMESA;
        
        public static unsafe void glWindowPos2sMESA(short x, short y)
        {
            _glWindowPos2sMESA(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2sv;
        
        public static unsafe void glWindowPos2sv(ref short v)
        {
            _glWindowPos2sv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2svARB;
        
        public static unsafe void glWindowPos2svARB(ref short v)
        {
            _glWindowPos2svARB((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2svMESA;
        
        public static unsafe void glWindowPos2svMESA(ref short v)
        {
            _glWindowPos2svMESA((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, void> _glWindowPos3d;
        
        public static unsafe void glWindowPos3d(double x, double y, double z)
        {
            _glWindowPos3d(x, y, z);
        }
        
        public static unsafe delegate*<double, double, double, void> _glWindowPos3dARB;
        
        public static unsafe void glWindowPos3dARB(double x, double y, double z)
        {
            _glWindowPos3dARB(x, y, z);
        }
        
        public static unsafe delegate*<double, double, double, void> _glWindowPos3dMESA;
        
        public static unsafe void glWindowPos3dMESA(double x, double y, double z)
        {
            _glWindowPos3dMESA(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3dv;
        
        public static unsafe void glWindowPos3dv(ref double v)
        {
            _glWindowPos3dv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3dvARB;
        
        public static unsafe void glWindowPos3dvARB(ref double v)
        {
            _glWindowPos3dvARB((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3dvMESA;
        
        public static unsafe void glWindowPos3dvMESA(ref double v)
        {
            _glWindowPos3dvMESA((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glWindowPos3f;
        
        public static unsafe void glWindowPos3f(float x, float y, float z)
        {
            _glWindowPos3f(x, y, z);
        }
        
        public static unsafe delegate*<float, float, float, void> _glWindowPos3fARB;
        
        public static unsafe void glWindowPos3fARB(float x, float y, float z)
        {
            _glWindowPos3fARB(x, y, z);
        }
        
        public static unsafe delegate*<float, float, float, void> _glWindowPos3fMESA;
        
        public static unsafe void glWindowPos3fMESA(float x, float y, float z)
        {
            _glWindowPos3fMESA(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3fv;
        
        public static unsafe void glWindowPos3fv(ref float v)
        {
            _glWindowPos3fv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3fvARB;
        
        public static unsafe void glWindowPos3fvARB(ref float v)
        {
            _glWindowPos3fvARB((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3fvMESA;
        
        public static unsafe void glWindowPos3fvMESA(ref float v)
        {
            _glWindowPos3fvMESA((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glWindowPos3i;
        
        public static unsafe void glWindowPos3i(int x, int y, int z)
        {
            _glWindowPos3i(x, y, z);
        }
        
        public static unsafe delegate*<int, int, int, void> _glWindowPos3iARB;
        
        public static unsafe void glWindowPos3iARB(int x, int y, int z)
        {
            _glWindowPos3iARB(x, y, z);
        }
        
        public static unsafe delegate*<int, int, int, void> _glWindowPos3iMESA;
        
        public static unsafe void glWindowPos3iMESA(int x, int y, int z)
        {
            _glWindowPos3iMESA(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3iv;
        
        public static unsafe void glWindowPos3iv(ref int v)
        {
            _glWindowPos3iv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3ivARB;
        
        public static unsafe void glWindowPos3ivARB(ref int v)
        {
            _glWindowPos3ivARB((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3ivMESA;
        
        public static unsafe void glWindowPos3ivMESA(ref int v)
        {
            _glWindowPos3ivMESA((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glWindowPos3s;
        
        public static unsafe void glWindowPos3s(short x, short y, short z)
        {
            _glWindowPos3s(x, y, z);
        }
        
        public static unsafe delegate*<short, short, short, void> _glWindowPos3sARB;
        
        public static unsafe void glWindowPos3sARB(short x, short y, short z)
        {
            _glWindowPos3sARB(x, y, z);
        }
        
        public static unsafe delegate*<short, short, short, void> _glWindowPos3sMESA;
        
        public static unsafe void glWindowPos3sMESA(short x, short y, short z)
        {
            _glWindowPos3sMESA(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3sv;
        
        public static unsafe void glWindowPos3sv(ref short v)
        {
            _glWindowPos3sv((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3svARB;
        
        public static unsafe void glWindowPos3svARB(ref short v)
        {
            _glWindowPos3svARB((IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3svMESA;
        
        public static unsafe void glWindowPos3svMESA(ref short v)
        {
            _glWindowPos3svMESA((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, double, void> _glWindowPos4dMESA;
        
        public static unsafe void glWindowPos4dMESA(double x, double y, double z, double w)
        {
            _glWindowPos4dMESA(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos4dvMESA;
        
        public static unsafe void glWindowPos4dvMESA(ref double v)
        {
            _glWindowPos4dvMESA((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glWindowPos4fMESA;
        
        public static unsafe void glWindowPos4fMESA(float x, float y, float z, float w)
        {
            _glWindowPos4fMESA(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos4fvMESA;
        
        public static unsafe void glWindowPos4fvMESA(ref float v)
        {
            _glWindowPos4fvMESA((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glWindowPos4iMESA;
        
        public static unsafe void glWindowPos4iMESA(int x, int y, int z, int w)
        {
            _glWindowPos4iMESA(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos4ivMESA;
        
        public static unsafe void glWindowPos4ivMESA(ref int v)
        {
            _glWindowPos4ivMESA((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, short, void> _glWindowPos4sMESA;
        
        public static unsafe void glWindowPos4sMESA(short x, short y, short z, short w)
        {
            _glWindowPos4sMESA(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos4svMESA;
        
        public static unsafe void glWindowPos4svMESA(ref short v)
        {
            _glWindowPos4svMESA((IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glWindowRectanglesEXT;
        
        public static unsafe void glWindowRectanglesEXT(uint mode, int count, ref int box)
        {
            _glWindowRectanglesEXT(mode, count, (IntPtr)box);
        }
        
        public static unsafe delegate*<uint, uint, VertexShaderWriteMaskEXT, VertexShaderWriteMaskEXT, VertexShaderWriteMaskEXT, VertexShaderWriteMaskEXT, void> _glWriteMaskEXT;
        
        public static unsafe void glWriteMaskEXT(uint res, uint @in, VertexShaderWriteMaskEXT outX, VertexShaderWriteMaskEXT outY, VertexShaderWriteMaskEXT outZ, VertexShaderWriteMaskEXT outW)
        {
            _glWriteMaskEXT(res, @in, outX, outY, outZ, outW);
        }
        
        public static unsafe delegate*<ulong, uint, float, float, float, float, float, float, float, float, float, void> _glDrawVkImageNV;
        
        public static unsafe void glDrawVkImageNV(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
        {
            _glDrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
        }
        
        public static unsafe delegate*<IntPtr, GLVULKANPROCNV> _glGetVkProcAddrNV;
        
        public static unsafe GLVULKANPROCNV glGetVkProcAddrNV(ref sbyte name)
        {
            return _glGetVkProcAddrNV((IntPtr)name);
        }
        
        public static unsafe delegate*<ulong, void> _glWaitVkSemaphoreNV;
        
        public static unsafe void glWaitVkSemaphoreNV(ulong vkSemaphore)
        {
            _glWaitVkSemaphoreNV(vkSemaphore);
        }
        
        public static unsafe delegate*<ulong, void> _glSignalVkSemaphoreNV;
        
        public static unsafe void glSignalVkSemaphoreNV(ulong vkSemaphore)
        {
            _glSignalVkSemaphoreNV(vkSemaphore);
        }
        
        public static unsafe delegate*<ulong, void> _glSignalVkFenceNV;
        
        public static unsafe void glSignalVkFenceNV(ulong vkFence)
        {
            _glSignalVkFenceNV(vkFence);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferParameterName, int, void> _glFramebufferParameteriMESA;
        
        public static unsafe void glFramebufferParameteriMESA(FramebufferTarget target, FramebufferParameterName pname, int param)
        {
            _glFramebufferParameteriMESA(target, pname, param);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachmentParameterName, IntPtr, void> _glGetFramebufferParameterivMESA;
        
        public static unsafe void glGetFramebufferParameterivMESA(FramebufferTarget target, FramebufferAttachmentParameterName pname, ref int @params)
        {
            _glGetFramebufferParameterivMESA(target, pname, (IntPtr)@params);
        }
    }
}
