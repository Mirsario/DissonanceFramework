//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Dissonance.Framework.Graphics.OpenGL
{
    public static partial class GL
    {
        public static unsafe delegate*<AccumOp, float, void> _glAccum;
        
        public static unsafe void Accum(AccumOp op, float value)
        {
            _glAccum(op, value);
        }
        
        public static unsafe delegate*<uint, uint, void> _glActiveShaderProgram;
        
        public static unsafe void ActiveShaderProgram(uint pipeline, uint program)
        {
            _glActiveShaderProgram(pipeline, program);
        }
        
        public static unsafe delegate*<TextureUnit, void> _glActiveTexture;
        
        public static unsafe void ActiveTexture(TextureUnit texture)
        {
            _glActiveTexture(texture);
        }
        
        public static unsafe delegate*<AlphaFunction, float, void> _glAlphaFunc;
        
        public static unsafe void AlphaFunc(AlphaFunction func, float @ref)
        {
            _glAlphaFunc(func, @ref);
        }
        
        public static unsafe delegate*<int, IntPtr, IntPtr, byte> _glAreTexturesResident;
        
        public static unsafe byte AreTexturesResident(int n, ref uint textures, ref byte residences)
        {
            return _glAreTexturesResident(n, (IntPtr)textures, (IntPtr)residences);
        }
        
        public static unsafe delegate*<int, void> _glArrayElement;
        
        public static unsafe void ArrayElement(int i)
        {
            _glArrayElement(i);
        }
        
        public static unsafe delegate*<uint, uint, void> _glAttachShader;
        
        public static unsafe void AttachShader(uint program, uint shader)
        {
            _glAttachShader(program, shader);
        }
        
        public static unsafe delegate*<PrimitiveType, void> _glBegin;
        
        public static unsafe void Begin(PrimitiveType mode)
        {
            _glBegin(mode);
        }
        
        public static unsafe delegate*<uint, ConditionalRenderMode, void> _glBeginConditionalRender;
        
        public static unsafe void BeginConditionalRender(uint id, ConditionalRenderMode mode)
        {
            _glBeginConditionalRender(id, mode);
        }
        
        public static unsafe delegate*<QueryTarget, uint, void> _glBeginQuery;
        
        public static unsafe void BeginQuery(QueryTarget target, uint id)
        {
            _glBeginQuery(target, id);
        }
        
        public static unsafe delegate*<QueryTarget, uint, uint, void> _glBeginQueryIndexed;
        
        public static unsafe void BeginQueryIndexed(QueryTarget target, uint index, uint id)
        {
            _glBeginQueryIndexed(target, index, id);
        }
        
        public static unsafe delegate*<PrimitiveType, void> _glBeginTransformFeedback;
        
        public static unsafe void BeginTransformFeedback(PrimitiveType primitiveMode)
        {
            _glBeginTransformFeedback(primitiveMode);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glBindAttribLocation;
        
        public static unsafe void BindAttribLocation(uint program, uint index, ref sbyte name)
        {
            _glBindAttribLocation(program, index, (IntPtr)name);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, void> _glBindBuffer;
        
        public static unsafe void BindBuffer(BufferTargetARB target, uint buffer)
        {
            _glBindBuffer(target, buffer);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, uint, void> _glBindBufferBase;
        
        public static unsafe void BindBufferBase(BufferTargetARB target, uint index, uint buffer)
        {
            _glBindBufferBase(target, index, buffer);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, uint, long, long, void> _glBindBufferRange;
        
        public static unsafe void BindBufferRange(BufferTargetARB target, uint index, uint buffer, long offset, long size)
        {
            _glBindBufferRange(target, index, buffer, offset, size);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, int, IntPtr, void> _glBindBuffersBase;
        
        public static unsafe void BindBuffersBase(BufferTargetARB target, uint first, int count, ref uint buffers)
        {
            _glBindBuffersBase(target, first, count, (IntPtr)buffers);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, int, IntPtr, IntPtr, IntPtr, void> _glBindBuffersRange;
        
        public static unsafe void BindBuffersRange(BufferTargetARB target, uint first, int count, ref uint buffers, ref long offsets, ref long sizes)
        {
            _glBindBuffersRange(target, first, count, (IntPtr)buffers, (IntPtr)offsets, (IntPtr)sizes);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, void> _glBindFragDataLocation;
        
        public static unsafe void BindFragDataLocation(uint program, uint color, ref sbyte name)
        {
            _glBindFragDataLocation(program, color, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, uint, uint, IntPtr, void> _glBindFragDataLocationIndexed;
        
        public static unsafe void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, ref sbyte name)
        {
            _glBindFragDataLocationIndexed(program, colorNumber, index, (IntPtr)name);
        }
        
        public static unsafe delegate*<FramebufferTarget, uint, void> _glBindFramebuffer;
        
        public static unsafe void BindFramebuffer(FramebufferTarget target, uint framebuffer)
        {
            _glBindFramebuffer(target, framebuffer);
        }
        
        public static unsafe delegate*<uint, uint, int, byte, int, BufferAccessARB, InternalFormat, void> _glBindImageTexture;
        
        public static unsafe void BindImageTexture(uint unit, uint texture, int level, byte layered, int layer, BufferAccessARB access, InternalFormat format)
        {
            _glBindImageTexture(unit, texture, level, layered, layer, access, format);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glBindImageTextures;
        
        public static unsafe void BindImageTextures(uint first, int count, ref uint textures)
        {
            _glBindImageTextures(first, count, (IntPtr)textures);
        }
        
        public static unsafe delegate*<uint, void> _glBindProgramPipeline;
        
        public static unsafe void BindProgramPipeline(uint pipeline)
        {
            _glBindProgramPipeline(pipeline);
        }
        
        public static unsafe delegate*<RenderbufferTarget, uint, void> _glBindRenderbuffer;
        
        public static unsafe void BindRenderbuffer(RenderbufferTarget target, uint renderbuffer)
        {
            _glBindRenderbuffer(target, renderbuffer);
        }
        
        public static unsafe delegate*<uint, uint, void> _glBindSampler;
        
        public static unsafe void BindSampler(uint unit, uint sampler)
        {
            _glBindSampler(unit, sampler);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glBindSamplers;
        
        public static unsafe void BindSamplers(uint first, int count, ref uint samplers)
        {
            _glBindSamplers(first, count, (IntPtr)samplers);
        }
        
        public static unsafe delegate*<TextureTarget, uint, void> _glBindTexture;
        
        public static unsafe void BindTexture(TextureTarget target, uint texture)
        {
            _glBindTexture(target, texture);
        }
        
        public static unsafe delegate*<uint, uint, void> _glBindTextureUnit;
        
        public static unsafe void BindTextureUnit(uint unit, uint texture)
        {
            _glBindTextureUnit(unit, texture);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glBindTextures;
        
        public static unsafe void BindTextures(uint first, int count, ref uint textures)
        {
            _glBindTextures(first, count, (IntPtr)textures);
        }
        
        public static unsafe delegate*<BindTransformFeedbackTarget, uint, void> _glBindTransformFeedback;
        
        public static unsafe void BindTransformFeedback(BindTransformFeedbackTarget target, uint id)
        {
            _glBindTransformFeedback(target, id);
        }
        
        public static unsafe delegate*<uint, void> _glBindVertexArray;
        
        public static unsafe void BindVertexArray(uint array)
        {
            _glBindVertexArray(array);
        }
        
        public static unsafe delegate*<uint, uint, long, int, void> _glBindVertexBuffer;
        
        public static unsafe void BindVertexBuffer(uint bindingindex, uint buffer, long offset, int stride)
        {
            _glBindVertexBuffer(bindingindex, buffer, offset, stride);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, IntPtr, void> _glBindVertexBuffers;
        
        public static unsafe void BindVertexBuffers(uint first, int count, ref uint buffers, ref long offsets, ref int strides)
        {
            _glBindVertexBuffers(first, count, (IntPtr)buffers, (IntPtr)offsets, (IntPtr)strides);
        }
        
        public static unsafe delegate*<int, int, float, float, float, float, IntPtr, void> _glBitmap;
        
        public static unsafe void Bitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, ref byte bitmap)
        {
            _glBitmap(width, height, xorig, yorig, xmove, ymove, (IntPtr)bitmap);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glBlendColor;
        
        public static unsafe void BlendColor(float red, float green, float blue, float alpha)
        {
            _glBlendColor(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<BlendEquationModeEXT, void> _glBlendEquation;
        
        public static unsafe void BlendEquation(BlendEquationModeEXT mode)
        {
            _glBlendEquation(mode);
        }
        
        public static unsafe delegate*<BlendEquationModeEXT, BlendEquationModeEXT, void> _glBlendEquationSeparate;
        
        public static unsafe void BlendEquationSeparate(BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha)
        {
            _glBlendEquationSeparate(modeRGB, modeAlpha);
        }
        
        public static unsafe delegate*<uint, BlendEquationModeEXT, BlendEquationModeEXT, void> _glBlendEquationSeparatei;
        
        public static unsafe void BlendEquationSeparatei(uint buf, BlendEquationModeEXT modeRGB, BlendEquationModeEXT modeAlpha)
        {
            _glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
        }
        
        public static unsafe delegate*<uint, BlendEquationModeEXT, void> _glBlendEquationi;
        
        public static unsafe void BlendEquationi(uint buf, BlendEquationModeEXT mode)
        {
            _glBlendEquationi(buf, mode);
        }
        
        public static unsafe delegate*<BlendingFactor, BlendingFactor, void> _glBlendFunc;
        
        public static unsafe void BlendFunc(BlendingFactor sfactor, BlendingFactor dfactor)
        {
            _glBlendFunc(sfactor, dfactor);
        }
        
        public static unsafe delegate*<BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> _glBlendFuncSeparate;
        
        public static unsafe void BlendFuncSeparate(BlendingFactor sfactorRGB, BlendingFactor dfactorRGB, BlendingFactor sfactorAlpha, BlendingFactor dfactorAlpha)
        {
            _glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        
        public static unsafe delegate*<uint, BlendingFactor, BlendingFactor, BlendingFactor, BlendingFactor, void> _glBlendFuncSeparatei;
        
        public static unsafe void BlendFuncSeparatei(uint buf, BlendingFactor srcRGB, BlendingFactor dstRGB, BlendingFactor srcAlpha, BlendingFactor dstAlpha)
        {
            _glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
        }
        
        public static unsafe delegate*<uint, BlendingFactor, BlendingFactor, void> _glBlendFunci;
        
        public static unsafe void BlendFunci(uint buf, BlendingFactor src, BlendingFactor dst)
        {
            _glBlendFunci(buf, src, dst);
        }
        
        public static unsafe delegate*<int, int, int, int, int, int, int, int, uint, BlitFramebufferFilter, void> _glBlitFramebuffer;
        
        public static unsafe void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, BlitFramebufferFilter filter)
        {
            _glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        public static unsafe delegate*<uint, uint, int, int, int, int, int, int, int, int, uint, BlitFramebufferFilter, void> _glBlitNamedFramebuffer;
        
        public static unsafe void BlitNamedFramebuffer(uint readFramebuffer, uint drawFramebuffer, int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, uint mask, BlitFramebufferFilter filter)
        {
            _glBlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, IntPtr, BufferUsageARB, void> _glBufferData;
        
        public static unsafe void BufferData(BufferTargetARB target, long size, IntPtr data, BufferUsageARB usage)
        {
            _glBufferData(target, size, (IntPtr)data, usage);
        }
        
        public static unsafe delegate*<BufferStorageTarget, long, IntPtr, uint, void> _glBufferStorage;
        
        public static unsafe void BufferStorage(BufferStorageTarget target, long size, IntPtr data, uint flags)
        {
            _glBufferStorage(target, size, (IntPtr)data, flags);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, long, IntPtr, void> _glBufferSubData;
        
        public static unsafe void BufferSubData(BufferTargetARB target, long offset, long size, IntPtr data)
        {
            _glBufferSubData(target, offset, size, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, void> _glCallList;
        
        public static unsafe void CallList(uint list)
        {
            _glCallList(list);
        }
        
        public static unsafe delegate*<int, ListNameType, IntPtr, void> _glCallLists;
        
        public static unsafe void CallLists(int n, ListNameType type, IntPtr lists)
        {
            _glCallLists(n, type, (IntPtr)lists);
        }
        
        public static unsafe delegate*<FramebufferTarget, uint> _glCheckFramebufferStatus;
        
        public static unsafe uint CheckFramebufferStatus(FramebufferTarget target)
        {
            return _glCheckFramebufferStatus(target);
        }
        
        public static unsafe delegate*<uint, FramebufferTarget, uint> _glCheckNamedFramebufferStatus;
        
        public static unsafe uint CheckNamedFramebufferStatus(uint framebuffer, FramebufferTarget target)
        {
            return _glCheckNamedFramebufferStatus(framebuffer, target);
        }
        
        public static unsafe delegate*<ClampColorTargetARB, ClampColorModeARB, void> _glClampColor;
        
        public static unsafe void ClampColor(ClampColorTargetARB target, ClampColorModeARB clamp)
        {
            _glClampColor(target, clamp);
        }
        
        public static unsafe delegate*<uint, void> _glClear;
        
        public static unsafe void Clear(uint mask)
        {
            _glClear(mask);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glClearAccum;
        
        public static unsafe void ClearAccum(float red, float green, float blue, float alpha)
        {
            _glClearAccum(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<BufferStorageTarget, SizedInternalFormat, PixelFormat, PixelType, IntPtr, void> _glClearBufferData;
        
        public static unsafe void ClearBufferData(BufferStorageTarget target, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearBufferData(target, internalformat, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<BufferTargetARB, SizedInternalFormat, long, long, PixelFormat, PixelType, IntPtr, void> _glClearBufferSubData;
        
        public static unsafe void ClearBufferSubData(BufferTargetARB target, SizedInternalFormat internalformat, long offset, long size, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearBufferSubData(target, internalformat, offset, size, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<Buffer, int, float, int, void> _glClearBufferfi;
        
        public static unsafe void ClearBufferfi(Buffer buffer, int drawbuffer, float depth, int stencil)
        {
            _glClearBufferfi(buffer, drawbuffer, depth, stencil);
        }
        
        public static unsafe delegate*<Buffer, int, IntPtr, void> _glClearBufferfv;
        
        public static unsafe void ClearBufferfv(Buffer buffer, int drawbuffer, ref float value)
        {
            _glClearBufferfv(buffer, drawbuffer, (IntPtr)value);
        }
        
        public static unsafe delegate*<Buffer, int, IntPtr, void> _glClearBufferiv;
        
        public static unsafe void ClearBufferiv(Buffer buffer, int drawbuffer, ref int value)
        {
            _glClearBufferiv(buffer, drawbuffer, (IntPtr)value);
        }
        
        public static unsafe delegate*<Buffer, int, IntPtr, void> _glClearBufferuiv;
        
        public static unsafe void ClearBufferuiv(Buffer buffer, int drawbuffer, ref uint value)
        {
            _glClearBufferuiv(buffer, drawbuffer, (IntPtr)value);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glClearColor;
        
        public static unsafe void ClearColor(float red, float green, float blue, float alpha)
        {
            _glClearColor(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<double, void> _glClearDepth;
        
        public static unsafe void ClearDepth(double depth)
        {
            _glClearDepth(depth);
        }
        
        public static unsafe delegate*<float, void> _glClearDepthf;
        
        public static unsafe void ClearDepthf(float d)
        {
            _glClearDepthf(d);
        }
        
        public static unsafe delegate*<float, void> _glClearIndex;
        
        public static unsafe void ClearIndex(float c)
        {
            _glClearIndex(c);
        }
        
        public static unsafe delegate*<uint, SizedInternalFormat, PixelFormat, PixelType, IntPtr, void> _glClearNamedBufferData;
        
        public static unsafe void ClearNamedBufferData(uint buffer, SizedInternalFormat internalformat, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearNamedBufferData(buffer, internalformat, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, SizedInternalFormat, long, long, PixelFormat, PixelType, IntPtr, void> _glClearNamedBufferSubData;
        
        public static unsafe void ClearNamedBufferSubData(uint buffer, SizedInternalFormat internalformat, long offset, long size, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, Buffer, int, float, int, void> _glClearNamedFramebufferfi;
        
        public static unsafe void ClearNamedFramebufferfi(uint framebuffer, Buffer buffer, int drawbuffer, float depth, int stencil)
        {
            _glClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
        }
        
        public static unsafe delegate*<uint, Buffer, int, IntPtr, void> _glClearNamedFramebufferfv;
        
        public static unsafe void ClearNamedFramebufferfv(uint framebuffer, Buffer buffer, int drawbuffer, ref float value)
        {
            _glClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, Buffer, int, IntPtr, void> _glClearNamedFramebufferiv;
        
        public static unsafe void ClearNamedFramebufferiv(uint framebuffer, Buffer buffer, int drawbuffer, ref int value)
        {
            _glClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, Buffer, int, IntPtr, void> _glClearNamedFramebufferuiv;
        
        public static unsafe void ClearNamedFramebufferuiv(uint framebuffer, Buffer buffer, int drawbuffer, ref uint value)
        {
            _glClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, void> _glClearStencil;
        
        public static unsafe void ClearStencil(int s)
        {
            _glClearStencil(s);
        }
        
        public static unsafe delegate*<uint, int, PixelFormat, PixelType, IntPtr, void> _glClearTexImage;
        
        public static unsafe void ClearTexImage(uint texture, int level, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearTexImage(texture, level, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glClearTexSubImage;
        
        public static unsafe void ClearTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr data)
        {
            _glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureUnit, void> _glClientActiveTexture;
        
        public static unsafe void ClientActiveTexture(TextureUnit texture)
        {
            _glClientActiveTexture(texture);
        }
        
        public static unsafe delegate*<IntPtr, uint, ulong, uint> _glClientWaitSync;
        
        public static unsafe uint ClientWaitSync(IntPtr sync, uint flags, ulong timeout)
        {
            return _glClientWaitSync(sync, flags, timeout);
        }
        
        public static unsafe delegate*<ClipControlOrigin, ClipControlDepth, void> _glClipControl;
        
        public static unsafe void ClipControl(ClipControlOrigin origin, ClipControlDepth depth)
        {
            _glClipControl(origin, depth);
        }
        
        public static unsafe delegate*<ClipPlaneName, IntPtr, void> _glClipPlane;
        
        public static unsafe void ClipPlane(ClipPlaneName plane, ref double equation)
        {
            _glClipPlane(plane, (IntPtr)equation);
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, void> _glColor3b;
        
        public static unsafe void Color3b(sbyte red, sbyte green, sbyte blue)
        {
            _glColor3b(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3bv;
        
        public static unsafe void Color3bv(ref sbyte v)
        {
            _glColor3bv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, void> _glColor3d;
        
        public static unsafe void Color3d(double red, double green, double blue)
        {
            _glColor3d(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3dv;
        
        public static unsafe void Color3dv(ref double v)
        {
            _glColor3dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glColor3f;
        
        public static unsafe void Color3f(float red, float green, float blue)
        {
            _glColor3f(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3fv;
        
        public static unsafe void Color3fv(ref float v)
        {
            _glColor3fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glColor3i;
        
        public static unsafe void Color3i(int red, int green, int blue)
        {
            _glColor3i(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3iv;
        
        public static unsafe void Color3iv(ref int v)
        {
            _glColor3iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glColor3s;
        
        public static unsafe void Color3s(short red, short green, short blue)
        {
            _glColor3s(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3sv;
        
        public static unsafe void Color3sv(ref short v)
        {
            _glColor3sv((IntPtr)v);
        }
        
        public static unsafe delegate*<byte, byte, byte, void> _glColor3ub;
        
        public static unsafe void Color3ub(byte red, byte green, byte blue)
        {
            _glColor3ub(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3ubv;
        
        public static unsafe void Color3ubv(ref byte v)
        {
            _glColor3ubv((IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glColor3ui;
        
        public static unsafe void Color3ui(uint red, uint green, uint blue)
        {
            _glColor3ui(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3uiv;
        
        public static unsafe void Color3uiv(ref uint v)
        {
            _glColor3uiv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, void> _glColor3us;
        
        public static unsafe void Color3us(ushort red, ushort green, ushort blue)
        {
            _glColor3us(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor3usv;
        
        public static unsafe void Color3usv(ref ushort v)
        {
            _glColor3usv((IntPtr)v);
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, sbyte, void> _glColor4b;
        
        public static unsafe void Color4b(sbyte red, sbyte green, sbyte blue, sbyte alpha)
        {
            _glColor4b(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4bv;
        
        public static unsafe void Color4bv(ref sbyte v)
        {
            _glColor4bv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, double, void> _glColor4d;
        
        public static unsafe void Color4d(double red, double green, double blue, double alpha)
        {
            _glColor4d(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4dv;
        
        public static unsafe void Color4dv(ref double v)
        {
            _glColor4dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glColor4f;
        
        public static unsafe void Color4f(float red, float green, float blue, float alpha)
        {
            _glColor4f(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4fv;
        
        public static unsafe void Color4fv(ref float v)
        {
            _glColor4fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glColor4i;
        
        public static unsafe void Color4i(int red, int green, int blue, int alpha)
        {
            _glColor4i(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4iv;
        
        public static unsafe void Color4iv(ref int v)
        {
            _glColor4iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, short, void> _glColor4s;
        
        public static unsafe void Color4s(short red, short green, short blue, short alpha)
        {
            _glColor4s(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4sv;
        
        public static unsafe void Color4sv(ref short v)
        {
            _glColor4sv((IntPtr)v);
        }
        
        public static unsafe delegate*<byte, byte, byte, byte, void> _glColor4ub;
        
        public static unsafe void Color4ub(byte red, byte green, byte blue, byte alpha)
        {
            _glColor4ub(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4ubv;
        
        public static unsafe void Color4ubv(ref byte v)
        {
            _glColor4ubv((IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, void> _glColor4ui;
        
        public static unsafe void Color4ui(uint red, uint green, uint blue, uint alpha)
        {
            _glColor4ui(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4uiv;
        
        public static unsafe void Color4uiv(ref uint v)
        {
            _glColor4uiv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, ushort, void> _glColor4us;
        
        public static unsafe void Color4us(ushort red, ushort green, ushort blue, ushort alpha)
        {
            _glColor4us(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<IntPtr, void> _glColor4usv;
        
        public static unsafe void Color4usv(ref ushort v)
        {
            _glColor4usv((IntPtr)v);
        }
        
        public static unsafe delegate*<byte, byte, byte, byte, void> _glColorMask;
        
        public static unsafe void ColorMask(byte red, byte green, byte blue, byte alpha)
        {
            _glColorMask(red, green, blue, alpha);
        }
        
        public static unsafe delegate*<uint, byte, byte, byte, byte, void> _glColorMaski;
        
        public static unsafe void ColorMaski(uint index, byte r, byte g, byte b, byte a)
        {
            _glColorMaski(index, r, g, b, a);
        }
        
        public static unsafe delegate*<MaterialFace, ColorMaterialParameter, void> _glColorMaterial;
        
        public static unsafe void ColorMaterial(MaterialFace face, ColorMaterialParameter mode)
        {
            _glColorMaterial(face, mode);
        }
        
        public static unsafe delegate*<ColorPointerType, uint, void> _glColorP3ui;
        
        public static unsafe void ColorP3ui(ColorPointerType type, uint color)
        {
            _glColorP3ui(type, color);
        }
        
        public static unsafe delegate*<ColorPointerType, IntPtr, void> _glColorP3uiv;
        
        public static unsafe void ColorP3uiv(ColorPointerType type, ref uint color)
        {
            _glColorP3uiv(type, (IntPtr)color);
        }
        
        public static unsafe delegate*<ColorPointerType, uint, void> _glColorP4ui;
        
        public static unsafe void ColorP4ui(ColorPointerType type, uint color)
        {
            _glColorP4ui(type, color);
        }
        
        public static unsafe delegate*<ColorPointerType, IntPtr, void> _glColorP4uiv;
        
        public static unsafe void ColorP4uiv(ColorPointerType type, ref uint color)
        {
            _glColorP4uiv(type, (IntPtr)color);
        }
        
        public static unsafe delegate*<int, ColorPointerType, int, IntPtr, void> _glColorPointer;
        
        public static unsafe void ColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
        {
            _glColorPointer(size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, void> _glCompileShader;
        
        public static unsafe void CompileShader(uint shader)
        {
            _glCompileShader(shader);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, IntPtr, void> _glCompressedTexImage1D;
        
        public static unsafe void CompressedTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int width, int border, int imageSize, IntPtr data)
        {
            _glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, IntPtr, void> _glCompressedTexImage2D;
        
        public static unsafe void CompressedTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int border, int imageSize, IntPtr data)
        {
            _glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, int, IntPtr, void> _glCompressedTexImage3D;
        
        public static unsafe void CompressedTexImage3D(TextureTarget target, int level, InternalFormat internalformat, int width, int height, int depth, int border, int imageSize, IntPtr data)
        {
            _glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTexSubImage1D;
        
        public static unsafe void CompressedTexSubImage1D(TextureTarget target, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTexSubImage2D;
        
        public static unsafe void CompressedTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTexSubImage3D;
        
        public static unsafe void CompressedTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTextureSubImage1D;
        
        public static unsafe void CompressedTextureSubImage1D(uint texture, int level, int xoffset, int width, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTextureSubImage2D;
        
        public static unsafe void CompressedTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, InternalFormat, int, IntPtr, void> _glCompressedTextureSubImage3D;
        
        public static unsafe void CompressedTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, InternalFormat format, int imageSize, IntPtr data)
        {
            _glCompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<CopyBufferSubDataTarget, CopyBufferSubDataTarget, long, long, long, void> _glCopyBufferSubData;
        
        public static unsafe void CopyBufferSubData(CopyBufferSubDataTarget readTarget, CopyBufferSubDataTarget writeTarget, long readOffset, long writeOffset, long size)
        {
            _glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
        }
        
        public static unsafe delegate*<uint, CopyImageSubDataTarget, int, int, int, int, uint, CopyImageSubDataTarget, int, int, int, int, int, int, int, void> _glCopyImageSubData;
        
        public static unsafe void CopyImageSubData(uint srcName, CopyImageSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, CopyImageSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
        {
            _glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
        }
        
        public static unsafe delegate*<uint, uint, long, long, long, void> _glCopyNamedBufferSubData;
        
        public static unsafe void CopyNamedBufferSubData(uint readBuffer, uint writeBuffer, long readOffset, long writeOffset, long size)
        {
            _glCopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
        }
        
        public static unsafe delegate*<int, int, int, int, PixelCopyType, void> _glCopyPixels;
        
        public static unsafe void CopyPixels(int x, int y, int width, int height, PixelCopyType type)
        {
            _glCopyPixels(x, y, width, height, type);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, void> _glCopyTexImage1D;
        
        public static unsafe void CopyTexImage1D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int border)
        {
            _glCopyTexImage1D(target, level, internalformat, x, y, width, border);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, int, int, void> _glCopyTexImage2D;
        
        public static unsafe void CopyTexImage2D(TextureTarget target, int level, InternalFormat internalformat, int x, int y, int width, int height, int border)
        {
            _glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, void> _glCopyTexSubImage1D;
        
        public static unsafe void CopyTexSubImage1D(TextureTarget target, int level, int xoffset, int x, int y, int width)
        {
            _glCopyTexSubImage1D(target, level, xoffset, x, y, width);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, void> _glCopyTexSubImage2D;
        
        public static unsafe void CopyTexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, int, void> _glCopyTexSubImage3D;
        
        public static unsafe void CopyTexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, void> _glCopyTextureSubImage1D;
        
        public static unsafe void CopyTextureSubImage1D(uint texture, int level, int xoffset, int x, int y, int width)
        {
            _glCopyTextureSubImage1D(texture, level, xoffset, x, y, width);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, void> _glCopyTextureSubImage2D;
        
        public static unsafe void CopyTextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int x, int y, int width, int height)
        {
            _glCopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, int, void> _glCopyTextureSubImage3D;
        
        public static unsafe void CopyTextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
        {
            _glCopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateBuffers;
        
        public static unsafe void CreateBuffers(int n, ref uint buffers)
        {
            _glCreateBuffers(n, (IntPtr)buffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateFramebuffers;
        
        public static unsafe void CreateFramebuffers(int n, ref uint framebuffers)
        {
            _glCreateFramebuffers(n, (IntPtr)framebuffers);
        }
        
        public static unsafe delegate*<uint> _glCreateProgram;
        
        public static unsafe uint CreateProgram()
        {
            return _glCreateProgram();
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateProgramPipelines;
        
        public static unsafe void CreateProgramPipelines(int n, ref uint pipelines)
        {
            _glCreateProgramPipelines(n, (IntPtr)pipelines);
        }
        
        public static unsafe delegate*<QueryTarget, int, IntPtr, void> _glCreateQueries;
        
        public static unsafe void CreateQueries(QueryTarget target, int n, ref uint ids)
        {
            _glCreateQueries(target, n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateRenderbuffers;
        
        public static unsafe void CreateRenderbuffers(int n, ref uint renderbuffers)
        {
            _glCreateRenderbuffers(n, (IntPtr)renderbuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateSamplers;
        
        public static unsafe void CreateSamplers(int n, ref uint samplers)
        {
            _glCreateSamplers(n, (IntPtr)samplers);
        }
        
        public static unsafe delegate*<ShaderType, uint> _glCreateShader;
        
        public static unsafe uint CreateShader(ShaderType type)
        {
            return _glCreateShader(type);
        }
        
        public static unsafe delegate*<ShaderType, int, IntPtr, uint> _glCreateShaderProgramv;
        
        public static unsafe uint CreateShaderProgramv(ShaderType type, int count, out IntPtr strings)
        {
            return _glCreateShaderProgramv(type, count, (IntPtr)strings);
        }
        
        public static unsafe delegate*<TextureTarget, int, IntPtr, void> _glCreateTextures;
        
        public static unsafe void CreateTextures(TextureTarget target, int n, ref uint textures)
        {
            _glCreateTextures(target, n, (IntPtr)textures);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateTransformFeedbacks;
        
        public static unsafe void CreateTransformFeedbacks(int n, ref uint ids)
        {
            _glCreateTransformFeedbacks(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glCreateVertexArrays;
        
        public static unsafe void CreateVertexArrays(int n, ref uint arrays)
        {
            _glCreateVertexArrays(n, (IntPtr)arrays);
        }
        
        public static unsafe delegate*<CullFaceMode, void> _glCullFace;
        
        public static unsafe void CullFace(CullFaceMode mode)
        {
            _glCullFace(mode);
        }
        
        public static unsafe delegate*<GLDEBUGPROC, IntPtr, void> _glDebugMessageCallback;
        
        public static unsafe void DebugMessageCallback(GLDEBUGPROC callback, IntPtr userParam)
        {
            _glDebugMessageCallback(callback, (IntPtr)userParam);
        }
        
        public static unsafe delegate*<DebugSource, DebugType, DebugSeverity, int, IntPtr, byte, void> _glDebugMessageControl;
        
        public static unsafe void DebugMessageControl(DebugSource source, DebugType type, DebugSeverity severity, int count, ref uint ids, byte enabled)
        {
            _glDebugMessageControl(source, type, severity, count, (IntPtr)ids, enabled);
        }
        
        public static unsafe delegate*<DebugSource, DebugType, uint, DebugSeverity, int, IntPtr, void> _glDebugMessageInsert;
        
        public static unsafe void DebugMessageInsert(DebugSource source, DebugType type, uint id, DebugSeverity severity, int length, ref sbyte buf)
        {
            _glDebugMessageInsert(source, type, id, severity, length, (IntPtr)buf);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteBuffers;
        
        public static unsafe void DeleteBuffers(int n, ref uint buffers)
        {
            _glDeleteBuffers(n, (IntPtr)buffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteFramebuffers;
        
        public static unsafe void DeleteFramebuffers(int n, ref uint framebuffers)
        {
            _glDeleteFramebuffers(n, (IntPtr)framebuffers);
        }
        
        public static unsafe delegate*<uint, int, void> _glDeleteLists;
        
        public static unsafe void DeleteLists(uint list, int range)
        {
            _glDeleteLists(list, range);
        }
        
        public static unsafe delegate*<uint, void> _glDeleteProgram;
        
        public static unsafe void DeleteProgram(uint program)
        {
            _glDeleteProgram(program);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteProgramPipelines;
        
        public static unsafe void DeleteProgramPipelines(int n, ref uint pipelines)
        {
            _glDeleteProgramPipelines(n, (IntPtr)pipelines);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteQueries;
        
        public static unsafe void DeleteQueries(int n, ref uint ids)
        {
            _glDeleteQueries(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteRenderbuffers;
        
        public static unsafe void DeleteRenderbuffers(int n, ref uint renderbuffers)
        {
            _glDeleteRenderbuffers(n, (IntPtr)renderbuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteSamplers;
        
        public static unsafe void DeleteSamplers(int count, ref uint samplers)
        {
            _glDeleteSamplers(count, (IntPtr)samplers);
        }
        
        public static unsafe delegate*<uint, void> _glDeleteShader;
        
        public static unsafe void DeleteShader(uint shader)
        {
            _glDeleteShader(shader);
        }
        
        public static unsafe delegate*<IntPtr, void> _glDeleteSync;
        
        public static unsafe void DeleteSync(IntPtr sync)
        {
            _glDeleteSync(sync);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteTextures;
        
        public static unsafe void DeleteTextures(int n, ref uint textures)
        {
            _glDeleteTextures(n, (IntPtr)textures);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteTransformFeedbacks;
        
        public static unsafe void DeleteTransformFeedbacks(int n, ref uint ids)
        {
            _glDeleteTransformFeedbacks(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDeleteVertexArrays;
        
        public static unsafe void DeleteVertexArrays(int n, ref uint arrays)
        {
            _glDeleteVertexArrays(n, (IntPtr)arrays);
        }
        
        public static unsafe delegate*<DepthFunction, void> _glDepthFunc;
        
        public static unsafe void DepthFunc(DepthFunction func)
        {
            _glDepthFunc(func);
        }
        
        public static unsafe delegate*<byte, void> _glDepthMask;
        
        public static unsafe void DepthMask(byte flag)
        {
            _glDepthMask(flag);
        }
        
        public static unsafe delegate*<double, double, void> _glDepthRange;
        
        public static unsafe void DepthRange(double n, double f)
        {
            _glDepthRange(n, f);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glDepthRangeArrayv;
        
        public static unsafe void DepthRangeArrayv(uint first, int count, ref double v)
        {
            _glDepthRangeArrayv(first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, double, double, void> _glDepthRangeIndexed;
        
        public static unsafe void DepthRangeIndexed(uint index, double n, double f)
        {
            _glDepthRangeIndexed(index, n, f);
        }
        
        public static unsafe delegate*<float, float, void> _glDepthRangef;
        
        public static unsafe void DepthRangef(float n, float f)
        {
            _glDepthRangef(n, f);
        }
        
        public static unsafe delegate*<uint, uint, void> _glDetachShader;
        
        public static unsafe void DetachShader(uint program, uint shader)
        {
            _glDetachShader(program, shader);
        }
        
        public static unsafe delegate*<EnableCap, void> _glDisable;
        
        public static unsafe void Disable(EnableCap cap)
        {
            _glDisable(cap);
        }
        
        public static unsafe delegate*<EnableCap, void> _glDisableClientState;
        
        public static unsafe void DisableClientState(EnableCap array)
        {
            _glDisableClientState(array);
        }
        
        public static unsafe delegate*<uint, uint, void> _glDisableVertexArrayAttrib;
        
        public static unsafe void DisableVertexArrayAttrib(uint vaobj, uint index)
        {
            _glDisableVertexArrayAttrib(vaobj, index);
        }
        
        public static unsafe delegate*<uint, void> _glDisableVertexAttribArray;
        
        public static unsafe void DisableVertexAttribArray(uint index)
        {
            _glDisableVertexAttribArray(index);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glDisablei;
        
        public static unsafe void Disablei(EnableCap target, uint index)
        {
            _glDisablei(target, index);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glDispatchCompute;
        
        public static unsafe void DispatchCompute(uint num_groups_x, uint num_groups_y, uint num_groups_z)
        {
            _glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
        }
        
        public static unsafe delegate*<long, void> _glDispatchComputeIndirect;
        
        public static unsafe void DispatchComputeIndirect(long indirect)
        {
            _glDispatchComputeIndirect(indirect);
        }
        
        public static unsafe delegate*<PrimitiveType, int, int, void> _glDrawArrays;
        
        public static unsafe void DrawArrays(PrimitiveType mode, int first, int count)
        {
            _glDrawArrays(mode, first, count);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, void> _glDrawArraysIndirect;
        
        public static unsafe void DrawArraysIndirect(PrimitiveType mode, IntPtr indirect)
        {
            _glDrawArraysIndirect(mode, (IntPtr)indirect);
        }
        
        public static unsafe delegate*<PrimitiveType, int, int, int, void> _glDrawArraysInstanced;
        
        public static unsafe void DrawArraysInstanced(PrimitiveType mode, int first, int count, int instancecount)
        {
            _glDrawArraysInstanced(mode, first, count, instancecount);
        }
        
        public static unsafe delegate*<PrimitiveType, int, int, int, uint, void> _glDrawArraysInstancedBaseInstance;
        
        public static unsafe void DrawArraysInstancedBaseInstance(PrimitiveType mode, int first, int count, int instancecount, uint baseinstance)
        {
            _glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
        }
        
        public static unsafe delegate*<DrawBufferMode, void> _glDrawBuffer;
        
        public static unsafe void DrawBuffer(DrawBufferMode buf)
        {
            _glDrawBuffer(buf);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glDrawBuffers;
        
        public static unsafe void DrawBuffers(int n, ref DrawBufferMode bufs)
        {
            _glDrawBuffers(n, (IntPtr)bufs);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, void> _glDrawElements;
        
        public static unsafe void DrawElements(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices)
        {
            _glDrawElements(mode, count, type, (IntPtr)indices);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, void> _glDrawElementsBaseVertex;
        
        public static unsafe void DrawElementsBaseVertex(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int basevertex)
        {
            _glDrawElementsBaseVertex(mode, count, type, (IntPtr)indices, basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, DrawElementsType, IntPtr, void> _glDrawElementsIndirect;
        
        public static unsafe void DrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect)
        {
            _glDrawElementsIndirect(mode, type, (IntPtr)indirect);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, void> _glDrawElementsInstanced;
        
        public static unsafe void DrawElementsInstanced(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount)
        {
            _glDrawElementsInstanced(mode, count, type, (IntPtr)indices, instancecount);
        }
        
        public static unsafe delegate*<PrimitiveType, int, PrimitiveType, IntPtr, int, uint, void> _glDrawElementsInstancedBaseInstance;
        
        public static unsafe void DrawElementsInstancedBaseInstance(PrimitiveType mode, int count, PrimitiveType type, IntPtr indices, int instancecount, uint baseinstance)
        {
            _glDrawElementsInstancedBaseInstance(mode, count, type, (IntPtr)indices, instancecount, baseinstance);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, int, void> _glDrawElementsInstancedBaseVertex;
        
        public static unsafe void DrawElementsInstancedBaseVertex(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex)
        {
            _glDrawElementsInstancedBaseVertex(mode, count, type, (IntPtr)indices, instancecount, basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, int, DrawElementsType, IntPtr, int, int, uint, void> _glDrawElementsInstancedBaseVertexBaseInstance;
        
        public static unsafe void DrawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode, int count, DrawElementsType type, IntPtr indices, int instancecount, int basevertex, uint baseinstance)
        {
            _glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, (IntPtr)indices, instancecount, basevertex, baseinstance);
        }
        
        public static unsafe delegate*<int, int, PixelFormat, PixelType, IntPtr, void> _glDrawPixels;
        
        public static unsafe void DrawPixels(int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glDrawPixels(width, height, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, uint, int, DrawElementsType, IntPtr, void> _glDrawRangeElements;
        
        public static unsafe void DrawRangeElements(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices)
        {
            _glDrawRangeElements(mode, start, end, count, type, (IntPtr)indices);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, uint, int, DrawElementsType, IntPtr, int, void> _glDrawRangeElementsBaseVertex;
        
        public static unsafe void DrawRangeElementsBaseVertex(PrimitiveType mode, uint start, uint end, int count, DrawElementsType type, IntPtr indices, int basevertex)
        {
            _glDrawRangeElementsBaseVertex(mode, start, end, count, type, (IntPtr)indices, basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, void> _glDrawTransformFeedback;
        
        public static unsafe void DrawTransformFeedback(PrimitiveType mode, uint id)
        {
            _glDrawTransformFeedback(mode, id);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, int, void> _glDrawTransformFeedbackInstanced;
        
        public static unsafe void DrawTransformFeedbackInstanced(PrimitiveType mode, uint id, int instancecount)
        {
            _glDrawTransformFeedbackInstanced(mode, id, instancecount);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, uint, void> _glDrawTransformFeedbackStream;
        
        public static unsafe void DrawTransformFeedbackStream(PrimitiveType mode, uint id, uint stream)
        {
            _glDrawTransformFeedbackStream(mode, id, stream);
        }
        
        public static unsafe delegate*<PrimitiveType, uint, uint, int, void> _glDrawTransformFeedbackStreamInstanced;
        
        public static unsafe void DrawTransformFeedbackStreamInstanced(PrimitiveType mode, uint id, uint stream, int instancecount)
        {
            _glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
        }
        
        public static unsafe delegate*<byte, void> _glEdgeFlag;
        
        public static unsafe void EdgeFlag(byte flag)
        {
            _glEdgeFlag(flag);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glEdgeFlagPointer;
        
        public static unsafe void EdgeFlagPointer(int stride, IntPtr pointer)
        {
            _glEdgeFlagPointer(stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<IntPtr, void> _glEdgeFlagv;
        
        public static unsafe void EdgeFlagv(ref byte flag)
        {
            _glEdgeFlagv((IntPtr)flag);
        }
        
        public static unsafe delegate*<EnableCap, void> _glEnable;
        
        public static unsafe void Enable(EnableCap cap)
        {
            _glEnable(cap);
        }
        
        public static unsafe delegate*<EnableCap, void> _glEnableClientState;
        
        public static unsafe void EnableClientState(EnableCap array)
        {
            _glEnableClientState(array);
        }
        
        public static unsafe delegate*<uint, uint, void> _glEnableVertexArrayAttrib;
        
        public static unsafe void EnableVertexArrayAttrib(uint vaobj, uint index)
        {
            _glEnableVertexArrayAttrib(vaobj, index);
        }
        
        public static unsafe delegate*<uint, void> _glEnableVertexAttribArray;
        
        public static unsafe void EnableVertexAttribArray(uint index)
        {
            _glEnableVertexAttribArray(index);
        }
        
        public static unsafe delegate*<EnableCap, uint, void> _glEnablei;
        
        public static unsafe void Enablei(EnableCap target, uint index)
        {
            _glEnablei(target, index);
        }
        
        public static unsafe delegate*<void> _glEnd;
        
        public static unsafe void End()
        {
            _glEnd();
        }
        
        public static unsafe delegate*<void> _glEndConditionalRender;
        
        public static unsafe void EndConditionalRender()
        {
            _glEndConditionalRender();
        }
        
        public static unsafe delegate*<void> _glEndList;
        
        public static unsafe void EndList()
        {
            _glEndList();
        }
        
        public static unsafe delegate*<QueryTarget, void> _glEndQuery;
        
        public static unsafe void EndQuery(QueryTarget target)
        {
            _glEndQuery(target);
        }
        
        public static unsafe delegate*<QueryTarget, uint, void> _glEndQueryIndexed;
        
        public static unsafe void EndQueryIndexed(QueryTarget target, uint index)
        {
            _glEndQueryIndexed(target, index);
        }
        
        public static unsafe delegate*<void> _glEndTransformFeedback;
        
        public static unsafe void EndTransformFeedback()
        {
            _glEndTransformFeedback();
        }
        
        public static unsafe delegate*<double, void> _glEvalCoord1d;
        
        public static unsafe void EvalCoord1d(double u)
        {
            _glEvalCoord1d(u);
        }
        
        public static unsafe delegate*<IntPtr, void> _glEvalCoord1dv;
        
        public static unsafe void EvalCoord1dv(ref double u)
        {
            _glEvalCoord1dv((IntPtr)u);
        }
        
        public static unsafe delegate*<float, void> _glEvalCoord1f;
        
        public static unsafe void EvalCoord1f(float u)
        {
            _glEvalCoord1f(u);
        }
        
        public static unsafe delegate*<IntPtr, void> _glEvalCoord1fv;
        
        public static unsafe void EvalCoord1fv(ref float u)
        {
            _glEvalCoord1fv((IntPtr)u);
        }
        
        public static unsafe delegate*<double, double, void> _glEvalCoord2d;
        
        public static unsafe void EvalCoord2d(double u, double v)
        {
            _glEvalCoord2d(u, v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glEvalCoord2dv;
        
        public static unsafe void EvalCoord2dv(ref double u)
        {
            _glEvalCoord2dv((IntPtr)u);
        }
        
        public static unsafe delegate*<float, float, void> _glEvalCoord2f;
        
        public static unsafe void EvalCoord2f(float u, float v)
        {
            _glEvalCoord2f(u, v);
        }
        
        public static unsafe delegate*<IntPtr, void> _glEvalCoord2fv;
        
        public static unsafe void EvalCoord2fv(ref float u)
        {
            _glEvalCoord2fv((IntPtr)u);
        }
        
        public static unsafe delegate*<MeshMode1, int, int, void> _glEvalMesh1;
        
        public static unsafe void EvalMesh1(MeshMode1 mode, int i1, int i2)
        {
            _glEvalMesh1(mode, i1, i2);
        }
        
        public static unsafe delegate*<MeshMode2, int, int, int, int, void> _glEvalMesh2;
        
        public static unsafe void EvalMesh2(MeshMode2 mode, int i1, int i2, int j1, int j2)
        {
            _glEvalMesh2(mode, i1, i2, j1, j2);
        }
        
        public static unsafe delegate*<int, void> _glEvalPoint1;
        
        public static unsafe void EvalPoint1(int i)
        {
            _glEvalPoint1(i);
        }
        
        public static unsafe delegate*<int, int, void> _glEvalPoint2;
        
        public static unsafe void EvalPoint2(int i, int j)
        {
            _glEvalPoint2(i, j);
        }
        
        public static unsafe delegate*<int, FeedbackType, IntPtr, void> _glFeedbackBuffer;
        
        public static unsafe void FeedbackBuffer(int size, FeedbackType type, ref float buffer)
        {
            _glFeedbackBuffer(size, type, (IntPtr)buffer);
        }
        
        public static unsafe delegate*<SyncCondition, uint, IntPtr> _glFenceSync;
        
        public static unsafe IntPtr FenceSync(SyncCondition condition, uint flags)
        {
            return _glFenceSync(condition, flags);
        }
        
        public static unsafe delegate*<void> _glFinish;
        
        public static unsafe void Finish()
        {
            _glFinish();
        }
        
        public static unsafe delegate*<void> _glFlush;
        
        public static unsafe void Flush()
        {
            _glFlush();
        }
        
        public static unsafe delegate*<BufferTargetARB, long, long, void> _glFlushMappedBufferRange;
        
        public static unsafe void FlushMappedBufferRange(BufferTargetARB target, long offset, long length)
        {
            _glFlushMappedBufferRange(target, offset, length);
        }
        
        public static unsafe delegate*<uint, long, long, void> _glFlushMappedNamedBufferRange;
        
        public static unsafe void FlushMappedNamedBufferRange(uint buffer, long offset, long length)
        {
            _glFlushMappedNamedBufferRange(buffer, offset, length);
        }
        
        public static unsafe delegate*<FogPointerTypeEXT, int, IntPtr, void> _glFogCoordPointer;
        
        public static unsafe void FogCoordPointer(FogPointerTypeEXT type, int stride, IntPtr pointer)
        {
            _glFogCoordPointer(type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<double, void> _glFogCoordd;
        
        public static unsafe void FogCoordd(double coord)
        {
            _glFogCoordd(coord);
        }
        
        public static unsafe delegate*<IntPtr, void> _glFogCoorddv;
        
        public static unsafe void FogCoorddv(ref double coord)
        {
            _glFogCoorddv((IntPtr)coord);
        }
        
        public static unsafe delegate*<float, void> _glFogCoordf;
        
        public static unsafe void FogCoordf(float coord)
        {
            _glFogCoordf(coord);
        }
        
        public static unsafe delegate*<IntPtr, void> _glFogCoordfv;
        
        public static unsafe void FogCoordfv(ref float coord)
        {
            _glFogCoordfv((IntPtr)coord);
        }
        
        public static unsafe delegate*<FogParameter, float, void> _glFogf;
        
        public static unsafe void Fogf(FogParameter pname, float param)
        {
            _glFogf(pname, param);
        }
        
        public static unsafe delegate*<FogParameter, IntPtr, void> _glFogfv;
        
        public static unsafe void Fogfv(FogParameter pname, ref float @params)
        {
            _glFogfv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<FogParameter, int, void> _glFogi;
        
        public static unsafe void Fogi(FogParameter pname, int param)
        {
            _glFogi(pname, param);
        }
        
        public static unsafe delegate*<FogParameter, IntPtr, void> _glFogiv;
        
        public static unsafe void Fogiv(FogParameter pname, ref int @params)
        {
            _glFogiv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferParameterName, int, void> _glFramebufferParameteri;
        
        public static unsafe void FramebufferParameteri(FramebufferTarget target, FramebufferParameterName pname, int param)
        {
            _glFramebufferParameteri(target, pname, param);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, RenderbufferTarget, uint, void> _glFramebufferRenderbuffer;
        
        public static unsafe void FramebufferRenderbuffer(FramebufferTarget target, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
        {
            _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, uint, int, void> _glFramebufferTexture;
        
        public static unsafe void FramebufferTexture(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level)
        {
            _glFramebufferTexture(target, attachment, texture, level);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, void> _glFramebufferTexture1D;
        
        public static unsafe void FramebufferTexture1D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
        {
            _glFramebufferTexture1D(target, attachment, textarget, texture, level);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, void> _glFramebufferTexture2D;
        
        public static unsafe void FramebufferTexture2D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level)
        {
            _glFramebufferTexture2D(target, attachment, textarget, texture, level);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, TextureTarget, uint, int, int, void> _glFramebufferTexture3D;
        
        public static unsafe void FramebufferTexture3D(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, uint texture, int level, int zoffset)
        {
            _glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, uint, int, int, void> _glFramebufferTextureLayer;
        
        public static unsafe void FramebufferTextureLayer(FramebufferTarget target, FramebufferAttachment attachment, uint texture, int level, int layer)
        {
            _glFramebufferTextureLayer(target, attachment, texture, level, layer);
        }
        
        public static unsafe delegate*<FrontFaceDirection, void> _glFrontFace;
        
        public static unsafe void FrontFace(FrontFaceDirection mode)
        {
            _glFrontFace(mode);
        }
        
        public static unsafe delegate*<double, double, double, double, double, double, void> _glFrustum;
        
        public static unsafe void Frustum(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            _glFrustum(left, right, bottom, top, zNear, zFar);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenBuffers;
        
        public static unsafe void GenBuffers(int n, ref uint buffers)
        {
            _glGenBuffers(n, (IntPtr)buffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenFramebuffers;
        
        public static unsafe void GenFramebuffers(int n, ref uint framebuffers)
        {
            _glGenFramebuffers(n, (IntPtr)framebuffers);
        }
        
        public static unsafe delegate*<int, uint> _glGenLists;
        
        public static unsafe uint GenLists(int range)
        {
            return _glGenLists(range);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenProgramPipelines;
        
        public static unsafe void GenProgramPipelines(int n, ref uint pipelines)
        {
            _glGenProgramPipelines(n, (IntPtr)pipelines);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenQueries;
        
        public static unsafe void GenQueries(int n, ref uint ids)
        {
            _glGenQueries(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenRenderbuffers;
        
        public static unsafe void GenRenderbuffers(int n, ref uint renderbuffers)
        {
            _glGenRenderbuffers(n, (IntPtr)renderbuffers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenSamplers;
        
        public static unsafe void GenSamplers(int count, ref uint samplers)
        {
            _glGenSamplers(count, (IntPtr)samplers);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenTextures;
        
        public static unsafe void GenTextures(int n, ref uint textures)
        {
            _glGenTextures(n, (IntPtr)textures);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenTransformFeedbacks;
        
        public static unsafe void GenTransformFeedbacks(int n, ref uint ids)
        {
            _glGenTransformFeedbacks(n, (IntPtr)ids);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGenVertexArrays;
        
        public static unsafe void GenVertexArrays(int n, ref uint arrays)
        {
            _glGenVertexArrays(n, (IntPtr)arrays);
        }
        
        public static unsafe delegate*<TextureTarget, void> _glGenerateMipmap;
        
        public static unsafe void GenerateMipmap(TextureTarget target)
        {
            _glGenerateMipmap(target);
        }
        
        public static unsafe delegate*<uint, void> _glGenerateTextureMipmap;
        
        public static unsafe void GenerateTextureMipmap(uint texture)
        {
            _glGenerateTextureMipmap(texture);
        }
        
        public static unsafe delegate*<uint, uint, AtomicCounterBufferPName, IntPtr, void> _glGetActiveAtomicCounterBufferiv;
        
        public static unsafe void GetActiveAtomicCounterBufferiv(uint program, uint bufferIndex, AtomicCounterBufferPName pname, ref int @params)
        {
            _glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, IntPtr, IntPtr, void> _glGetActiveAttrib;
        
        public static unsafe void GetActiveAttrib(uint program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type, ref sbyte name)
        {
            _glGetActiveAttrib(program, index, bufSize, (IntPtr)length, (IntPtr)size, (IntPtr)type, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ShaderType, uint, int, IntPtr, IntPtr, void> _glGetActiveSubroutineName;
        
        public static unsafe void GetActiveSubroutineName(uint program, ShaderType shadertype, uint index, int bufSize, ref int length, ref sbyte name)
        {
            _glGetActiveSubroutineName(program, shadertype, index, bufSize, (IntPtr)length, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ShaderType, uint, int, IntPtr, IntPtr, void> _glGetActiveSubroutineUniformName;
        
        public static unsafe void GetActiveSubroutineUniformName(uint program, ShaderType shadertype, uint index, int bufSize, ref int length, ref sbyte name)
        {
            _glGetActiveSubroutineUniformName(program, shadertype, index, bufSize, (IntPtr)length, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ShaderType, uint, SubroutineParameterName, IntPtr, void> _glGetActiveSubroutineUniformiv;
        
        public static unsafe void GetActiveSubroutineUniformiv(uint program, ShaderType shadertype, uint index, SubroutineParameterName pname, ref int values)
        {
            _glGetActiveSubroutineUniformiv(program, shadertype, index, pname, (IntPtr)values);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, IntPtr, IntPtr, void> _glGetActiveUniform;
        
        public static unsafe void GetActiveUniform(uint program, uint index, int bufSize, ref int length, ref int size, ref UniformType type, ref sbyte name)
        {
            _glGetActiveUniform(program, index, bufSize, (IntPtr)length, (IntPtr)size, (IntPtr)type, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, void> _glGetActiveUniformBlockName;
        
        public static unsafe void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, ref int length, ref sbyte uniformBlockName)
        {
            _glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, (IntPtr)length, (IntPtr)uniformBlockName);
        }
        
        public static unsafe delegate*<uint, uint, UniformBlockPName, IntPtr, void> _glGetActiveUniformBlockiv;
        
        public static unsafe void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, UniformBlockPName pname, ref int @params)
        {
            _glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, void> _glGetActiveUniformName;
        
        public static unsafe void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, ref int length, ref sbyte uniformName)
        {
            _glGetActiveUniformName(program, uniformIndex, bufSize, (IntPtr)length, (IntPtr)uniformName);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, UniformPName, IntPtr, void> _glGetActiveUniformsiv;
        
        public static unsafe void GetActiveUniformsiv(uint program, int uniformCount, ref uint uniformIndices, UniformPName pname, ref int @params)
        {
            _glGetActiveUniformsiv(program, uniformCount, (IntPtr)uniformIndices, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetAttachedShaders;
        
        public static unsafe void GetAttachedShaders(uint program, int maxCount, ref int count, ref uint shaders)
        {
            _glGetAttachedShaders(program, maxCount, (IntPtr)count, (IntPtr)shaders);
        }
        
        public static unsafe delegate*<uint, IntPtr, int> _glGetAttribLocation;
        
        public static unsafe int GetAttribLocation(uint program, ref sbyte name)
        {
            return _glGetAttribLocation(program, (IntPtr)name);
        }
        
        public static unsafe delegate*<BufferTargetARB, uint, IntPtr, void> _glGetBooleani_v;
        
        public static unsafe void GetBooleani_v(BufferTargetARB target, uint index, ref byte data)
        {
            _glGetBooleani_v(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetBooleanv;
        
        public static unsafe void GetBooleanv(GetPName pname, ref byte data)
        {
            _glGetBooleanv(pname, (IntPtr)data);
        }
        
        public static unsafe delegate*<BufferTargetARB, BufferPNameARB, IntPtr, void> _glGetBufferParameteri64v;
        
        public static unsafe void GetBufferParameteri64v(BufferTargetARB target, BufferPNameARB pname, ref long @params)
        {
            _glGetBufferParameteri64v(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<BufferTargetARB, BufferPNameARB, IntPtr, void> _glGetBufferParameteriv;
        
        public static unsafe void GetBufferParameteriv(BufferTargetARB target, BufferPNameARB pname, ref int @params)
        {
            _glGetBufferParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<BufferTargetARB, BufferPointerNameARB, IntPtr, void> _glGetBufferPointerv;
        
        public static unsafe void GetBufferPointerv(BufferTargetARB target, BufferPointerNameARB pname, out IntPtr @params)
        {
            _glGetBufferPointerv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, long, IntPtr, void> _glGetBufferSubData;
        
        public static unsafe void GetBufferSubData(BufferTargetARB target, long offset, long size, IntPtr data)
        {
            _glGetBufferSubData(target, offset, size, (IntPtr)data);
        }
        
        public static unsafe delegate*<ClipPlaneName, IntPtr, void> _glGetClipPlane;
        
        public static unsafe void GetClipPlane(ClipPlaneName plane, ref double equation)
        {
            _glGetClipPlane(plane, (IntPtr)equation);
        }
        
        public static unsafe delegate*<TextureTarget, int, IntPtr, void> _glGetCompressedTexImage;
        
        public static unsafe void GetCompressedTexImage(TextureTarget target, int level, IntPtr img)
        {
            _glGetCompressedTexImage(target, level, (IntPtr)img);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetCompressedTextureImage;
        
        public static unsafe void GetCompressedTextureImage(uint texture, int level, int bufSize, IntPtr pixels)
        {
            _glGetCompressedTextureImage(texture, level, bufSize, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, int, IntPtr, void> _glGetCompressedTextureSubImage;
        
        public static unsafe void GetCompressedTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int bufSize, IntPtr pixels)
        {
            _glGetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, IntPtr, uint> _glGetDebugMessageLog;
        
        public static unsafe uint GetDebugMessageLog(uint count, int bufSize, ref DebugSource sources, ref DebugType types, ref uint ids, ref DebugSeverity severities, ref int lengths, ref sbyte messageLog)
        {
            return _glGetDebugMessageLog(count, bufSize, (IntPtr)sources, (IntPtr)types, (IntPtr)ids, (IntPtr)severities, (IntPtr)lengths, (IntPtr)messageLog);
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetDoublei_v;
        
        public static unsafe void GetDoublei_v(GetPName target, uint index, ref double data)
        {
            _glGetDoublei_v(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetDoublev;
        
        public static unsafe void GetDoublev(GetPName pname, ref double data)
        {
            _glGetDoublev(pname, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint> _glGetError;
        
        public static unsafe uint GetError()
        {
            return _glGetError();
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetFloati_v;
        
        public static unsafe void GetFloati_v(GetPName target, uint index, ref float data)
        {
            _glGetFloati_v(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetFloatv;
        
        public static unsafe void GetFloatv(GetPName pname, ref float data)
        {
            _glGetFloatv(pname, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, IntPtr, int> _glGetFragDataIndex;
        
        public static unsafe int GetFragDataIndex(uint program, ref sbyte name)
        {
            return _glGetFragDataIndex(program, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, IntPtr, int> _glGetFragDataLocation;
        
        public static unsafe int GetFragDataLocation(uint program, ref sbyte name)
        {
            return _glGetFragDataLocation(program, (IntPtr)name);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachment, FramebufferAttachmentParameterName, IntPtr, void> _glGetFramebufferAttachmentParameteriv;
        
        public static unsafe void GetFramebufferAttachmentParameteriv(FramebufferTarget target, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int @params)
        {
            _glGetFramebufferAttachmentParameteriv(target, attachment, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<FramebufferTarget, FramebufferAttachmentParameterName, IntPtr, void> _glGetFramebufferParameteriv;
        
        public static unsafe void GetFramebufferParameteriv(FramebufferTarget target, FramebufferAttachmentParameterName pname, ref int @params)
        {
            _glGetFramebufferParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint> _glGetGraphicsResetStatus;
        
        public static unsafe uint GetGraphicsResetStatus()
        {
            return _glGetGraphicsResetStatus();
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetInteger64i_v;
        
        public static unsafe void GetInteger64i_v(GetPName target, uint index, ref long data)
        {
            _glGetInteger64i_v(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetInteger64v;
        
        public static unsafe void GetInteger64v(GetPName pname, ref long data)
        {
            _glGetInteger64v(pname, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, uint, IntPtr, void> _glGetIntegeri_v;
        
        public static unsafe void GetIntegeri_v(GetPName target, uint index, ref int data)
        {
            _glGetIntegeri_v(target, index, (IntPtr)data);
        }
        
        public static unsafe delegate*<GetPName, IntPtr, void> _glGetIntegerv;
        
        public static unsafe void GetIntegerv(GetPName pname, ref int data)
        {
            _glGetIntegerv(pname, (IntPtr)data);
        }
        
        public static unsafe delegate*<TextureTarget, InternalFormat, InternalFormatPName, int, IntPtr, void> _glGetInternalformati64v;
        
        public static unsafe void GetInternalformati64v(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref long @params)
        {
            _glGetInternalformati64v(target, internalformat, pname, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, InternalFormat, InternalFormatPName, int, IntPtr, void> _glGetInternalformativ;
        
        public static unsafe void GetInternalformativ(TextureTarget target, InternalFormat internalformat, InternalFormatPName pname, int count, ref int @params)
        {
            _glGetInternalformativ(target, internalformat, pname, count, (IntPtr)@params);
        }
        
        public static unsafe delegate*<LightName, LightParameter, IntPtr, void> _glGetLightfv;
        
        public static unsafe void GetLightfv(LightName light, LightParameter pname, ref float @params)
        {
            _glGetLightfv(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<LightName, LightParameter, IntPtr, void> _glGetLightiv;
        
        public static unsafe void GetLightiv(LightName light, LightParameter pname, ref int @params)
        {
            _glGetLightiv(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MapTarget, GetMapQuery, IntPtr, void> _glGetMapdv;
        
        public static unsafe void GetMapdv(MapTarget target, GetMapQuery query, ref double v)
        {
            _glGetMapdv(target, query, (IntPtr)v);
        }
        
        public static unsafe delegate*<MapTarget, GetMapQuery, IntPtr, void> _glGetMapfv;
        
        public static unsafe void GetMapfv(MapTarget target, GetMapQuery query, ref float v)
        {
            _glGetMapfv(target, query, (IntPtr)v);
        }
        
        public static unsafe delegate*<MapTarget, GetMapQuery, IntPtr, void> _glGetMapiv;
        
        public static unsafe void GetMapiv(MapTarget target, GetMapQuery query, ref int v)
        {
            _glGetMapiv(target, query, (IntPtr)v);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glGetMaterialfv;
        
        public static unsafe void GetMaterialfv(MaterialFace face, MaterialParameter pname, ref float @params)
        {
            _glGetMaterialfv(face, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glGetMaterialiv;
        
        public static unsafe void GetMaterialiv(MaterialFace face, MaterialParameter pname, ref int @params)
        {
            _glGetMaterialiv(face, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<GetMultisamplePNameNV, uint, IntPtr, void> _glGetMultisamplefv;
        
        public static unsafe void GetMultisamplefv(GetMultisamplePNameNV pname, uint index, ref float val)
        {
            _glGetMultisamplefv(pname, index, (IntPtr)val);
        }
        
        public static unsafe delegate*<uint, BufferPNameARB, IntPtr, void> _glGetNamedBufferParameteri64v;
        
        public static unsafe void GetNamedBufferParameteri64v(uint buffer, BufferPNameARB pname, ref long @params)
        {
            _glGetNamedBufferParameteri64v(buffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, BufferPNameARB, IntPtr, void> _glGetNamedBufferParameteriv;
        
        public static unsafe void GetNamedBufferParameteriv(uint buffer, BufferPNameARB pname, ref int @params)
        {
            _glGetNamedBufferParameteriv(buffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, BufferPointerNameARB, IntPtr, void> _glGetNamedBufferPointerv;
        
        public static unsafe void GetNamedBufferPointerv(uint buffer, BufferPointerNameARB pname, out IntPtr @params)
        {
            _glGetNamedBufferPointerv(buffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, long, long, IntPtr, void> _glGetNamedBufferSubData;
        
        public static unsafe void GetNamedBufferSubData(uint buffer, long offset, long size, IntPtr data)
        {
            _glGetNamedBufferSubData(buffer, offset, size, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, FramebufferAttachmentParameterName, IntPtr, void> _glGetNamedFramebufferAttachmentParameteriv;
        
        public static unsafe void GetNamedFramebufferAttachmentParameteriv(uint framebuffer, FramebufferAttachment attachment, FramebufferAttachmentParameterName pname, ref int @params)
        {
            _glGetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, GetFramebufferParameter, IntPtr, void> _glGetNamedFramebufferParameteriv;
        
        public static unsafe void GetNamedFramebufferParameteriv(uint framebuffer, GetFramebufferParameter pname, ref int param)
        {
            _glGetNamedFramebufferParameteriv(framebuffer, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, RenderbufferParameterName, IntPtr, void> _glGetNamedRenderbufferParameteriv;
        
        public static unsafe void GetNamedRenderbufferParameteriv(uint renderbuffer, RenderbufferParameterName pname, ref int @params)
        {
            _glGetNamedRenderbufferParameteriv(renderbuffer, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ObjectIdentifier, uint, int, IntPtr, IntPtr, void> _glGetObjectLabel;
        
        public static unsafe void GetObjectLabel(ObjectIdentifier identifier, uint name, int bufSize, ref int length, ref sbyte label)
        {
            _glGetObjectLabel(identifier, name, bufSize, (IntPtr)length, (IntPtr)label);
        }
        
        public static unsafe delegate*<IntPtr, int, IntPtr, IntPtr, void> _glGetObjectPtrLabel;
        
        public static unsafe void GetObjectPtrLabel(IntPtr ptr, int bufSize, ref int length, ref sbyte label)
        {
            _glGetObjectPtrLabel((IntPtr)ptr, bufSize, (IntPtr)length, (IntPtr)label);
        }
        
        public static unsafe delegate*<PixelMap, IntPtr, void> _glGetPixelMapfv;
        
        public static unsafe void GetPixelMapfv(PixelMap map, ref float values)
        {
            _glGetPixelMapfv(map, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, IntPtr, void> _glGetPixelMapuiv;
        
        public static unsafe void GetPixelMapuiv(PixelMap map, ref uint values)
        {
            _glGetPixelMapuiv(map, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, IntPtr, void> _glGetPixelMapusv;
        
        public static unsafe void GetPixelMapusv(PixelMap map, ref ushort values)
        {
            _glGetPixelMapusv(map, (IntPtr)values);
        }
        
        public static unsafe delegate*<GetPointervPName, IntPtr, void> _glGetPointerv;
        
        public static unsafe void GetPointerv(GetPointervPName pname, out IntPtr @params)
        {
            _glGetPointerv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<IntPtr, void> _glGetPolygonStipple;
        
        public static unsafe void GetPolygonStipple(ref byte mask)
        {
            _glGetPolygonStipple((IntPtr)mask);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, IntPtr, void> _glGetProgramBinary;
        
        public static unsafe void GetProgramBinary(uint program, int bufSize, ref int length, ref uint binaryFormat, IntPtr binary)
        {
            _glGetProgramBinary(program, bufSize, (IntPtr)length, (IntPtr)binaryFormat, (IntPtr)binary);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetProgramInfoLog;
        
        public static unsafe void GetProgramInfoLog(uint program, int bufSize, ref int length, ref sbyte infoLog)
        {
            _glGetProgramInfoLog(program, bufSize, (IntPtr)length, (IntPtr)infoLog);
        }
        
        public static unsafe delegate*<uint, ProgramInterface, ProgramInterfacePName, IntPtr, void> _glGetProgramInterfaceiv;
        
        public static unsafe void GetProgramInterfaceiv(uint program, ProgramInterface programInterface, ProgramInterfacePName pname, ref int @params)
        {
            _glGetProgramInterfaceiv(program, programInterface, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetProgramPipelineInfoLog;
        
        public static unsafe void GetProgramPipelineInfoLog(uint pipeline, int bufSize, ref int length, ref sbyte infoLog)
        {
            _glGetProgramPipelineInfoLog(pipeline, bufSize, (IntPtr)length, (IntPtr)infoLog);
        }
        
        public static unsafe delegate*<uint, PipelineParameterName, IntPtr, void> _glGetProgramPipelineiv;
        
        public static unsafe void GetProgramPipelineiv(uint pipeline, PipelineParameterName pname, ref int @params)
        {
            _glGetProgramPipelineiv(pipeline, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ProgramInterface, IntPtr, uint> _glGetProgramResourceIndex;
        
        public static unsafe uint GetProgramResourceIndex(uint program, ProgramInterface programInterface, ref sbyte name)
        {
            return _glGetProgramResourceIndex(program, programInterface, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ProgramInterface, IntPtr, int> _glGetProgramResourceLocation;
        
        public static unsafe int GetProgramResourceLocation(uint program, ProgramInterface programInterface, ref sbyte name)
        {
            return _glGetProgramResourceLocation(program, programInterface, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ProgramInterface, IntPtr, int> _glGetProgramResourceLocationIndex;
        
        public static unsafe int GetProgramResourceLocationIndex(uint program, ProgramInterface programInterface, ref sbyte name)
        {
            return _glGetProgramResourceLocationIndex(program, programInterface, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ProgramInterface, uint, int, IntPtr, IntPtr, void> _glGetProgramResourceName;
        
        public static unsafe void GetProgramResourceName(uint program, ProgramInterface programInterface, uint index, int bufSize, ref int length, ref sbyte name)
        {
            _glGetProgramResourceName(program, programInterface, index, bufSize, (IntPtr)length, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ProgramInterface, uint, int, IntPtr, int, IntPtr, IntPtr, void> _glGetProgramResourceiv;
        
        public static unsafe void GetProgramResourceiv(uint program, ProgramInterface programInterface, uint index, int propCount, ref ProgramResourceProperty props, int count, ref int length, ref int @params)
        {
            _glGetProgramResourceiv(program, programInterface, index, propCount, (IntPtr)props, count, (IntPtr)length, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, ShaderType, ProgramStagePName, IntPtr, void> _glGetProgramStageiv;
        
        public static unsafe void GetProgramStageiv(uint program, ShaderType shadertype, ProgramStagePName pname, ref int values)
        {
            _glGetProgramStageiv(program, shadertype, pname, (IntPtr)values);
        }
        
        public static unsafe delegate*<uint, ProgramPropertyARB, IntPtr, void> _glGetProgramiv;
        
        public static unsafe void GetProgramiv(uint program, ProgramPropertyARB pname, ref int @params)
        {
            _glGetProgramiv(program, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, QueryObjectParameterName, long, void> _glGetQueryBufferObjecti64v;
        
        public static unsafe void GetQueryBufferObjecti64v(uint id, uint buffer, QueryObjectParameterName pname, long offset)
        {
            _glGetQueryBufferObjecti64v(id, buffer, pname, offset);
        }
        
        public static unsafe delegate*<uint, uint, QueryObjectParameterName, long, void> _glGetQueryBufferObjectiv;
        
        public static unsafe void GetQueryBufferObjectiv(uint id, uint buffer, QueryObjectParameterName pname, long offset)
        {
            _glGetQueryBufferObjectiv(id, buffer, pname, offset);
        }
        
        public static unsafe delegate*<uint, uint, QueryObjectParameterName, long, void> _glGetQueryBufferObjectui64v;
        
        public static unsafe void GetQueryBufferObjectui64v(uint id, uint buffer, QueryObjectParameterName pname, long offset)
        {
            _glGetQueryBufferObjectui64v(id, buffer, pname, offset);
        }
        
        public static unsafe delegate*<uint, uint, QueryObjectParameterName, long, void> _glGetQueryBufferObjectuiv;
        
        public static unsafe void GetQueryBufferObjectuiv(uint id, uint buffer, QueryObjectParameterName pname, long offset)
        {
            _glGetQueryBufferObjectuiv(id, buffer, pname, offset);
        }
        
        public static unsafe delegate*<QueryTarget, uint, QueryParameterName, IntPtr, void> _glGetQueryIndexediv;
        
        public static unsafe void GetQueryIndexediv(QueryTarget target, uint index, QueryParameterName pname, ref int @params)
        {
            _glGetQueryIndexediv(target, index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, QueryObjectParameterName, IntPtr, void> _glGetQueryObjecti64v;
        
        public static unsafe void GetQueryObjecti64v(uint id, QueryObjectParameterName pname, ref long @params)
        {
            _glGetQueryObjecti64v(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, QueryObjectParameterName, IntPtr, void> _glGetQueryObjectiv;
        
        public static unsafe void GetQueryObjectiv(uint id, QueryObjectParameterName pname, ref int @params)
        {
            _glGetQueryObjectiv(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, QueryObjectParameterName, IntPtr, void> _glGetQueryObjectui64v;
        
        public static unsafe void GetQueryObjectui64v(uint id, QueryObjectParameterName pname, ref ulong @params)
        {
            _glGetQueryObjectui64v(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, QueryObjectParameterName, IntPtr, void> _glGetQueryObjectuiv;
        
        public static unsafe void GetQueryObjectuiv(uint id, QueryObjectParameterName pname, ref uint @params)
        {
            _glGetQueryObjectuiv(id, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<QueryTarget, QueryParameterName, IntPtr, void> _glGetQueryiv;
        
        public static unsafe void GetQueryiv(QueryTarget target, QueryParameterName pname, ref int @params)
        {
            _glGetQueryiv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<RenderbufferTarget, RenderbufferParameterName, IntPtr, void> _glGetRenderbufferParameteriv;
        
        public static unsafe void GetRenderbufferParameteriv(RenderbufferTarget target, RenderbufferParameterName pname, ref int @params)
        {
            _glGetRenderbufferParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glGetSamplerParameterIiv;
        
        public static unsafe void GetSamplerParameterIiv(uint sampler, SamplerParameterI pname, ref int @params)
        {
            _glGetSamplerParameterIiv(sampler, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glGetSamplerParameterIuiv;
        
        public static unsafe void GetSamplerParameterIuiv(uint sampler, SamplerParameterI pname, ref uint @params)
        {
            _glGetSamplerParameterIuiv(sampler, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SamplerParameterF, IntPtr, void> _glGetSamplerParameterfv;
        
        public static unsafe void GetSamplerParameterfv(uint sampler, SamplerParameterF pname, ref float @params)
        {
            _glGetSamplerParameterfv(sampler, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glGetSamplerParameteriv;
        
        public static unsafe void GetSamplerParameteriv(uint sampler, SamplerParameterI pname, ref int @params)
        {
            _glGetSamplerParameteriv(sampler, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetShaderInfoLog;
        
        public static unsafe void GetShaderInfoLog(uint shader, int bufSize, ref int length, ref sbyte infoLog)
        {
            _glGetShaderInfoLog(shader, bufSize, (IntPtr)length, (IntPtr)infoLog);
        }
        
        public static unsafe delegate*<ShaderType, PrecisionType, IntPtr, IntPtr, void> _glGetShaderPrecisionFormat;
        
        public static unsafe void GetShaderPrecisionFormat(ShaderType shadertype, PrecisionType precisiontype, ref int range, ref int precision)
        {
            _glGetShaderPrecisionFormat(shadertype, precisiontype, (IntPtr)range, (IntPtr)precision);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetShaderSource;
        
        public static unsafe void GetShaderSource(uint shader, int bufSize, ref int length, ref sbyte source)
        {
            _glGetShaderSource(shader, bufSize, (IntPtr)length, (IntPtr)source);
        }
        
        public static unsafe delegate*<uint, ShaderParameterName, IntPtr, void> _glGetShaderiv;
        
        public static unsafe void GetShaderiv(uint shader, ShaderParameterName pname, ref int @params)
        {
            _glGetShaderiv(shader, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<StringName, byte> _glGetString;
        
        public static unsafe byte GetString(StringName name)
        {
            return _glGetString(name);
        }
        
        public static unsafe delegate*<StringName, uint, byte> _glGetStringi;
        
        public static unsafe byte GetStringi(StringName name, uint index)
        {
            return _glGetStringi(name, index);
        }
        
        public static unsafe delegate*<uint, ShaderType, IntPtr, uint> _glGetSubroutineIndex;
        
        public static unsafe uint GetSubroutineIndex(uint program, ShaderType shadertype, ref sbyte name)
        {
            return _glGetSubroutineIndex(program, shadertype, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, ShaderType, IntPtr, int> _glGetSubroutineUniformLocation;
        
        public static unsafe int GetSubroutineUniformLocation(uint program, ShaderType shadertype, ref sbyte name)
        {
            return _glGetSubroutineUniformLocation(program, shadertype, (IntPtr)name);
        }
        
        public static unsafe delegate*<IntPtr, SyncParameterName, int, IntPtr, IntPtr, void> _glGetSynciv;
        
        public static unsafe void GetSynciv(IntPtr sync, SyncParameterName pname, int count, ref int length, ref int values)
        {
            _glGetSynciv(sync, pname, count, (IntPtr)length, (IntPtr)values);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glGetTexEnvfv;
        
        public static unsafe void GetTexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, ref float @params)
        {
            _glGetTexEnvfv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glGetTexEnviv;
        
        public static unsafe void GetTexEnviv(TextureEnvTarget target, TextureEnvParameter pname, ref int @params)
        {
            _glGetTexEnviv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glGetTexGendv;
        
        public static unsafe void GetTexGendv(TextureCoordName coord, TextureGenParameter pname, ref double @params)
        {
            _glGetTexGendv(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glGetTexGenfv;
        
        public static unsafe void GetTexGenfv(TextureCoordName coord, TextureGenParameter pname, ref float @params)
        {
            _glGetTexGenfv(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glGetTexGeniv;
        
        public static unsafe void GetTexGeniv(TextureCoordName coord, TextureGenParameter pname, ref int @params)
        {
            _glGetTexGeniv(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, int, PixelFormat, PixelType, IntPtr, void> _glGetTexImage;
        
        public static unsafe void GetTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glGetTexImage(target, level, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, GetTextureParameter, IntPtr, void> _glGetTexLevelParameterfv;
        
        public static unsafe void GetTexLevelParameterfv(TextureTarget target, int level, GetTextureParameter pname, ref float @params)
        {
            _glGetTexLevelParameterfv(target, level, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, int, GetTextureParameter, IntPtr, void> _glGetTexLevelParameteriv;
        
        public static unsafe void GetTexLevelParameteriv(TextureTarget target, int level, GetTextureParameter pname, ref int @params)
        {
            _glGetTexLevelParameteriv(target, level, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glGetTexParameterIiv;
        
        public static unsafe void GetTexParameterIiv(TextureTarget target, GetTextureParameter pname, ref int @params)
        {
            _glGetTexParameterIiv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glGetTexParameterIuiv;
        
        public static unsafe void GetTexParameterIuiv(TextureTarget target, GetTextureParameter pname, ref uint @params)
        {
            _glGetTexParameterIuiv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glGetTexParameterfv;
        
        public static unsafe void GetTexParameterfv(TextureTarget target, GetTextureParameter pname, ref float @params)
        {
            _glGetTexParameterfv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, GetTextureParameter, IntPtr, void> _glGetTexParameteriv;
        
        public static unsafe void GetTexParameteriv(TextureTarget target, GetTextureParameter pname, ref int @params)
        {
            _glGetTexParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, PixelFormat, PixelType, int, IntPtr, void> _glGetTextureImage;
        
        public static unsafe void GetTextureImage(uint texture, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            _glGetTextureImage(texture, level, format, type, bufSize, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, int, GetTextureParameter, IntPtr, void> _glGetTextureLevelParameterfv;
        
        public static unsafe void GetTextureLevelParameterfv(uint texture, int level, GetTextureParameter pname, ref float @params)
        {
            _glGetTextureLevelParameterfv(texture, level, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, GetTextureParameter, IntPtr, void> _glGetTextureLevelParameteriv;
        
        public static unsafe void GetTextureLevelParameteriv(uint texture, int level, GetTextureParameter pname, ref int @params)
        {
            _glGetTextureLevelParameteriv(texture, level, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, GetTextureParameter, IntPtr, void> _glGetTextureParameterIiv;
        
        public static unsafe void GetTextureParameterIiv(uint texture, GetTextureParameter pname, ref int @params)
        {
            _glGetTextureParameterIiv(texture, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, GetTextureParameter, IntPtr, void> _glGetTextureParameterIuiv;
        
        public static unsafe void GetTextureParameterIuiv(uint texture, GetTextureParameter pname, ref uint @params)
        {
            _glGetTextureParameterIuiv(texture, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, GetTextureParameter, IntPtr, void> _glGetTextureParameterfv;
        
        public static unsafe void GetTextureParameterfv(uint texture, GetTextureParameter pname, ref float @params)
        {
            _glGetTextureParameterfv(texture, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, GetTextureParameter, IntPtr, void> _glGetTextureParameteriv;
        
        public static unsafe void GetTextureParameteriv(uint texture, GetTextureParameter pname, ref int @params)
        {
            _glGetTextureParameteriv(texture, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, PixelFormat, PixelType, int, IntPtr, void> _glGetTextureSubImage;
        
        public static unsafe void GetTextureSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            _glGetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, IntPtr, IntPtr, void> _glGetTransformFeedbackVarying;
        
        public static unsafe void GetTransformFeedbackVarying(uint program, uint index, int bufSize, ref int length, ref int size, ref AttributeType type, ref sbyte name)
        {
            _glGetTransformFeedbackVarying(program, index, bufSize, (IntPtr)length, (IntPtr)size, (IntPtr)type, (IntPtr)name);
        }
        
        public static unsafe delegate*<uint, TransformFeedbackPName, uint, IntPtr, void> _glGetTransformFeedbacki64_v;
        
        public static unsafe void GetTransformFeedbacki64_v(uint xfb, TransformFeedbackPName pname, uint index, ref long param)
        {
            _glGetTransformFeedbacki64_v(xfb, pname, index, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, TransformFeedbackPName, uint, IntPtr, void> _glGetTransformFeedbacki_v;
        
        public static unsafe void GetTransformFeedbacki_v(uint xfb, TransformFeedbackPName pname, uint index, ref int param)
        {
            _glGetTransformFeedbacki_v(xfb, pname, index, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, TransformFeedbackPName, IntPtr, void> _glGetTransformFeedbackiv;
        
        public static unsafe void GetTransformFeedbackiv(uint xfb, TransformFeedbackPName pname, ref int param)
        {
            _glGetTransformFeedbackiv(xfb, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, IntPtr, uint> _glGetUniformBlockIndex;
        
        public static unsafe uint GetUniformBlockIndex(uint program, ref sbyte uniformBlockName)
        {
            return _glGetUniformBlockIndex(program, (IntPtr)uniformBlockName);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glGetUniformIndices;
        
        public static unsafe void GetUniformIndices(uint program, int uniformCount, out IntPtr uniformNames, ref uint uniformIndices)
        {
            _glGetUniformIndices(program, uniformCount, (IntPtr)uniformNames, (IntPtr)uniformIndices);
        }
        
        public static unsafe delegate*<uint, IntPtr, int> _glGetUniformLocation;
        
        public static unsafe int GetUniformLocation(uint program, ref sbyte name)
        {
            return _glGetUniformLocation(program, (IntPtr)name);
        }
        
        public static unsafe delegate*<ShaderType, int, IntPtr, void> _glGetUniformSubroutineuiv;
        
        public static unsafe void GetUniformSubroutineuiv(ShaderType shadertype, int location, ref uint @params)
        {
            _glGetUniformSubroutineuiv(shadertype, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformdv;
        
        public static unsafe void GetUniformdv(uint program, int location, ref double @params)
        {
            _glGetUniformdv(program, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformfv;
        
        public static unsafe void GetUniformfv(uint program, int location, ref float @params)
        {
            _glGetUniformfv(program, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformiv;
        
        public static unsafe void GetUniformiv(uint program, int location, ref int @params)
        {
            _glGetUniformiv(program, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glGetUniformuiv;
        
        public static unsafe void GetUniformuiv(uint program, int location, ref uint @params)
        {
            _glGetUniformuiv(program, location, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, uint, VertexArrayPName, IntPtr, void> _glGetVertexArrayIndexed64iv;
        
        public static unsafe void GetVertexArrayIndexed64iv(uint vaobj, uint index, VertexArrayPName pname, ref long param)
        {
            _glGetVertexArrayIndexed64iv(vaobj, index, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, uint, VertexArrayPName, IntPtr, void> _glGetVertexArrayIndexediv;
        
        public static unsafe void GetVertexArrayIndexediv(uint vaobj, uint index, VertexArrayPName pname, ref int param)
        {
            _glGetVertexArrayIndexediv(vaobj, index, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, VertexArrayPName, IntPtr, void> _glGetVertexArrayiv;
        
        public static unsafe void GetVertexArrayiv(uint vaobj, VertexArrayPName pname, ref int param)
        {
            _glGetVertexArrayiv(vaobj, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnum, IntPtr, void> _glGetVertexAttribIiv;
        
        public static unsafe void GetVertexAttribIiv(uint index, VertexAttribEnum pname, ref int @params)
        {
            _glGetVertexAttribIiv(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnum, IntPtr, void> _glGetVertexAttribIuiv;
        
        public static unsafe void GetVertexAttribIuiv(uint index, VertexAttribEnum pname, ref uint @params)
        {
            _glGetVertexAttribIuiv(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribEnum, IntPtr, void> _glGetVertexAttribLdv;
        
        public static unsafe void GetVertexAttribLdv(uint index, VertexAttribEnum pname, ref double @params)
        {
            _glGetVertexAttribLdv(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerPropertyARB, IntPtr, void> _glGetVertexAttribPointerv;
        
        public static unsafe void GetVertexAttribPointerv(uint index, VertexAttribPointerPropertyARB pname, out IntPtr pointer)
        {
            _glGetVertexAttribPointerv(index, pname, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, VertexAttribPropertyARB, IntPtr, void> _glGetVertexAttribdv;
        
        public static unsafe void GetVertexAttribdv(uint index, VertexAttribPropertyARB pname, ref double @params)
        {
            _glGetVertexAttribdv(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribPropertyARB, IntPtr, void> _glGetVertexAttribfv;
        
        public static unsafe void GetVertexAttribfv(uint index, VertexAttribPropertyARB pname, ref float @params)
        {
            _glGetVertexAttribfv(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, VertexAttribPropertyARB, IntPtr, void> _glGetVertexAttribiv;
        
        public static unsafe void GetVertexAttribiv(uint index, VertexAttribPropertyARB pname, ref int @params)
        {
            _glGetVertexAttribiv(index, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<ColorTableTarget, PixelFormat, PixelType, int, IntPtr, void> _glGetnColorTable;
        
        public static unsafe void GetnColorTable(ColorTableTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr table)
        {
            _glGetnColorTable(target, format, type, bufSize, (IntPtr)table);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, IntPtr, void> _glGetnCompressedTexImage;
        
        public static unsafe void GetnCompressedTexImage(TextureTarget target, int lod, int bufSize, IntPtr pixels)
        {
            _glGetnCompressedTexImage(target, lod, bufSize, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<ConvolutionTarget, PixelFormat, PixelType, int, IntPtr, void> _glGetnConvolutionFilter;
        
        public static unsafe void GetnConvolutionFilter(ConvolutionTarget target, PixelFormat format, PixelType type, int bufSize, IntPtr image)
        {
            _glGetnConvolutionFilter(target, format, type, bufSize, (IntPtr)image);
        }
        
        public static unsafe delegate*<HistogramTarget, byte, PixelFormat, PixelType, int, IntPtr, void> _glGetnHistogram;
        
        public static unsafe void GetnHistogram(HistogramTarget target, byte reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
        {
            _glGetnHistogram(target, reset, format, type, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<MapTarget, MapQuery, int, IntPtr, void> _glGetnMapdv;
        
        public static unsafe void GetnMapdv(MapTarget target, MapQuery query, int bufSize, ref double v)
        {
            _glGetnMapdv(target, query, bufSize, (IntPtr)v);
        }
        
        public static unsafe delegate*<MapTarget, MapQuery, int, IntPtr, void> _glGetnMapfv;
        
        public static unsafe void GetnMapfv(MapTarget target, MapQuery query, int bufSize, ref float v)
        {
            _glGetnMapfv(target, query, bufSize, (IntPtr)v);
        }
        
        public static unsafe delegate*<MapTarget, MapQuery, int, IntPtr, void> _glGetnMapiv;
        
        public static unsafe void GetnMapiv(MapTarget target, MapQuery query, int bufSize, ref int v)
        {
            _glGetnMapiv(target, query, bufSize, (IntPtr)v);
        }
        
        public static unsafe delegate*<MinmaxTarget, byte, PixelFormat, PixelType, int, IntPtr, void> _glGetnMinmax;
        
        public static unsafe void GetnMinmax(MinmaxTarget target, byte reset, PixelFormat format, PixelType type, int bufSize, IntPtr values)
        {
            _glGetnMinmax(target, reset, format, type, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glGetnPixelMapfv;
        
        public static unsafe void GetnPixelMapfv(PixelMap map, int bufSize, ref float values)
        {
            _glGetnPixelMapfv(map, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glGetnPixelMapuiv;
        
        public static unsafe void GetnPixelMapuiv(PixelMap map, int bufSize, ref uint values)
        {
            _glGetnPixelMapuiv(map, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glGetnPixelMapusv;
        
        public static unsafe void GetnPixelMapusv(PixelMap map, int bufSize, ref ushort values)
        {
            _glGetnPixelMapusv(map, bufSize, (IntPtr)values);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glGetnPolygonStipple;
        
        public static unsafe void GetnPolygonStipple(int bufSize, ref byte pattern)
        {
            _glGetnPolygonStipple(bufSize, (IntPtr)pattern);
        }
        
        public static unsafe delegate*<SeparableTarget, PixelFormat, PixelType, int, IntPtr, int, IntPtr, IntPtr, void> _glGetnSeparableFilter;
        
        public static unsafe void GetnSeparableFilter(SeparableTarget target, PixelFormat format, PixelType type, int rowBufSize, IntPtr row, int columnBufSize, IntPtr column, IntPtr span)
        {
            _glGetnSeparableFilter(target, format, type, rowBufSize, (IntPtr)row, columnBufSize, (IntPtr)column, (IntPtr)span);
        }
        
        public static unsafe delegate*<TextureTarget, int, PixelFormat, PixelType, int, IntPtr, void> _glGetnTexImage;
        
        public static unsafe void GetnTexImage(TextureTarget target, int level, PixelFormat format, PixelType type, int bufSize, IntPtr pixels)
        {
            _glGetnTexImage(target, level, format, type, bufSize, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformdv;
        
        public static unsafe void GetnUniformdv(uint program, int location, int bufSize, ref double @params)
        {
            _glGetnUniformdv(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformfv;
        
        public static unsafe void GetnUniformfv(uint program, int location, int bufSize, ref float @params)
        {
            _glGetnUniformfv(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformiv;
        
        public static unsafe void GetnUniformiv(uint program, int location, int bufSize, ref int @params)
        {
            _glGetnUniformiv(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glGetnUniformuiv;
        
        public static unsafe void GetnUniformuiv(uint program, int location, int bufSize, ref uint @params)
        {
            _glGetnUniformuiv(program, location, bufSize, (IntPtr)@params);
        }
        
        public static unsafe delegate*<HintTarget, HintMode, void> _glHint;
        
        public static unsafe void Hint(HintTarget target, HintMode mode)
        {
            _glHint(target, mode);
        }
        
        public static unsafe delegate*<uint, void> _glIndexMask;
        
        public static unsafe void IndexMask(uint mask)
        {
            _glIndexMask(mask);
        }
        
        public static unsafe delegate*<IndexPointerType, int, IntPtr, void> _glIndexPointer;
        
        public static unsafe void IndexPointer(IndexPointerType type, int stride, IntPtr pointer)
        {
            _glIndexPointer(type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<double, void> _glIndexd;
        
        public static unsafe void Indexd(double c)
        {
            _glIndexd(c);
        }
        
        public static unsafe delegate*<IntPtr, void> _glIndexdv;
        
        public static unsafe void Indexdv(ref double c)
        {
            _glIndexdv((IntPtr)c);
        }
        
        public static unsafe delegate*<float, void> _glIndexf;
        
        public static unsafe void Indexf(float c)
        {
            _glIndexf(c);
        }
        
        public static unsafe delegate*<IntPtr, void> _glIndexfv;
        
        public static unsafe void Indexfv(ref float c)
        {
            _glIndexfv((IntPtr)c);
        }
        
        public static unsafe delegate*<int, void> _glIndexi;
        
        public static unsafe void Indexi(int c)
        {
            _glIndexi(c);
        }
        
        public static unsafe delegate*<IntPtr, void> _glIndexiv;
        
        public static unsafe void Indexiv(ref int c)
        {
            _glIndexiv((IntPtr)c);
        }
        
        public static unsafe delegate*<short, void> _glIndexs;
        
        public static unsafe void Indexs(short c)
        {
            _glIndexs(c);
        }
        
        public static unsafe delegate*<IntPtr, void> _glIndexsv;
        
        public static unsafe void Indexsv(ref short c)
        {
            _glIndexsv((IntPtr)c);
        }
        
        public static unsafe delegate*<byte, void> _glIndexub;
        
        public static unsafe void Indexub(byte c)
        {
            _glIndexub(c);
        }
        
        public static unsafe delegate*<IntPtr, void> _glIndexubv;
        
        public static unsafe void Indexubv(ref byte c)
        {
            _glIndexubv((IntPtr)c);
        }
        
        public static unsafe delegate*<void> _glInitNames;
        
        public static unsafe void InitNames()
        {
            _glInitNames();
        }
        
        public static unsafe delegate*<InterleavedArrayFormat, int, IntPtr, void> _glInterleavedArrays;
        
        public static unsafe void InterleavedArrays(InterleavedArrayFormat format, int stride, IntPtr pointer)
        {
            _glInterleavedArrays(format, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, void> _glInvalidateBufferData;
        
        public static unsafe void InvalidateBufferData(uint buffer)
        {
            _glInvalidateBufferData(buffer);
        }
        
        public static unsafe delegate*<uint, long, long, void> _glInvalidateBufferSubData;
        
        public static unsafe void InvalidateBufferSubData(uint buffer, long offset, long length)
        {
            _glInvalidateBufferSubData(buffer, offset, length);
        }
        
        public static unsafe delegate*<FramebufferTarget, int, IntPtr, void> _glInvalidateFramebuffer;
        
        public static unsafe void InvalidateFramebuffer(FramebufferTarget target, int numAttachments, ref InvalidateFramebufferAttachment attachments)
        {
            _glInvalidateFramebuffer(target, numAttachments, (IntPtr)attachments);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glInvalidateNamedFramebufferData;
        
        public static unsafe void InvalidateNamedFramebufferData(uint framebuffer, int numAttachments, ref FramebufferAttachment attachments)
        {
            _glInvalidateNamedFramebufferData(framebuffer, numAttachments, (IntPtr)attachments);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, int, int, int, int, void> _glInvalidateNamedFramebufferSubData;
        
        public static unsafe void InvalidateNamedFramebufferSubData(uint framebuffer, int numAttachments, ref FramebufferAttachment attachments, int x, int y, int width, int height)
        {
            _glInvalidateNamedFramebufferSubData(framebuffer, numAttachments, (IntPtr)attachments, x, y, width, height);
        }
        
        public static unsafe delegate*<FramebufferTarget, int, IntPtr, int, int, int, int, void> _glInvalidateSubFramebuffer;
        
        public static unsafe void InvalidateSubFramebuffer(FramebufferTarget target, int numAttachments, ref InvalidateFramebufferAttachment attachments, int x, int y, int width, int height)
        {
            _glInvalidateSubFramebuffer(target, numAttachments, (IntPtr)attachments, x, y, width, height);
        }
        
        public static unsafe delegate*<uint, int, void> _glInvalidateTexImage;
        
        public static unsafe void InvalidateTexImage(uint texture, int level)
        {
            _glInvalidateTexImage(texture, level);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, void> _glInvalidateTexSubImage;
        
        public static unsafe void InvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
        {
            _glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
        }
        
        public static unsafe delegate*<uint, byte> _glIsBuffer;
        
        public static unsafe byte IsBuffer(uint buffer)
        {
            return _glIsBuffer(buffer);
        }
        
        public static unsafe delegate*<EnableCap, byte> _glIsEnabled;
        
        public static unsafe byte IsEnabled(EnableCap cap)
        {
            return _glIsEnabled(cap);
        }
        
        public static unsafe delegate*<EnableCap, uint, byte> _glIsEnabledi;
        
        public static unsafe byte IsEnabledi(EnableCap target, uint index)
        {
            return _glIsEnabledi(target, index);
        }
        
        public static unsafe delegate*<uint, byte> _glIsFramebuffer;
        
        public static unsafe byte IsFramebuffer(uint framebuffer)
        {
            return _glIsFramebuffer(framebuffer);
        }
        
        public static unsafe delegate*<uint, byte> _glIsList;
        
        public static unsafe byte IsList(uint list)
        {
            return _glIsList(list);
        }
        
        public static unsafe delegate*<uint, byte> _glIsProgram;
        
        public static unsafe byte IsProgram(uint program)
        {
            return _glIsProgram(program);
        }
        
        public static unsafe delegate*<uint, byte> _glIsProgramPipeline;
        
        public static unsafe byte IsProgramPipeline(uint pipeline)
        {
            return _glIsProgramPipeline(pipeline);
        }
        
        public static unsafe delegate*<uint, byte> _glIsQuery;
        
        public static unsafe byte IsQuery(uint id)
        {
            return _glIsQuery(id);
        }
        
        public static unsafe delegate*<uint, byte> _glIsRenderbuffer;
        
        public static unsafe byte IsRenderbuffer(uint renderbuffer)
        {
            return _glIsRenderbuffer(renderbuffer);
        }
        
        public static unsafe delegate*<uint, byte> _glIsSampler;
        
        public static unsafe byte IsSampler(uint sampler)
        {
            return _glIsSampler(sampler);
        }
        
        public static unsafe delegate*<uint, byte> _glIsShader;
        
        public static unsafe byte IsShader(uint shader)
        {
            return _glIsShader(shader);
        }
        
        public static unsafe delegate*<IntPtr, byte> _glIsSync;
        
        public static unsafe byte IsSync(IntPtr sync)
        {
            return _glIsSync(sync);
        }
        
        public static unsafe delegate*<uint, byte> _glIsTexture;
        
        public static unsafe byte IsTexture(uint texture)
        {
            return _glIsTexture(texture);
        }
        
        public static unsafe delegate*<uint, byte> _glIsTransformFeedback;
        
        public static unsafe byte IsTransformFeedback(uint id)
        {
            return _glIsTransformFeedback(id);
        }
        
        public static unsafe delegate*<uint, byte> _glIsVertexArray;
        
        public static unsafe byte IsVertexArray(uint array)
        {
            return _glIsVertexArray(array);
        }
        
        public static unsafe delegate*<LightModelParameter, float, void> _glLightModelf;
        
        public static unsafe void LightModelf(LightModelParameter pname, float param)
        {
            _glLightModelf(pname, param);
        }
        
        public static unsafe delegate*<LightModelParameter, IntPtr, void> _glLightModelfv;
        
        public static unsafe void LightModelfv(LightModelParameter pname, ref float @params)
        {
            _glLightModelfv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<LightModelParameter, int, void> _glLightModeli;
        
        public static unsafe void LightModeli(LightModelParameter pname, int param)
        {
            _glLightModeli(pname, param);
        }
        
        public static unsafe delegate*<LightModelParameter, IntPtr, void> _glLightModeliv;
        
        public static unsafe void LightModeliv(LightModelParameter pname, ref int @params)
        {
            _glLightModeliv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<LightName, LightParameter, float, void> _glLightf;
        
        public static unsafe void Lightf(LightName light, LightParameter pname, float param)
        {
            _glLightf(light, pname, param);
        }
        
        public static unsafe delegate*<LightName, LightParameter, IntPtr, void> _glLightfv;
        
        public static unsafe void Lightfv(LightName light, LightParameter pname, ref float @params)
        {
            _glLightfv(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<LightName, LightParameter, int, void> _glLighti;
        
        public static unsafe void Lighti(LightName light, LightParameter pname, int param)
        {
            _glLighti(light, pname, param);
        }
        
        public static unsafe delegate*<LightName, LightParameter, IntPtr, void> _glLightiv;
        
        public static unsafe void Lightiv(LightName light, LightParameter pname, ref int @params)
        {
            _glLightiv(light, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<int, ushort, void> _glLineStipple;
        
        public static unsafe void LineStipple(int factor, ushort pattern)
        {
            _glLineStipple(factor, pattern);
        }
        
        public static unsafe delegate*<float, void> _glLineWidth;
        
        public static unsafe void LineWidth(float width)
        {
            _glLineWidth(width);
        }
        
        public static unsafe delegate*<uint, void> _glLinkProgram;
        
        public static unsafe void LinkProgram(uint program)
        {
            _glLinkProgram(program);
        }
        
        public static unsafe delegate*<uint, void> _glListBase;
        
        public static unsafe void ListBase(uint @base)
        {
            _glListBase(@base);
        }
        
        public static unsafe delegate*<void> _glLoadIdentity;
        
        public static unsafe void LoadIdentity()
        {
            _glLoadIdentity();
        }
        
        public static unsafe delegate*<IntPtr, void> _glLoadMatrixd;
        
        public static unsafe void LoadMatrixd(ref double m)
        {
            _glLoadMatrixd((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glLoadMatrixf;
        
        public static unsafe void LoadMatrixf(ref float m)
        {
            _glLoadMatrixf((IntPtr)m);
        }
        
        public static unsafe delegate*<uint, void> _glLoadName;
        
        public static unsafe void LoadName(uint name)
        {
            _glLoadName(name);
        }
        
        public static unsafe delegate*<IntPtr, void> _glLoadTransposeMatrixd;
        
        public static unsafe void LoadTransposeMatrixd(ref double m)
        {
            _glLoadTransposeMatrixd((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glLoadTransposeMatrixf;
        
        public static unsafe void LoadTransposeMatrixf(ref float m)
        {
            _glLoadTransposeMatrixf((IntPtr)m);
        }
        
        public static unsafe delegate*<LogicOp, void> _glLogicOp;
        
        public static unsafe void LogicOp(LogicOp opcode)
        {
            _glLogicOp(opcode);
        }
        
        public static unsafe delegate*<MapTarget, double, double, int, int, IntPtr, void> _glMap1d;
        
        public static unsafe void Map1d(MapTarget target, double u1, double u2, int stride, int order, ref double points)
        {
            _glMap1d(target, u1, u2, stride, order, (IntPtr)points);
        }
        
        public static unsafe delegate*<MapTarget, float, float, int, int, IntPtr, void> _glMap1f;
        
        public static unsafe void Map1f(MapTarget target, float u1, float u2, int stride, int order, ref float points)
        {
            _glMap1f(target, u1, u2, stride, order, (IntPtr)points);
        }
        
        public static unsafe delegate*<MapTarget, double, double, int, int, double, double, int, int, IntPtr, void> _glMap2d;
        
        public static unsafe void Map2d(MapTarget target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points)
        {
            _glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, (IntPtr)points);
        }
        
        public static unsafe delegate*<MapTarget, float, float, int, int, float, float, int, int, IntPtr, void> _glMap2f;
        
        public static unsafe void Map2f(MapTarget target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points)
        {
            _glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, (IntPtr)points);
        }
        
        public static unsafe delegate*<BufferTargetARB, BufferAccessARB, void> _glMapBuffer;
        
        public static unsafe void MapBuffer(BufferTargetARB target, BufferAccessARB access)
        {
            _glMapBuffer(target, access);
        }
        
        public static unsafe delegate*<BufferTargetARB, long, long, uint, void> _glMapBufferRange;
        
        public static unsafe void MapBufferRange(BufferTargetARB target, long offset, long length, uint access)
        {
            _glMapBufferRange(target, offset, length, access);
        }
        
        public static unsafe delegate*<int, double, double, void> _glMapGrid1d;
        
        public static unsafe void MapGrid1d(int un, double u1, double u2)
        {
            _glMapGrid1d(un, u1, u2);
        }
        
        public static unsafe delegate*<int, float, float, void> _glMapGrid1f;
        
        public static unsafe void MapGrid1f(int un, float u1, float u2)
        {
            _glMapGrid1f(un, u1, u2);
        }
        
        public static unsafe delegate*<int, double, double, int, double, double, void> _glMapGrid2d;
        
        public static unsafe void MapGrid2d(int un, double u1, double u2, int vn, double v1, double v2)
        {
            _glMapGrid2d(un, u1, u2, vn, v1, v2);
        }
        
        public static unsafe delegate*<int, float, float, int, float, float, void> _glMapGrid2f;
        
        public static unsafe void MapGrid2f(int un, float u1, float u2, int vn, float v1, float v2)
        {
            _glMapGrid2f(un, u1, u2, vn, v1, v2);
        }
        
        public static unsafe delegate*<uint, BufferAccessARB, void> _glMapNamedBuffer;
        
        public static unsafe void MapNamedBuffer(uint buffer, BufferAccessARB access)
        {
            _glMapNamedBuffer(buffer, access);
        }
        
        public static unsafe delegate*<uint, long, long, uint, void> _glMapNamedBufferRange;
        
        public static unsafe void MapNamedBufferRange(uint buffer, long offset, long length, uint access)
        {
            _glMapNamedBufferRange(buffer, offset, length, access);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, float, void> _glMaterialf;
        
        public static unsafe void Materialf(MaterialFace face, MaterialParameter pname, float param)
        {
            _glMaterialf(face, pname, param);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glMaterialfv;
        
        public static unsafe void Materialfv(MaterialFace face, MaterialParameter pname, ref float @params)
        {
            _glMaterialfv(face, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, int, void> _glMateriali;
        
        public static unsafe void Materiali(MaterialFace face, MaterialParameter pname, int param)
        {
            _glMateriali(face, pname, param);
        }
        
        public static unsafe delegate*<MaterialFace, MaterialParameter, IntPtr, void> _glMaterialiv;
        
        public static unsafe void Materialiv(MaterialFace face, MaterialParameter pname, ref int @params)
        {
            _glMaterialiv(face, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<MatrixMode, void> _glMatrixMode;
        
        public static unsafe void MatrixMode(MatrixMode mode)
        {
            _glMatrixMode(mode);
        }
        
        public static unsafe delegate*<uint, void> _glMemoryBarrier;
        
        public static unsafe void MemoryBarrier(uint barriers)
        {
            _glMemoryBarrier(barriers);
        }
        
        public static unsafe delegate*<uint, void> _glMemoryBarrierByRegion;
        
        public static unsafe void MemoryBarrierByRegion(uint barriers)
        {
            _glMemoryBarrierByRegion(barriers);
        }
        
        public static unsafe delegate*<float, void> _glMinSampleShading;
        
        public static unsafe void MinSampleShading(float value)
        {
            _glMinSampleShading(value);
        }
        
        public static unsafe delegate*<IntPtr, void> _glMultMatrixd;
        
        public static unsafe void MultMatrixd(ref double m)
        {
            _glMultMatrixd((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glMultMatrixf;
        
        public static unsafe void MultMatrixf(ref float m)
        {
            _glMultMatrixf((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glMultTransposeMatrixd;
        
        public static unsafe void MultTransposeMatrixd(ref double m)
        {
            _glMultTransposeMatrixd((IntPtr)m);
        }
        
        public static unsafe delegate*<IntPtr, void> _glMultTransposeMatrixf;
        
        public static unsafe void MultTransposeMatrixf(ref float m)
        {
            _glMultTransposeMatrixf((IntPtr)m);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, IntPtr, int, void> _glMultiDrawArrays;
        
        public static unsafe void MultiDrawArrays(PrimitiveType mode, ref int first, ref int count, int drawcount)
        {
            _glMultiDrawArrays(mode, (IntPtr)first, (IntPtr)count, drawcount);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, int, int, void> _glMultiDrawArraysIndirect;
        
        public static unsafe void MultiDrawArraysIndirect(PrimitiveType mode, IntPtr indirect, int drawcount, int stride)
        {
            _glMultiDrawArraysIndirect(mode, (IntPtr)indirect, drawcount, stride);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, long, int, int, void> _glMultiDrawArraysIndirectCount;
        
        public static unsafe void MultiDrawArraysIndirectCount(PrimitiveType mode, IntPtr indirect, long drawcount, int maxdrawcount, int stride)
        {
            _glMultiDrawArraysIndirectCount(mode, (IntPtr)indirect, drawcount, maxdrawcount, stride);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, DrawElementsType, IntPtr, int, void> _glMultiDrawElements;
        
        public static unsafe void MultiDrawElements(PrimitiveType mode, ref int count, DrawElementsType type, out IntPtr indices, int drawcount)
        {
            _glMultiDrawElements(mode, (IntPtr)count, type, (IntPtr)indices, drawcount);
        }
        
        public static unsafe delegate*<PrimitiveType, IntPtr, DrawElementsType, IntPtr, int, IntPtr, void> _glMultiDrawElementsBaseVertex;
        
        public static unsafe void MultiDrawElementsBaseVertex(PrimitiveType mode, ref int count, DrawElementsType type, out IntPtr indices, int drawcount, ref int basevertex)
        {
            _glMultiDrawElementsBaseVertex(mode, (IntPtr)count, type, (IntPtr)indices, drawcount, (IntPtr)basevertex);
        }
        
        public static unsafe delegate*<PrimitiveType, DrawElementsType, IntPtr, int, int, void> _glMultiDrawElementsIndirect;
        
        public static unsafe void MultiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type, IntPtr indirect, int drawcount, int stride)
        {
            _glMultiDrawElementsIndirect(mode, type, (IntPtr)indirect, drawcount, stride);
        }
        
        public static unsafe delegate*<PrimitiveType, DrawElementsType, IntPtr, long, int, int, void> _glMultiDrawElementsIndirectCount;
        
        public static unsafe void MultiDrawElementsIndirectCount(PrimitiveType mode, DrawElementsType type, IntPtr indirect, long drawcount, int maxdrawcount, int stride)
        {
            _glMultiDrawElementsIndirectCount(mode, type, (IntPtr)indirect, drawcount, maxdrawcount, stride);
        }
        
        public static unsafe delegate*<TextureUnit, double, void> _glMultiTexCoord1d;
        
        public static unsafe void MultiTexCoord1d(TextureUnit target, double s)
        {
            _glMultiTexCoord1d(target, s);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1dv;
        
        public static unsafe void MultiTexCoord1dv(TextureUnit target, ref double v)
        {
            _glMultiTexCoord1dv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, float, void> _glMultiTexCoord1f;
        
        public static unsafe void MultiTexCoord1f(TextureUnit target, float s)
        {
            _glMultiTexCoord1f(target, s);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1fv;
        
        public static unsafe void MultiTexCoord1fv(TextureUnit target, ref float v)
        {
            _glMultiTexCoord1fv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, int, void> _glMultiTexCoord1i;
        
        public static unsafe void MultiTexCoord1i(TextureUnit target, int s)
        {
            _glMultiTexCoord1i(target, s);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1iv;
        
        public static unsafe void MultiTexCoord1iv(TextureUnit target, ref int v)
        {
            _glMultiTexCoord1iv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, short, void> _glMultiTexCoord1s;
        
        public static unsafe void MultiTexCoord1s(TextureUnit target, short s)
        {
            _glMultiTexCoord1s(target, s);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord1sv;
        
        public static unsafe void MultiTexCoord1sv(TextureUnit target, ref short v)
        {
            _glMultiTexCoord1sv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, double, double, void> _glMultiTexCoord2d;
        
        public static unsafe void MultiTexCoord2d(TextureUnit target, double s, double t)
        {
            _glMultiTexCoord2d(target, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2dv;
        
        public static unsafe void MultiTexCoord2dv(TextureUnit target, ref double v)
        {
            _glMultiTexCoord2dv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, float, float, void> _glMultiTexCoord2f;
        
        public static unsafe void MultiTexCoord2f(TextureUnit target, float s, float t)
        {
            _glMultiTexCoord2f(target, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2fv;
        
        public static unsafe void MultiTexCoord2fv(TextureUnit target, ref float v)
        {
            _glMultiTexCoord2fv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, int, int, void> _glMultiTexCoord2i;
        
        public static unsafe void MultiTexCoord2i(TextureUnit target, int s, int t)
        {
            _glMultiTexCoord2i(target, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2iv;
        
        public static unsafe void MultiTexCoord2iv(TextureUnit target, ref int v)
        {
            _glMultiTexCoord2iv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, short, short, void> _glMultiTexCoord2s;
        
        public static unsafe void MultiTexCoord2s(TextureUnit target, short s, short t)
        {
            _glMultiTexCoord2s(target, s, t);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord2sv;
        
        public static unsafe void MultiTexCoord2sv(TextureUnit target, ref short v)
        {
            _glMultiTexCoord2sv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, double, double, double, void> _glMultiTexCoord3d;
        
        public static unsafe void MultiTexCoord3d(TextureUnit target, double s, double t, double r)
        {
            _glMultiTexCoord3d(target, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3dv;
        
        public static unsafe void MultiTexCoord3dv(TextureUnit target, ref double v)
        {
            _glMultiTexCoord3dv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, float, float, float, void> _glMultiTexCoord3f;
        
        public static unsafe void MultiTexCoord3f(TextureUnit target, float s, float t, float r)
        {
            _glMultiTexCoord3f(target, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3fv;
        
        public static unsafe void MultiTexCoord3fv(TextureUnit target, ref float v)
        {
            _glMultiTexCoord3fv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, int, int, int, void> _glMultiTexCoord3i;
        
        public static unsafe void MultiTexCoord3i(TextureUnit target, int s, int t, int r)
        {
            _glMultiTexCoord3i(target, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3iv;
        
        public static unsafe void MultiTexCoord3iv(TextureUnit target, ref int v)
        {
            _glMultiTexCoord3iv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, short, short, short, void> _glMultiTexCoord3s;
        
        public static unsafe void MultiTexCoord3s(TextureUnit target, short s, short t, short r)
        {
            _glMultiTexCoord3s(target, s, t, r);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord3sv;
        
        public static unsafe void MultiTexCoord3sv(TextureUnit target, ref short v)
        {
            _glMultiTexCoord3sv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, double, double, double, double, void> _glMultiTexCoord4d;
        
        public static unsafe void MultiTexCoord4d(TextureUnit target, double s, double t, double r, double q)
        {
            _glMultiTexCoord4d(target, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4dv;
        
        public static unsafe void MultiTexCoord4dv(TextureUnit target, ref double v)
        {
            _glMultiTexCoord4dv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, float, float, float, float, void> _glMultiTexCoord4f;
        
        public static unsafe void MultiTexCoord4f(TextureUnit target, float s, float t, float r, float q)
        {
            _glMultiTexCoord4f(target, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4fv;
        
        public static unsafe void MultiTexCoord4fv(TextureUnit target, ref float v)
        {
            _glMultiTexCoord4fv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, int, int, int, int, void> _glMultiTexCoord4i;
        
        public static unsafe void MultiTexCoord4i(TextureUnit target, int s, int t, int r, int q)
        {
            _glMultiTexCoord4i(target, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4iv;
        
        public static unsafe void MultiTexCoord4iv(TextureUnit target, ref int v)
        {
            _glMultiTexCoord4iv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, short, short, short, short, void> _glMultiTexCoord4s;
        
        public static unsafe void MultiTexCoord4s(TextureUnit target, short s, short t, short r, short q)
        {
            _glMultiTexCoord4s(target, s, t, r, q);
        }
        
        public static unsafe delegate*<TextureUnit, IntPtr, void> _glMultiTexCoord4sv;
        
        public static unsafe void MultiTexCoord4sv(TextureUnit target, ref short v)
        {
            _glMultiTexCoord4sv(target, (IntPtr)v);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, uint, void> _glMultiTexCoordP1ui;
        
        public static unsafe void MultiTexCoordP1ui(TextureUnit texture, TexCoordPointerType type, uint coords)
        {
            _glMultiTexCoordP1ui(texture, type, coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, IntPtr, void> _glMultiTexCoordP1uiv;
        
        public static unsafe void MultiTexCoordP1uiv(TextureUnit texture, TexCoordPointerType type, ref uint coords)
        {
            _glMultiTexCoordP1uiv(texture, type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, uint, void> _glMultiTexCoordP2ui;
        
        public static unsafe void MultiTexCoordP2ui(TextureUnit texture, TexCoordPointerType type, uint coords)
        {
            _glMultiTexCoordP2ui(texture, type, coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, IntPtr, void> _glMultiTexCoordP2uiv;
        
        public static unsafe void MultiTexCoordP2uiv(TextureUnit texture, TexCoordPointerType type, ref uint coords)
        {
            _glMultiTexCoordP2uiv(texture, type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, uint, void> _glMultiTexCoordP3ui;
        
        public static unsafe void MultiTexCoordP3ui(TextureUnit texture, TexCoordPointerType type, uint coords)
        {
            _glMultiTexCoordP3ui(texture, type, coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, IntPtr, void> _glMultiTexCoordP3uiv;
        
        public static unsafe void MultiTexCoordP3uiv(TextureUnit texture, TexCoordPointerType type, ref uint coords)
        {
            _glMultiTexCoordP3uiv(texture, type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, uint, void> _glMultiTexCoordP4ui;
        
        public static unsafe void MultiTexCoordP4ui(TextureUnit texture, TexCoordPointerType type, uint coords)
        {
            _glMultiTexCoordP4ui(texture, type, coords);
        }
        
        public static unsafe delegate*<TextureUnit, TexCoordPointerType, IntPtr, void> _glMultiTexCoordP4uiv;
        
        public static unsafe void MultiTexCoordP4uiv(TextureUnit texture, TexCoordPointerType type, ref uint coords)
        {
            _glMultiTexCoordP4uiv(texture, type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<uint, long, IntPtr, VertexBufferObjectUsage, void> _glNamedBufferData;
        
        public static unsafe void NamedBufferData(uint buffer, long size, IntPtr data, VertexBufferObjectUsage usage)
        {
            _glNamedBufferData(buffer, size, (IntPtr)data, usage);
        }
        
        public static unsafe delegate*<uint, long, IntPtr, uint, void> _glNamedBufferStorage;
        
        public static unsafe void NamedBufferStorage(uint buffer, long size, IntPtr data, uint flags)
        {
            _glNamedBufferStorage(buffer, size, (IntPtr)data, flags);
        }
        
        public static unsafe delegate*<uint, long, long, IntPtr, void> _glNamedBufferSubData;
        
        public static unsafe void NamedBufferSubData(uint buffer, long offset, long size, IntPtr data)
        {
            _glNamedBufferSubData(buffer, offset, size, (IntPtr)data);
        }
        
        public static unsafe delegate*<uint, ColorBuffer, void> _glNamedFramebufferDrawBuffer;
        
        public static unsafe void NamedFramebufferDrawBuffer(uint framebuffer, ColorBuffer buf)
        {
            _glNamedFramebufferDrawBuffer(framebuffer, buf);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glNamedFramebufferDrawBuffers;
        
        public static unsafe void NamedFramebufferDrawBuffers(uint framebuffer, int n, ref ColorBuffer bufs)
        {
            _glNamedFramebufferDrawBuffers(framebuffer, n, (IntPtr)bufs);
        }
        
        public static unsafe delegate*<uint, FramebufferParameterName, int, void> _glNamedFramebufferParameteri;
        
        public static unsafe void NamedFramebufferParameteri(uint framebuffer, FramebufferParameterName pname, int param)
        {
            _glNamedFramebufferParameteri(framebuffer, pname, param);
        }
        
        public static unsafe delegate*<uint, ColorBuffer, void> _glNamedFramebufferReadBuffer;
        
        public static unsafe void NamedFramebufferReadBuffer(uint framebuffer, ColorBuffer src)
        {
            _glNamedFramebufferReadBuffer(framebuffer, src);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, RenderbufferTarget, uint, void> _glNamedFramebufferRenderbuffer;
        
        public static unsafe void NamedFramebufferRenderbuffer(uint framebuffer, FramebufferAttachment attachment, RenderbufferTarget renderbuffertarget, uint renderbuffer)
        {
            _glNamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, uint, int, void> _glNamedFramebufferTexture;
        
        public static unsafe void NamedFramebufferTexture(uint framebuffer, FramebufferAttachment attachment, uint texture, int level)
        {
            _glNamedFramebufferTexture(framebuffer, attachment, texture, level);
        }
        
        public static unsafe delegate*<uint, FramebufferAttachment, uint, int, int, void> _glNamedFramebufferTextureLayer;
        
        public static unsafe void NamedFramebufferTextureLayer(uint framebuffer, FramebufferAttachment attachment, uint texture, int level, int layer)
        {
            _glNamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
        }
        
        public static unsafe delegate*<uint, InternalFormat, int, int, void> _glNamedRenderbufferStorage;
        
        public static unsafe void NamedRenderbufferStorage(uint renderbuffer, InternalFormat internalformat, int width, int height)
        {
            _glNamedRenderbufferStorage(renderbuffer, internalformat, width, height);
        }
        
        public static unsafe delegate*<uint, int, InternalFormat, int, int, void> _glNamedRenderbufferStorageMultisample;
        
        public static unsafe void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, InternalFormat internalformat, int width, int height)
        {
            _glNamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
        }
        
        public static unsafe delegate*<uint, ListMode, void> _glNewList;
        
        public static unsafe void NewList(uint list, ListMode mode)
        {
            _glNewList(list, mode);
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, void> _glNormal3b;
        
        public static unsafe void Normal3b(sbyte nx, sbyte ny, sbyte nz)
        {
            _glNormal3b(nx, ny, nz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glNormal3bv;
        
        public static unsafe void Normal3bv(ref sbyte v)
        {
            _glNormal3bv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, void> _glNormal3d;
        
        public static unsafe void Normal3d(double nx, double ny, double nz)
        {
            _glNormal3d(nx, ny, nz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glNormal3dv;
        
        public static unsafe void Normal3dv(ref double v)
        {
            _glNormal3dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glNormal3f;
        
        public static unsafe void Normal3f(float nx, float ny, float nz)
        {
            _glNormal3f(nx, ny, nz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glNormal3fv;
        
        public static unsafe void Normal3fv(ref float v)
        {
            _glNormal3fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glNormal3i;
        
        public static unsafe void Normal3i(int nx, int ny, int nz)
        {
            _glNormal3i(nx, ny, nz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glNormal3iv;
        
        public static unsafe void Normal3iv(ref int v)
        {
            _glNormal3iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glNormal3s;
        
        public static unsafe void Normal3s(short nx, short ny, short nz)
        {
            _glNormal3s(nx, ny, nz);
        }
        
        public static unsafe delegate*<IntPtr, void> _glNormal3sv;
        
        public static unsafe void Normal3sv(ref short v)
        {
            _glNormal3sv((IntPtr)v);
        }
        
        public static unsafe delegate*<NormalPointerType, uint, void> _glNormalP3ui;
        
        public static unsafe void NormalP3ui(NormalPointerType type, uint coords)
        {
            _glNormalP3ui(type, coords);
        }
        
        public static unsafe delegate*<NormalPointerType, IntPtr, void> _glNormalP3uiv;
        
        public static unsafe void NormalP3uiv(NormalPointerType type, ref uint coords)
        {
            _glNormalP3uiv(type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<NormalPointerType, int, IntPtr, void> _glNormalPointer;
        
        public static unsafe void NormalPointer(NormalPointerType type, int stride, IntPtr pointer)
        {
            _glNormalPointer(type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<ObjectIdentifier, uint, int, IntPtr, void> _glObjectLabel;
        
        public static unsafe void ObjectLabel(ObjectIdentifier identifier, uint name, int length, ref sbyte label)
        {
            _glObjectLabel(identifier, name, length, (IntPtr)label);
        }
        
        public static unsafe delegate*<IntPtr, int, IntPtr, void> _glObjectPtrLabel;
        
        public static unsafe void ObjectPtrLabel(IntPtr ptr, int length, ref sbyte label)
        {
            _glObjectPtrLabel((IntPtr)ptr, length, (IntPtr)label);
        }
        
        public static unsafe delegate*<double, double, double, double, double, double, void> _glOrtho;
        
        public static unsafe void Ortho(double left, double right, double bottom, double top, double zNear, double zFar)
        {
            _glOrtho(left, right, bottom, top, zNear, zFar);
        }
        
        public static unsafe delegate*<float, void> _glPassThrough;
        
        public static unsafe void PassThrough(float token)
        {
            _glPassThrough(token);
        }
        
        public static unsafe delegate*<PatchParameterName, IntPtr, void> _glPatchParameterfv;
        
        public static unsafe void PatchParameterfv(PatchParameterName pname, ref float values)
        {
            _glPatchParameterfv(pname, (IntPtr)values);
        }
        
        public static unsafe delegate*<PatchParameterName, int, void> _glPatchParameteri;
        
        public static unsafe void PatchParameteri(PatchParameterName pname, int value)
        {
            _glPatchParameteri(pname, value);
        }
        
        public static unsafe delegate*<void> _glPauseTransformFeedback;
        
        public static unsafe void PauseTransformFeedback()
        {
            _glPauseTransformFeedback();
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glPixelMapfv;
        
        public static unsafe void PixelMapfv(PixelMap map, int mapsize, ref float values)
        {
            _glPixelMapfv(map, mapsize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glPixelMapuiv;
        
        public static unsafe void PixelMapuiv(PixelMap map, int mapsize, ref uint values)
        {
            _glPixelMapuiv(map, mapsize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelMap, int, IntPtr, void> _glPixelMapusv;
        
        public static unsafe void PixelMapusv(PixelMap map, int mapsize, ref ushort values)
        {
            _glPixelMapusv(map, mapsize, (IntPtr)values);
        }
        
        public static unsafe delegate*<PixelStoreParameter, float, void> _glPixelStoref;
        
        public static unsafe void PixelStoref(PixelStoreParameter pname, float param)
        {
            _glPixelStoref(pname, param);
        }
        
        public static unsafe delegate*<PixelStoreParameter, int, void> _glPixelStorei;
        
        public static unsafe void PixelStorei(PixelStoreParameter pname, int param)
        {
            _glPixelStorei(pname, param);
        }
        
        public static unsafe delegate*<PixelTransferParameter, float, void> _glPixelTransferf;
        
        public static unsafe void PixelTransferf(PixelTransferParameter pname, float param)
        {
            _glPixelTransferf(pname, param);
        }
        
        public static unsafe delegate*<PixelTransferParameter, int, void> _glPixelTransferi;
        
        public static unsafe void PixelTransferi(PixelTransferParameter pname, int param)
        {
            _glPixelTransferi(pname, param);
        }
        
        public static unsafe delegate*<float, float, void> _glPixelZoom;
        
        public static unsafe void PixelZoom(float xfactor, float yfactor)
        {
            _glPixelZoom(xfactor, yfactor);
        }
        
        public static unsafe delegate*<PointParameterNameARB, float, void> _glPointParameterf;
        
        public static unsafe void PointParameterf(PointParameterNameARB pname, float param)
        {
            _glPointParameterf(pname, param);
        }
        
        public static unsafe delegate*<PointParameterNameARB, IntPtr, void> _glPointParameterfv;
        
        public static unsafe void PointParameterfv(PointParameterNameARB pname, ref float @params)
        {
            _glPointParameterfv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<PointParameterNameARB, int, void> _glPointParameteri;
        
        public static unsafe void PointParameteri(PointParameterNameARB pname, int param)
        {
            _glPointParameteri(pname, param);
        }
        
        public static unsafe delegate*<PointParameterNameARB, IntPtr, void> _glPointParameteriv;
        
        public static unsafe void PointParameteriv(PointParameterNameARB pname, ref int @params)
        {
            _glPointParameteriv(pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<float, void> _glPointSize;
        
        public static unsafe void PointSize(float size)
        {
            _glPointSize(size);
        }
        
        public static unsafe delegate*<MaterialFace, PolygonMode, void> _glPolygonMode;
        
        public static unsafe void PolygonMode(MaterialFace face, PolygonMode mode)
        {
            _glPolygonMode(face, mode);
        }
        
        public static unsafe delegate*<float, float, void> _glPolygonOffset;
        
        public static unsafe void PolygonOffset(float factor, float units)
        {
            _glPolygonOffset(factor, units);
        }
        
        public static unsafe delegate*<float, float, float, void> _glPolygonOffsetClamp;
        
        public static unsafe void PolygonOffsetClamp(float factor, float units, float clamp)
        {
            _glPolygonOffsetClamp(factor, units, clamp);
        }
        
        public static unsafe delegate*<IntPtr, void> _glPolygonStipple;
        
        public static unsafe void PolygonStipple(ref byte mask)
        {
            _glPolygonStipple((IntPtr)mask);
        }
        
        public static unsafe delegate*<void> _glPopAttrib;
        
        public static unsafe void PopAttrib()
        {
            _glPopAttrib();
        }
        
        public static unsafe delegate*<void> _glPopClientAttrib;
        
        public static unsafe void PopClientAttrib()
        {
            _glPopClientAttrib();
        }
        
        public static unsafe delegate*<void> _glPopDebugGroup;
        
        public static unsafe void PopDebugGroup()
        {
            _glPopDebugGroup();
        }
        
        public static unsafe delegate*<void> _glPopMatrix;
        
        public static unsafe void PopMatrix()
        {
            _glPopMatrix();
        }
        
        public static unsafe delegate*<void> _glPopName;
        
        public static unsafe void PopName()
        {
            _glPopName();
        }
        
        public static unsafe delegate*<uint, void> _glPrimitiveRestartIndex;
        
        public static unsafe void PrimitiveRestartIndex(uint index)
        {
            _glPrimitiveRestartIndex(index);
        }
        
        public static unsafe delegate*<int, IntPtr, IntPtr, void> _glPrioritizeTextures;
        
        public static unsafe void PrioritizeTextures(int n, ref uint textures, ref float priorities)
        {
            _glPrioritizeTextures(n, (IntPtr)textures, (IntPtr)priorities);
        }
        
        public static unsafe delegate*<uint, uint, IntPtr, int, void> _glProgramBinary;
        
        public static unsafe void ProgramBinary(uint program, uint binaryFormat, IntPtr binary, int length)
        {
            _glProgramBinary(program, binaryFormat, (IntPtr)binary, length);
        }
        
        public static unsafe delegate*<uint, ProgramParameterPName, int, void> _glProgramParameteri;
        
        public static unsafe void ProgramParameteri(uint program, ProgramParameterPName pname, int value)
        {
            _glProgramParameteri(program, pname, value);
        }
        
        public static unsafe delegate*<uint, int, double, void> _glProgramUniform1d;
        
        public static unsafe void ProgramUniform1d(uint program, int location, double v0)
        {
            _glProgramUniform1d(program, location, v0);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1dv;
        
        public static unsafe void ProgramUniform1dv(uint program, int location, int count, ref double value)
        {
            _glProgramUniform1dv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, float, void> _glProgramUniform1f;
        
        public static unsafe void ProgramUniform1f(uint program, int location, float v0)
        {
            _glProgramUniform1f(program, location, v0);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1fv;
        
        public static unsafe void ProgramUniform1fv(uint program, int location, int count, ref float value)
        {
            _glProgramUniform1fv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, void> _glProgramUniform1i;
        
        public static unsafe void ProgramUniform1i(uint program, int location, int v0)
        {
            _glProgramUniform1i(program, location, v0);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1iv;
        
        public static unsafe void ProgramUniform1iv(uint program, int location, int count, ref int value)
        {
            _glProgramUniform1iv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, uint, void> _glProgramUniform1ui;
        
        public static unsafe void ProgramUniform1ui(uint program, int location, uint v0)
        {
            _glProgramUniform1ui(program, location, v0);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform1uiv;
        
        public static unsafe void ProgramUniform1uiv(uint program, int location, int count, ref uint value)
        {
            _glProgramUniform1uiv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, double, double, void> _glProgramUniform2d;
        
        public static unsafe void ProgramUniform2d(uint program, int location, double v0, double v1)
        {
            _glProgramUniform2d(program, location, v0, v1);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2dv;
        
        public static unsafe void ProgramUniform2dv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2dv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, float, float, void> _glProgramUniform2f;
        
        public static unsafe void ProgramUniform2f(uint program, int location, float v0, float v1)
        {
            _glProgramUniform2f(program, location, v0, v1);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2fv;
        
        public static unsafe void ProgramUniform2fv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2fv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, int, void> _glProgramUniform2i;
        
        public static unsafe void ProgramUniform2i(uint program, int location, int v0, int v1)
        {
            _glProgramUniform2i(program, location, v0, v1);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2iv;
        
        public static unsafe void ProgramUniform2iv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2iv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, uint, uint, void> _glProgramUniform2ui;
        
        public static unsafe void ProgramUniform2ui(uint program, int location, uint v0, uint v1)
        {
            _glProgramUniform2ui(program, location, v0, v1);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform2uiv;
        
        public static unsafe void ProgramUniform2uiv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform2uiv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, double, double, double, void> _glProgramUniform3d;
        
        public static unsafe void ProgramUniform3d(uint program, int location, double v0, double v1, double v2)
        {
            _glProgramUniform3d(program, location, v0, v1, v2);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3dv;
        
        public static unsafe void ProgramUniform3dv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3dv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, float, float, float, void> _glProgramUniform3f;
        
        public static unsafe void ProgramUniform3f(uint program, int location, float v0, float v1, float v2)
        {
            _glProgramUniform3f(program, location, v0, v1, v2);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3fv;
        
        public static unsafe void ProgramUniform3fv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3fv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, void> _glProgramUniform3i;
        
        public static unsafe void ProgramUniform3i(uint program, int location, int v0, int v1, int v2)
        {
            _glProgramUniform3i(program, location, v0, v1, v2);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3iv;
        
        public static unsafe void ProgramUniform3iv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3iv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, uint, uint, uint, void> _glProgramUniform3ui;
        
        public static unsafe void ProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2)
        {
            _glProgramUniform3ui(program, location, v0, v1, v2);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform3uiv;
        
        public static unsafe void ProgramUniform3uiv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform3uiv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, double, double, double, double, void> _glProgramUniform4d;
        
        public static unsafe void ProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3)
        {
            _glProgramUniform4d(program, location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4dv;
        
        public static unsafe void ProgramUniform4dv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4dv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, float, float, float, float, void> _glProgramUniform4f;
        
        public static unsafe void ProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3)
        {
            _glProgramUniform4f(program, location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4fv;
        
        public static unsafe void ProgramUniform4fv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4fv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, void> _glProgramUniform4i;
        
        public static unsafe void ProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3)
        {
            _glProgramUniform4i(program, location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4iv;
        
        public static unsafe void ProgramUniform4iv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4iv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, uint, uint, uint, uint, void> _glProgramUniform4ui;
        
        public static unsafe void ProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3)
        {
            _glProgramUniform4ui(program, location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<uint, int, int, IntPtr, void> _glProgramUniform4uiv;
        
        public static unsafe void ProgramUniform4uiv(uint program, int location, int count, out IntPtr value)
        {
            _glProgramUniform4uiv(program, location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2dv;
        
        public static unsafe void ProgramUniformMatrix2dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2fv;
        
        public static unsafe void ProgramUniformMatrix2fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2x3dv;
        
        public static unsafe void ProgramUniformMatrix2x3dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2x3dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2x3fv;
        
        public static unsafe void ProgramUniformMatrix2x3fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2x3fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2x4dv;
        
        public static unsafe void ProgramUniformMatrix2x4dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2x4dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix2x4fv;
        
        public static unsafe void ProgramUniformMatrix2x4fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix2x4fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3dv;
        
        public static unsafe void ProgramUniformMatrix3dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3fv;
        
        public static unsafe void ProgramUniformMatrix3fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3x2dv;
        
        public static unsafe void ProgramUniformMatrix3x2dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3x2dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3x2fv;
        
        public static unsafe void ProgramUniformMatrix3x2fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3x2fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3x4dv;
        
        public static unsafe void ProgramUniformMatrix3x4dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3x4dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix3x4fv;
        
        public static unsafe void ProgramUniformMatrix3x4fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix3x4fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4dv;
        
        public static unsafe void ProgramUniformMatrix4dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4fv;
        
        public static unsafe void ProgramUniformMatrix4fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4x2dv;
        
        public static unsafe void ProgramUniformMatrix4x2dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4x2dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4x2fv;
        
        public static unsafe void ProgramUniformMatrix4x2fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4x2fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4x3dv;
        
        public static unsafe void ProgramUniformMatrix4x3dv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4x3dv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, int, byte, IntPtr, void> _glProgramUniformMatrix4x3fv;
        
        public static unsafe void ProgramUniformMatrix4x3fv(uint program, int location, int count, byte transpose, out IntPtr value)
        {
            _glProgramUniformMatrix4x3fv(program, location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<VertexProvokingMode, void> _glProvokingVertex;
        
        public static unsafe void ProvokingVertex(VertexProvokingMode mode)
        {
            _glProvokingVertex(mode);
        }
        
        public static unsafe delegate*<uint, void> _glPushAttrib;
        
        public static unsafe void PushAttrib(uint mask)
        {
            _glPushAttrib(mask);
        }
        
        public static unsafe delegate*<uint, void> _glPushClientAttrib;
        
        public static unsafe void PushClientAttrib(uint mask)
        {
            _glPushClientAttrib(mask);
        }
        
        public static unsafe delegate*<DebugSource, uint, int, IntPtr, void> _glPushDebugGroup;
        
        public static unsafe void PushDebugGroup(DebugSource source, uint id, int length, ref sbyte message)
        {
            _glPushDebugGroup(source, id, length, (IntPtr)message);
        }
        
        public static unsafe delegate*<void> _glPushMatrix;
        
        public static unsafe void PushMatrix()
        {
            _glPushMatrix();
        }
        
        public static unsafe delegate*<uint, void> _glPushName;
        
        public static unsafe void PushName(uint name)
        {
            _glPushName(name);
        }
        
        public static unsafe delegate*<uint, QueryCounterTarget, void> _glQueryCounter;
        
        public static unsafe void QueryCounter(uint id, QueryCounterTarget target)
        {
            _glQueryCounter(id, target);
        }
        
        public static unsafe delegate*<double, double, void> _glRasterPos2d;
        
        public static unsafe void RasterPos2d(double x, double y)
        {
            _glRasterPos2d(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos2dv;
        
        public static unsafe void RasterPos2dv(ref double v)
        {
            _glRasterPos2dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, void> _glRasterPos2f;
        
        public static unsafe void RasterPos2f(float x, float y)
        {
            _glRasterPos2f(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos2fv;
        
        public static unsafe void RasterPos2fv(ref float v)
        {
            _glRasterPos2fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, void> _glRasterPos2i;
        
        public static unsafe void RasterPos2i(int x, int y)
        {
            _glRasterPos2i(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos2iv;
        
        public static unsafe void RasterPos2iv(ref int v)
        {
            _glRasterPos2iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, void> _glRasterPos2s;
        
        public static unsafe void RasterPos2s(short x, short y)
        {
            _glRasterPos2s(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos2sv;
        
        public static unsafe void RasterPos2sv(ref short v)
        {
            _glRasterPos2sv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, void> _glRasterPos3d;
        
        public static unsafe void RasterPos3d(double x, double y, double z)
        {
            _glRasterPos3d(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos3dv;
        
        public static unsafe void RasterPos3dv(ref double v)
        {
            _glRasterPos3dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glRasterPos3f;
        
        public static unsafe void RasterPos3f(float x, float y, float z)
        {
            _glRasterPos3f(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos3fv;
        
        public static unsafe void RasterPos3fv(ref float v)
        {
            _glRasterPos3fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glRasterPos3i;
        
        public static unsafe void RasterPos3i(int x, int y, int z)
        {
            _glRasterPos3i(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos3iv;
        
        public static unsafe void RasterPos3iv(ref int v)
        {
            _glRasterPos3iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glRasterPos3s;
        
        public static unsafe void RasterPos3s(short x, short y, short z)
        {
            _glRasterPos3s(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos3sv;
        
        public static unsafe void RasterPos3sv(ref short v)
        {
            _glRasterPos3sv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, double, void> _glRasterPos4d;
        
        public static unsafe void RasterPos4d(double x, double y, double z, double w)
        {
            _glRasterPos4d(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos4dv;
        
        public static unsafe void RasterPos4dv(ref double v)
        {
            _glRasterPos4dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glRasterPos4f;
        
        public static unsafe void RasterPos4f(float x, float y, float z, float w)
        {
            _glRasterPos4f(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos4fv;
        
        public static unsafe void RasterPos4fv(ref float v)
        {
            _glRasterPos4fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glRasterPos4i;
        
        public static unsafe void RasterPos4i(int x, int y, int z, int w)
        {
            _glRasterPos4i(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos4iv;
        
        public static unsafe void RasterPos4iv(ref int v)
        {
            _glRasterPos4iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, short, void> _glRasterPos4s;
        
        public static unsafe void RasterPos4s(short x, short y, short z, short w)
        {
            _glRasterPos4s(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glRasterPos4sv;
        
        public static unsafe void RasterPos4sv(ref short v)
        {
            _glRasterPos4sv((IntPtr)v);
        }
        
        public static unsafe delegate*<ReadBufferMode, void> _glReadBuffer;
        
        public static unsafe void ReadBuffer(ReadBufferMode src)
        {
            _glReadBuffer(src);
        }
        
        public static unsafe delegate*<int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glReadPixels;
        
        public static unsafe void ReadPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glReadPixels(x, y, width, height, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<int, int, int, int, PixelFormat, PixelType, int, IntPtr, void> _glReadnPixels;
        
        public static unsafe void ReadnPixels(int x, int y, int width, int height, PixelFormat format, PixelType type, int bufSize, IntPtr data)
        {
            _glReadnPixels(x, y, width, height, format, type, bufSize, (IntPtr)data);
        }
        
        public static unsafe delegate*<double, double, double, double, void> _glRectd;
        
        public static unsafe void Rectd(double x1, double y1, double x2, double y2)
        {
            _glRectd(x1, y1, x2, y2);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glRectdv;
        
        public static unsafe void Rectdv(ref double v1, ref double v2)
        {
            _glRectdv((IntPtr)v1, (IntPtr)v2);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glRectf;
        
        public static unsafe void Rectf(float x1, float y1, float x2, float y2)
        {
            _glRectf(x1, y1, x2, y2);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glRectfv;
        
        public static unsafe void Rectfv(ref float v1, ref float v2)
        {
            _glRectfv((IntPtr)v1, (IntPtr)v2);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glRecti;
        
        public static unsafe void Recti(int x1, int y1, int x2, int y2)
        {
            _glRecti(x1, y1, x2, y2);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glRectiv;
        
        public static unsafe void Rectiv(ref int v1, ref int v2)
        {
            _glRectiv((IntPtr)v1, (IntPtr)v2);
        }
        
        public static unsafe delegate*<short, short, short, short, void> _glRects;
        
        public static unsafe void Rects(short x1, short y1, short x2, short y2)
        {
            _glRects(x1, y1, x2, y2);
        }
        
        public static unsafe delegate*<IntPtr, IntPtr, void> _glRectsv;
        
        public static unsafe void Rectsv(ref short v1, ref short v2)
        {
            _glRectsv((IntPtr)v1, (IntPtr)v2);
        }
        
        public static unsafe delegate*<void> _glReleaseShaderCompiler;
        
        public static unsafe void ReleaseShaderCompiler()
        {
            _glReleaseShaderCompiler();
        }
        
        public static unsafe delegate*<RenderingMode, int> _glRenderMode;
        
        public static unsafe int RenderMode(RenderingMode mode)
        {
            return _glRenderMode(mode);
        }
        
        public static unsafe delegate*<RenderbufferTarget, InternalFormat, int, int, void> _glRenderbufferStorage;
        
        public static unsafe void RenderbufferStorage(RenderbufferTarget target, InternalFormat internalformat, int width, int height)
        {
            _glRenderbufferStorage(target, internalformat, width, height);
        }
        
        public static unsafe delegate*<RenderbufferTarget, int, InternalFormat, int, int, void> _glRenderbufferStorageMultisample;
        
        public static unsafe void RenderbufferStorageMultisample(RenderbufferTarget target, int samples, InternalFormat internalformat, int width, int height)
        {
            _glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
        }
        
        public static unsafe delegate*<void> _glResumeTransformFeedback;
        
        public static unsafe void ResumeTransformFeedback()
        {
            _glResumeTransformFeedback();
        }
        
        public static unsafe delegate*<double, double, double, double, void> _glRotated;
        
        public static unsafe void Rotated(double angle, double x, double y, double z)
        {
            _glRotated(angle, x, y, z);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glRotatef;
        
        public static unsafe void Rotatef(float angle, float x, float y, float z)
        {
            _glRotatef(angle, x, y, z);
        }
        
        public static unsafe delegate*<float, byte, void> _glSampleCoverage;
        
        public static unsafe void SampleCoverage(float value, byte invert)
        {
            _glSampleCoverage(value, invert);
        }
        
        public static unsafe delegate*<uint, uint, void> _glSampleMaski;
        
        public static unsafe void SampleMaski(uint maskNumber, uint mask)
        {
            _glSampleMaski(maskNumber, mask);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glSamplerParameterIiv;
        
        public static unsafe void SamplerParameterIiv(uint sampler, SamplerParameterI pname, ref int param)
        {
            _glSamplerParameterIiv(sampler, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glSamplerParameterIuiv;
        
        public static unsafe void SamplerParameterIuiv(uint sampler, SamplerParameterI pname, ref uint param)
        {
            _glSamplerParameterIuiv(sampler, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, SamplerParameterF, float, void> _glSamplerParameterf;
        
        public static unsafe void SamplerParameterf(uint sampler, SamplerParameterF pname, float param)
        {
            _glSamplerParameterf(sampler, pname, param);
        }
        
        public static unsafe delegate*<uint, SamplerParameterF, IntPtr, void> _glSamplerParameterfv;
        
        public static unsafe void SamplerParameterfv(uint sampler, SamplerParameterF pname, ref float param)
        {
            _glSamplerParameterfv(sampler, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, int, void> _glSamplerParameteri;
        
        public static unsafe void SamplerParameteri(uint sampler, SamplerParameterI pname, int param)
        {
            _glSamplerParameteri(sampler, pname, param);
        }
        
        public static unsafe delegate*<uint, SamplerParameterI, IntPtr, void> _glSamplerParameteriv;
        
        public static unsafe void SamplerParameteriv(uint sampler, SamplerParameterI pname, ref int param)
        {
            _glSamplerParameteriv(sampler, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<double, double, double, void> _glScaled;
        
        public static unsafe void Scaled(double x, double y, double z)
        {
            _glScaled(x, y, z);
        }
        
        public static unsafe delegate*<float, float, float, void> _glScalef;
        
        public static unsafe void Scalef(float x, float y, float z)
        {
            _glScalef(x, y, z);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glScissor;
        
        public static unsafe void Scissor(int x, int y, int width, int height)
        {
            _glScissor(x, y, width, height);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glScissorArrayv;
        
        public static unsafe void ScissorArrayv(uint first, int count, ref int v)
        {
            _glScissorArrayv(first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, void> _glScissorIndexed;
        
        public static unsafe void ScissorIndexed(uint index, int left, int bottom, int width, int height)
        {
            _glScissorIndexed(index, left, bottom, width, height);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glScissorIndexedv;
        
        public static unsafe void ScissorIndexedv(uint index, ref int v)
        {
            _glScissorIndexedv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<sbyte, sbyte, sbyte, void> _glSecondaryColor3b;
        
        public static unsafe void SecondaryColor3b(sbyte red, sbyte green, sbyte blue)
        {
            _glSecondaryColor3b(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3bv;
        
        public static unsafe void SecondaryColor3bv(ref sbyte v)
        {
            _glSecondaryColor3bv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, void> _glSecondaryColor3d;
        
        public static unsafe void SecondaryColor3d(double red, double green, double blue)
        {
            _glSecondaryColor3d(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3dv;
        
        public static unsafe void SecondaryColor3dv(ref double v)
        {
            _glSecondaryColor3dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glSecondaryColor3f;
        
        public static unsafe void SecondaryColor3f(float red, float green, float blue)
        {
            _glSecondaryColor3f(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3fv;
        
        public static unsafe void SecondaryColor3fv(ref float v)
        {
            _glSecondaryColor3fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glSecondaryColor3i;
        
        public static unsafe void SecondaryColor3i(int red, int green, int blue)
        {
            _glSecondaryColor3i(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3iv;
        
        public static unsafe void SecondaryColor3iv(ref int v)
        {
            _glSecondaryColor3iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glSecondaryColor3s;
        
        public static unsafe void SecondaryColor3s(short red, short green, short blue)
        {
            _glSecondaryColor3s(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3sv;
        
        public static unsafe void SecondaryColor3sv(ref short v)
        {
            _glSecondaryColor3sv((IntPtr)v);
        }
        
        public static unsafe delegate*<byte, byte, byte, void> _glSecondaryColor3ub;
        
        public static unsafe void SecondaryColor3ub(byte red, byte green, byte blue)
        {
            _glSecondaryColor3ub(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3ubv;
        
        public static unsafe void SecondaryColor3ubv(ref byte v)
        {
            _glSecondaryColor3ubv((IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glSecondaryColor3ui;
        
        public static unsafe void SecondaryColor3ui(uint red, uint green, uint blue)
        {
            _glSecondaryColor3ui(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3uiv;
        
        public static unsafe void SecondaryColor3uiv(ref uint v)
        {
            _glSecondaryColor3uiv((IntPtr)v);
        }
        
        public static unsafe delegate*<ushort, ushort, ushort, void> _glSecondaryColor3us;
        
        public static unsafe void SecondaryColor3us(ushort red, ushort green, ushort blue)
        {
            _glSecondaryColor3us(red, green, blue);
        }
        
        public static unsafe delegate*<IntPtr, void> _glSecondaryColor3usv;
        
        public static unsafe void SecondaryColor3usv(ref ushort v)
        {
            _glSecondaryColor3usv((IntPtr)v);
        }
        
        public static unsafe delegate*<ColorPointerType, uint, void> _glSecondaryColorP3ui;
        
        public static unsafe void SecondaryColorP3ui(ColorPointerType type, uint color)
        {
            _glSecondaryColorP3ui(type, color);
        }
        
        public static unsafe delegate*<ColorPointerType, IntPtr, void> _glSecondaryColorP3uiv;
        
        public static unsafe void SecondaryColorP3uiv(ColorPointerType type, ref uint color)
        {
            _glSecondaryColorP3uiv(type, (IntPtr)color);
        }
        
        public static unsafe delegate*<int, ColorPointerType, int, IntPtr, void> _glSecondaryColorPointer;
        
        public static unsafe void SecondaryColorPointer(int size, ColorPointerType type, int stride, IntPtr pointer)
        {
            _glSecondaryColorPointer(size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, IntPtr, void> _glSelectBuffer;
        
        public static unsafe void SelectBuffer(int size, ref uint buffer)
        {
            _glSelectBuffer(size, (IntPtr)buffer);
        }
        
        public static unsafe delegate*<ShadingModel, void> _glShadeModel;
        
        public static unsafe void ShadeModel(ShadingModel mode)
        {
            _glShadeModel(mode);
        }
        
        public static unsafe delegate*<int, IntPtr, ShaderBinaryFormat, IntPtr, int, void> _glShaderBinary;
        
        public static unsafe void ShaderBinary(int count, ref uint shaders, ShaderBinaryFormat binaryFormat, IntPtr binary, int length)
        {
            _glShaderBinary(count, (IntPtr)shaders, binaryFormat, (IntPtr)binary, length);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, IntPtr, void> _glShaderSource;
        
        public static unsafe void ShaderSource(uint shader, int count, out IntPtr @string, ref int length)
        {
            _glShaderSource(shader, count, (IntPtr)@string, (IntPtr)length);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glShaderStorageBlockBinding;
        
        public static unsafe void ShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding)
        {
            _glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
        }
        
        public static unsafe delegate*<uint, IntPtr, uint, IntPtr, IntPtr, void> _glSpecializeShader;
        
        public static unsafe void SpecializeShader(uint shader, ref sbyte pEntryPoint, uint numSpecializationConstants, ref uint pConstantIndex, ref uint pConstantValue)
        {
            _glSpecializeShader(shader, (IntPtr)pEntryPoint, numSpecializationConstants, (IntPtr)pConstantIndex, (IntPtr)pConstantValue);
        }
        
        public static unsafe delegate*<StencilFunction, int, uint, void> _glStencilFunc;
        
        public static unsafe void StencilFunc(StencilFunction func, int @ref, uint mask)
        {
            _glStencilFunc(func, @ref, mask);
        }
        
        public static unsafe delegate*<StencilFaceDirection, StencilFunction, int, uint, void> _glStencilFuncSeparate;
        
        public static unsafe void StencilFuncSeparate(StencilFaceDirection face, StencilFunction func, int @ref, uint mask)
        {
            _glStencilFuncSeparate(face, func, @ref, mask);
        }
        
        public static unsafe delegate*<uint, void> _glStencilMask;
        
        public static unsafe void StencilMask(uint mask)
        {
            _glStencilMask(mask);
        }
        
        public static unsafe delegate*<StencilFaceDirection, uint, void> _glStencilMaskSeparate;
        
        public static unsafe void StencilMaskSeparate(StencilFaceDirection face, uint mask)
        {
            _glStencilMaskSeparate(face, mask);
        }
        
        public static unsafe delegate*<StencilOp, StencilOp, StencilOp, void> _glStencilOp;
        
        public static unsafe void StencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass)
        {
            _glStencilOp(fail, zfail, zpass);
        }
        
        public static unsafe delegate*<StencilFaceDirection, StencilOp, StencilOp, StencilOp, void> _glStencilOpSeparate;
        
        public static unsafe void StencilOpSeparate(StencilFaceDirection face, StencilOp sfail, StencilOp dpfail, StencilOp dppass)
        {
            _glStencilOpSeparate(face, sfail, dpfail, dppass);
        }
        
        public static unsafe delegate*<TextureTarget, SizedInternalFormat, uint, void> _glTexBuffer;
        
        public static unsafe void TexBuffer(TextureTarget target, SizedInternalFormat internalformat, uint buffer)
        {
            _glTexBuffer(target, internalformat, buffer);
        }
        
        public static unsafe delegate*<TextureTarget, SizedInternalFormat, uint, long, long, void> _glTexBufferRange;
        
        public static unsafe void TexBufferRange(TextureTarget target, SizedInternalFormat internalformat, uint buffer, long offset, long size)
        {
            _glTexBufferRange(target, internalformat, buffer, offset, size);
        }
        
        public static unsafe delegate*<double, void> _glTexCoord1d;
        
        public static unsafe void TexCoord1d(double s)
        {
            _glTexCoord1d(s);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord1dv;
        
        public static unsafe void TexCoord1dv(ref double v)
        {
            _glTexCoord1dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, void> _glTexCoord1f;
        
        public static unsafe void TexCoord1f(float s)
        {
            _glTexCoord1f(s);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord1fv;
        
        public static unsafe void TexCoord1fv(ref float v)
        {
            _glTexCoord1fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, void> _glTexCoord1i;
        
        public static unsafe void TexCoord1i(int s)
        {
            _glTexCoord1i(s);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord1iv;
        
        public static unsafe void TexCoord1iv(ref int v)
        {
            _glTexCoord1iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, void> _glTexCoord1s;
        
        public static unsafe void TexCoord1s(short s)
        {
            _glTexCoord1s(s);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord1sv;
        
        public static unsafe void TexCoord1sv(ref short v)
        {
            _glTexCoord1sv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, void> _glTexCoord2d;
        
        public static unsafe void TexCoord2d(double s, double t)
        {
            _glTexCoord2d(s, t);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord2dv;
        
        public static unsafe void TexCoord2dv(ref double v)
        {
            _glTexCoord2dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, void> _glTexCoord2f;
        
        public static unsafe void TexCoord2f(float s, float t)
        {
            _glTexCoord2f(s, t);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord2fv;
        
        public static unsafe void TexCoord2fv(ref float v)
        {
            _glTexCoord2fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, void> _glTexCoord2i;
        
        public static unsafe void TexCoord2i(int s, int t)
        {
            _glTexCoord2i(s, t);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord2iv;
        
        public static unsafe void TexCoord2iv(ref int v)
        {
            _glTexCoord2iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, void> _glTexCoord2s;
        
        public static unsafe void TexCoord2s(short s, short t)
        {
            _glTexCoord2s(s, t);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord2sv;
        
        public static unsafe void TexCoord2sv(ref short v)
        {
            _glTexCoord2sv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, void> _glTexCoord3d;
        
        public static unsafe void TexCoord3d(double s, double t, double r)
        {
            _glTexCoord3d(s, t, r);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord3dv;
        
        public static unsafe void TexCoord3dv(ref double v)
        {
            _glTexCoord3dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glTexCoord3f;
        
        public static unsafe void TexCoord3f(float s, float t, float r)
        {
            _glTexCoord3f(s, t, r);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord3fv;
        
        public static unsafe void TexCoord3fv(ref float v)
        {
            _glTexCoord3fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glTexCoord3i;
        
        public static unsafe void TexCoord3i(int s, int t, int r)
        {
            _glTexCoord3i(s, t, r);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord3iv;
        
        public static unsafe void TexCoord3iv(ref int v)
        {
            _glTexCoord3iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glTexCoord3s;
        
        public static unsafe void TexCoord3s(short s, short t, short r)
        {
            _glTexCoord3s(s, t, r);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord3sv;
        
        public static unsafe void TexCoord3sv(ref short v)
        {
            _glTexCoord3sv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, double, void> _glTexCoord4d;
        
        public static unsafe void TexCoord4d(double s, double t, double r, double q)
        {
            _glTexCoord4d(s, t, r, q);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord4dv;
        
        public static unsafe void TexCoord4dv(ref double v)
        {
            _glTexCoord4dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glTexCoord4f;
        
        public static unsafe void TexCoord4f(float s, float t, float r, float q)
        {
            _glTexCoord4f(s, t, r, q);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord4fv;
        
        public static unsafe void TexCoord4fv(ref float v)
        {
            _glTexCoord4fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glTexCoord4i;
        
        public static unsafe void TexCoord4i(int s, int t, int r, int q)
        {
            _glTexCoord4i(s, t, r, q);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord4iv;
        
        public static unsafe void TexCoord4iv(ref int v)
        {
            _glTexCoord4iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, short, void> _glTexCoord4s;
        
        public static unsafe void TexCoord4s(short s, short t, short r, short q)
        {
            _glTexCoord4s(s, t, r, q);
        }
        
        public static unsafe delegate*<IntPtr, void> _glTexCoord4sv;
        
        public static unsafe void TexCoord4sv(ref short v)
        {
            _glTexCoord4sv((IntPtr)v);
        }
        
        public static unsafe delegate*<TexCoordPointerType, uint, void> _glTexCoordP1ui;
        
        public static unsafe void TexCoordP1ui(TexCoordPointerType type, uint coords)
        {
            _glTexCoordP1ui(type, coords);
        }
        
        public static unsafe delegate*<TexCoordPointerType, IntPtr, void> _glTexCoordP1uiv;
        
        public static unsafe void TexCoordP1uiv(TexCoordPointerType type, ref uint coords)
        {
            _glTexCoordP1uiv(type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TexCoordPointerType, uint, void> _glTexCoordP2ui;
        
        public static unsafe void TexCoordP2ui(TexCoordPointerType type, uint coords)
        {
            _glTexCoordP2ui(type, coords);
        }
        
        public static unsafe delegate*<TexCoordPointerType, IntPtr, void> _glTexCoordP2uiv;
        
        public static unsafe void TexCoordP2uiv(TexCoordPointerType type, ref uint coords)
        {
            _glTexCoordP2uiv(type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TexCoordPointerType, uint, void> _glTexCoordP3ui;
        
        public static unsafe void TexCoordP3ui(TexCoordPointerType type, uint coords)
        {
            _glTexCoordP3ui(type, coords);
        }
        
        public static unsafe delegate*<TexCoordPointerType, IntPtr, void> _glTexCoordP3uiv;
        
        public static unsafe void TexCoordP3uiv(TexCoordPointerType type, ref uint coords)
        {
            _glTexCoordP3uiv(type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<TexCoordPointerType, uint, void> _glTexCoordP4ui;
        
        public static unsafe void TexCoordP4ui(TexCoordPointerType type, uint coords)
        {
            _glTexCoordP4ui(type, coords);
        }
        
        public static unsafe delegate*<TexCoordPointerType, IntPtr, void> _glTexCoordP4uiv;
        
        public static unsafe void TexCoordP4uiv(TexCoordPointerType type, ref uint coords)
        {
            _glTexCoordP4uiv(type, (IntPtr)coords);
        }
        
        public static unsafe delegate*<int, TexCoordPointerType, int, IntPtr, void> _glTexCoordPointer;
        
        public static unsafe void TexCoordPointer(int size, TexCoordPointerType type, int stride, IntPtr pointer)
        {
            _glTexCoordPointer(size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, float, void> _glTexEnvf;
        
        public static unsafe void TexEnvf(TextureEnvTarget target, TextureEnvParameter pname, float param)
        {
            _glTexEnvf(target, pname, param);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glTexEnvfv;
        
        public static unsafe void TexEnvfv(TextureEnvTarget target, TextureEnvParameter pname, ref float @params)
        {
            _glTexEnvfv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, int, void> _glTexEnvi;
        
        public static unsafe void TexEnvi(TextureEnvTarget target, TextureEnvParameter pname, int param)
        {
            _glTexEnvi(target, pname, param);
        }
        
        public static unsafe delegate*<TextureEnvTarget, TextureEnvParameter, IntPtr, void> _glTexEnviv;
        
        public static unsafe void TexEnviv(TextureEnvTarget target, TextureEnvParameter pname, ref int @params)
        {
            _glTexEnviv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, double, void> _glTexGend;
        
        public static unsafe void TexGend(TextureCoordName coord, TextureGenParameter pname, double param)
        {
            _glTexGend(coord, pname, param);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glTexGendv;
        
        public static unsafe void TexGendv(TextureCoordName coord, TextureGenParameter pname, ref double @params)
        {
            _glTexGendv(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, float, void> _glTexGenf;
        
        public static unsafe void TexGenf(TextureCoordName coord, TextureGenParameter pname, float param)
        {
            _glTexGenf(coord, pname, param);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glTexGenfv;
        
        public static unsafe void TexGenfv(TextureCoordName coord, TextureGenParameter pname, ref float @params)
        {
            _glTexGenfv(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, int, void> _glTexGeni;
        
        public static unsafe void TexGeni(TextureCoordName coord, TextureGenParameter pname, int param)
        {
            _glTexGeni(coord, pname, param);
        }
        
        public static unsafe delegate*<TextureCoordName, TextureGenParameter, IntPtr, void> _glTexGeniv;
        
        public static unsafe void TexGeniv(TextureCoordName coord, TextureGenParameter pname, ref int @params)
        {
            _glTexGeniv(coord, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexImage1D;
        
        public static unsafe void TexImage1D(TextureTarget target, int level, int internalformat, int width, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexImage1D(target, level, internalformat, width, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexImage2D;
        
        public static unsafe void TexImage2D(TextureTarget target, int level, int internalformat, int width, int height, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexImage2D(target, level, internalformat, width, height, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, byte, void> _glTexImage2DMultisample;
        
        public static unsafe void TexImage2DMultisample(TextureTarget target, int samples, InternalFormat internalformat, int width, int height, byte fixedsamplelocations)
        {
            _glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexImage3D;
        
        public static unsafe void TexImage3D(TextureTarget target, int level, int internalformat, int width, int height, int depth, int border, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, InternalFormat, int, int, int, byte, void> _glTexImage3DMultisample;
        
        public static unsafe void TexImage3DMultisample(TextureTarget target, int samples, InternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, IntPtr, void> _glTexParameterIiv;
        
        public static unsafe void TexParameterIiv(TextureTarget target, TextureParameterName pname, ref int @params)
        {
            _glTexParameterIiv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, IntPtr, void> _glTexParameterIuiv;
        
        public static unsafe void TexParameterIuiv(TextureTarget target, TextureParameterName pname, ref uint @params)
        {
            _glTexParameterIuiv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, float, void> _glTexParameterf;
        
        public static unsafe void TexParameterf(TextureTarget target, TextureParameterName pname, float param)
        {
            _glTexParameterf(target, pname, param);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, IntPtr, void> _glTexParameterfv;
        
        public static unsafe void TexParameterfv(TextureTarget target, TextureParameterName pname, ref float @params)
        {
            _glTexParameterfv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, int, void> _glTexParameteri;
        
        public static unsafe void TexParameteri(TextureTarget target, TextureParameterName pname, int param)
        {
            _glTexParameteri(target, pname, param);
        }
        
        public static unsafe delegate*<TextureTarget, TextureParameterName, IntPtr, void> _glTexParameteriv;
        
        public static unsafe void TexParameteriv(TextureTarget target, TextureParameterName pname, ref int @params)
        {
            _glTexParameteriv(target, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, void> _glTexStorage1D;
        
        public static unsafe void TexStorage1D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width)
        {
            _glTexStorage1D(target, levels, internalformat, width);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, void> _glTexStorage2D;
        
        public static unsafe void TexStorage2D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height)
        {
            _glTexStorage2D(target, levels, internalformat, width, height);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, byte, void> _glTexStorage2DMultisample;
        
        public static unsafe void TexStorage2DMultisample(TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, byte fixedsamplelocations)
        {
            _glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, int, void> _glTexStorage3D;
        
        public static unsafe void TexStorage3D(TextureTarget target, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
        {
            _glTexStorage3D(target, levels, internalformat, width, height, depth);
        }
        
        public static unsafe delegate*<TextureTarget, int, SizedInternalFormat, int, int, int, byte, void> _glTexStorage3DMultisample;
        
        public static unsafe void TexStorage3DMultisample(TextureTarget target, int samples, SizedInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexSubImage1D;
        
        public static unsafe void TexSubImage1D(TextureTarget target, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexSubImage1D(target, level, xoffset, width, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexSubImage2D;
        
        public static unsafe void TexSubImage2D(TextureTarget target, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<TextureTarget, int, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTexSubImage3D;
        
        public static unsafe void TexSubImage3D(TextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<void> _glTextureBarrier;
        
        public static unsafe void TextureBarrier()
        {
            _glTextureBarrier();
        }
        
        public static unsafe delegate*<uint, SizedInternalFormat, uint, void> _glTextureBuffer;
        
        public static unsafe void TextureBuffer(uint texture, SizedInternalFormat internalformat, uint buffer)
        {
            _glTextureBuffer(texture, internalformat, buffer);
        }
        
        public static unsafe delegate*<uint, SizedInternalFormat, uint, long, long, void> _glTextureBufferRange;
        
        public static unsafe void TextureBufferRange(uint texture, SizedInternalFormat internalformat, uint buffer, long offset, long size)
        {
            _glTextureBufferRange(texture, internalformat, buffer, offset, size);
        }
        
        public static unsafe delegate*<uint, TextureParameterName, IntPtr, void> _glTextureParameterIiv;
        
        public static unsafe void TextureParameterIiv(uint texture, TextureParameterName pname, ref int @params)
        {
            _glTextureParameterIiv(texture, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, TextureParameterName, IntPtr, void> _glTextureParameterIuiv;
        
        public static unsafe void TextureParameterIuiv(uint texture, TextureParameterName pname, ref uint @params)
        {
            _glTextureParameterIuiv(texture, pname, (IntPtr)@params);
        }
        
        public static unsafe delegate*<uint, TextureParameterName, float, void> _glTextureParameterf;
        
        public static unsafe void TextureParameterf(uint texture, TextureParameterName pname, float param)
        {
            _glTextureParameterf(texture, pname, param);
        }
        
        public static unsafe delegate*<uint, TextureParameterName, IntPtr, void> _glTextureParameterfv;
        
        public static unsafe void TextureParameterfv(uint texture, TextureParameterName pname, ref float param)
        {
            _glTextureParameterfv(texture, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, TextureParameterName, int, void> _glTextureParameteri;
        
        public static unsafe void TextureParameteri(uint texture, TextureParameterName pname, int param)
        {
            _glTextureParameteri(texture, pname, param);
        }
        
        public static unsafe delegate*<uint, TextureParameterName, IntPtr, void> _glTextureParameteriv;
        
        public static unsafe void TextureParameteriv(uint texture, TextureParameterName pname, ref int param)
        {
            _glTextureParameteriv(texture, pname, (IntPtr)param);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, void> _glTextureStorage1D;
        
        public static unsafe void TextureStorage1D(uint texture, int levels, SizedInternalFormat internalformat, int width)
        {
            _glTextureStorage1D(texture, levels, internalformat, width);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, int, void> _glTextureStorage2D;
        
        public static unsafe void TextureStorage2D(uint texture, int levels, SizedInternalFormat internalformat, int width, int height)
        {
            _glTextureStorage2D(texture, levels, internalformat, width, height);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, int, byte, void> _glTextureStorage2DMultisample;
        
        public static unsafe void TextureStorage2DMultisample(uint texture, int samples, SizedInternalFormat internalformat, int width, int height, byte fixedsamplelocations)
        {
            _glTextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, int, int, void> _glTextureStorage3D;
        
        public static unsafe void TextureStorage3D(uint texture, int levels, SizedInternalFormat internalformat, int width, int height, int depth)
        {
            _glTextureStorage3D(texture, levels, internalformat, width, height, depth);
        }
        
        public static unsafe delegate*<uint, int, SizedInternalFormat, int, int, int, byte, void> _glTextureStorage3DMultisample;
        
        public static unsafe void TextureStorage3DMultisample(uint texture, int samples, SizedInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
        {
            _glTextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
        }
        
        public static unsafe delegate*<uint, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTextureSubImage1D;
        
        public static unsafe void TextureSubImage1D(uint texture, int level, int xoffset, int width, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTextureSubImage1D(texture, level, xoffset, width, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTextureSubImage2D;
        
        public static unsafe void TextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, int, int, int, PixelFormat, PixelType, IntPtr, void> _glTextureSubImage3D;
        
        public static unsafe void TextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, PixelFormat format, PixelType type, IntPtr pixels)
        {
            _glTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (IntPtr)pixels);
        }
        
        public static unsafe delegate*<uint, TextureTarget, uint, SizedInternalFormat, uint, uint, uint, uint, void> _glTextureView;
        
        public static unsafe void TextureView(uint texture, TextureTarget target, uint origtexture, SizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
        {
            _glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glTransformFeedbackBufferBase;
        
        public static unsafe void TransformFeedbackBufferBase(uint xfb, uint index, uint buffer)
        {
            _glTransformFeedbackBufferBase(xfb, index, buffer);
        }
        
        public static unsafe delegate*<uint, uint, uint, long, long, void> _glTransformFeedbackBufferRange;
        
        public static unsafe void TransformFeedbackBufferRange(uint xfb, uint index, uint buffer, long offset, long size)
        {
            _glTransformFeedbackBufferRange(xfb, index, buffer, offset, size);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, TransformFeedbackBufferMode, void> _glTransformFeedbackVaryings;
        
        public static unsafe void TransformFeedbackVaryings(uint program, int count, out IntPtr varyings, TransformFeedbackBufferMode bufferMode)
        {
            _glTransformFeedbackVaryings(program, count, (IntPtr)varyings, bufferMode);
        }
        
        public static unsafe delegate*<double, double, double, void> _glTranslated;
        
        public static unsafe void Translated(double x, double y, double z)
        {
            _glTranslated(x, y, z);
        }
        
        public static unsafe delegate*<float, float, float, void> _glTranslatef;
        
        public static unsafe void Translatef(float x, float y, float z)
        {
            _glTranslatef(x, y, z);
        }
        
        public static unsafe delegate*<int, double, void> _glUniform1d;
        
        public static unsafe void Uniform1d(int location, double x)
        {
            _glUniform1d(location, x);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1dv;
        
        public static unsafe void Uniform1dv(int location, int count, out IntPtr value)
        {
            _glUniform1dv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, float, void> _glUniform1f;
        
        public static unsafe void Uniform1f(int location, float v0)
        {
            _glUniform1f(location, v0);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1fv;
        
        public static unsafe void Uniform1fv(int location, int count, out IntPtr value)
        {
            _glUniform1fv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, void> _glUniform1i;
        
        public static unsafe void Uniform1i(int location, int v0)
        {
            _glUniform1i(location, v0);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1iv;
        
        public static unsafe void Uniform1iv(int location, int count, out IntPtr value)
        {
            _glUniform1iv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, uint, void> _glUniform1ui;
        
        public static unsafe void Uniform1ui(int location, uint v0)
        {
            _glUniform1ui(location, v0);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform1uiv;
        
        public static unsafe void Uniform1uiv(int location, int count, out IntPtr value)
        {
            _glUniform1uiv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, double, double, void> _glUniform2d;
        
        public static unsafe void Uniform2d(int location, double x, double y)
        {
            _glUniform2d(location, x, y);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2dv;
        
        public static unsafe void Uniform2dv(int location, int count, out IntPtr value)
        {
            _glUniform2dv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, float, float, void> _glUniform2f;
        
        public static unsafe void Uniform2f(int location, float v0, float v1)
        {
            _glUniform2f(location, v0, v1);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2fv;
        
        public static unsafe void Uniform2fv(int location, int count, out IntPtr value)
        {
            _glUniform2fv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, int, void> _glUniform2i;
        
        public static unsafe void Uniform2i(int location, int v0, int v1)
        {
            _glUniform2i(location, v0, v1);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2iv;
        
        public static unsafe void Uniform2iv(int location, int count, out IntPtr value)
        {
            _glUniform2iv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, uint, uint, void> _glUniform2ui;
        
        public static unsafe void Uniform2ui(int location, uint v0, uint v1)
        {
            _glUniform2ui(location, v0, v1);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform2uiv;
        
        public static unsafe void Uniform2uiv(int location, int count, out IntPtr value)
        {
            _glUniform2uiv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, double, double, double, void> _glUniform3d;
        
        public static unsafe void Uniform3d(int location, double x, double y, double z)
        {
            _glUniform3d(location, x, y, z);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3dv;
        
        public static unsafe void Uniform3dv(int location, int count, out IntPtr value)
        {
            _glUniform3dv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, float, float, float, void> _glUniform3f;
        
        public static unsafe void Uniform3f(int location, float v0, float v1, float v2)
        {
            _glUniform3f(location, v0, v1, v2);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3fv;
        
        public static unsafe void Uniform3fv(int location, int count, out IntPtr value)
        {
            _glUniform3fv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glUniform3i;
        
        public static unsafe void Uniform3i(int location, int v0, int v1, int v2)
        {
            _glUniform3i(location, v0, v1, v2);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3iv;
        
        public static unsafe void Uniform3iv(int location, int count, out IntPtr value)
        {
            _glUniform3iv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, uint, uint, uint, void> _glUniform3ui;
        
        public static unsafe void Uniform3ui(int location, uint v0, uint v1, uint v2)
        {
            _glUniform3ui(location, v0, v1, v2);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform3uiv;
        
        public static unsafe void Uniform3uiv(int location, int count, out IntPtr value)
        {
            _glUniform3uiv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, double, double, double, double, void> _glUniform4d;
        
        public static unsafe void Uniform4d(int location, double x, double y, double z, double w)
        {
            _glUniform4d(location, x, y, z, w);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4dv;
        
        public static unsafe void Uniform4dv(int location, int count, out IntPtr value)
        {
            _glUniform4dv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, float, float, float, float, void> _glUniform4f;
        
        public static unsafe void Uniform4f(int location, float v0, float v1, float v2, float v3)
        {
            _glUniform4f(location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4fv;
        
        public static unsafe void Uniform4fv(int location, int count, out IntPtr value)
        {
            _glUniform4fv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, int, int, int, void> _glUniform4i;
        
        public static unsafe void Uniform4i(int location, int v0, int v1, int v2, int v3)
        {
            _glUniform4i(location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4iv;
        
        public static unsafe void Uniform4iv(int location, int count, out IntPtr value)
        {
            _glUniform4iv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, uint, uint, uint, uint, void> _glUniform4ui;
        
        public static unsafe void Uniform4ui(int location, uint v0, uint v1, uint v2, uint v3)
        {
            _glUniform4ui(location, v0, v1, v2, v3);
        }
        
        public static unsafe delegate*<int, int, IntPtr, void> _glUniform4uiv;
        
        public static unsafe void Uniform4uiv(int location, int count, out IntPtr value)
        {
            _glUniform4uiv(location, count, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glUniformBlockBinding;
        
        public static unsafe void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
        {
            _glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2dv;
        
        public static unsafe void UniformMatrix2dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2fv;
        
        public static unsafe void UniformMatrix2fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2x3dv;
        
        public static unsafe void UniformMatrix2x3dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2x3dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2x3fv;
        
        public static unsafe void UniformMatrix2x3fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2x3fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2x4dv;
        
        public static unsafe void UniformMatrix2x4dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2x4dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix2x4fv;
        
        public static unsafe void UniformMatrix2x4fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix2x4fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3dv;
        
        public static unsafe void UniformMatrix3dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3fv;
        
        public static unsafe void UniformMatrix3fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3x2dv;
        
        public static unsafe void UniformMatrix3x2dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3x2dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3x2fv;
        
        public static unsafe void UniformMatrix3x2fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3x2fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3x4dv;
        
        public static unsafe void UniformMatrix3x4dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3x4dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix3x4fv;
        
        public static unsafe void UniformMatrix3x4fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix3x4fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4dv;
        
        public static unsafe void UniformMatrix4dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4fv;
        
        public static unsafe void UniformMatrix4fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4x2dv;
        
        public static unsafe void UniformMatrix4x2dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4x2dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4x2fv;
        
        public static unsafe void UniformMatrix4x2fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4x2fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4x3dv;
        
        public static unsafe void UniformMatrix4x3dv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4x3dv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, int, byte, IntPtr, void> _glUniformMatrix4x3fv;
        
        public static unsafe void UniformMatrix4x3fv(int location, int count, byte transpose, out IntPtr value)
        {
            _glUniformMatrix4x3fv(location, count, transpose, (IntPtr)value);
        }
        
        public static unsafe delegate*<ShaderType, int, IntPtr, void> _glUniformSubroutinesuiv;
        
        public static unsafe void UniformSubroutinesuiv(ShaderType shadertype, int count, ref uint indices)
        {
            _glUniformSubroutinesuiv(shadertype, count, (IntPtr)indices);
        }
        
        public static unsafe delegate*<BufferTargetARB, byte> _glUnmapBuffer;
        
        public static unsafe byte UnmapBuffer(BufferTargetARB target)
        {
            return _glUnmapBuffer(target);
        }
        
        public static unsafe delegate*<uint, byte> _glUnmapNamedBuffer;
        
        public static unsafe byte UnmapNamedBuffer(uint buffer)
        {
            return _glUnmapNamedBuffer(buffer);
        }
        
        public static unsafe delegate*<uint, void> _glUseProgram;
        
        public static unsafe void UseProgram(uint program)
        {
            _glUseProgram(program);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glUseProgramStages;
        
        public static unsafe void UseProgramStages(uint pipeline, uint stages, uint program)
        {
            _glUseProgramStages(pipeline, stages, program);
        }
        
        public static unsafe delegate*<uint, void> _glValidateProgram;
        
        public static unsafe void ValidateProgram(uint program)
        {
            _glValidateProgram(program);
        }
        
        public static unsafe delegate*<uint, void> _glValidateProgramPipeline;
        
        public static unsafe void ValidateProgramPipeline(uint pipeline)
        {
            _glValidateProgramPipeline(pipeline);
        }
        
        public static unsafe delegate*<double, double, void> _glVertex2d;
        
        public static unsafe void Vertex2d(double x, double y)
        {
            _glVertex2d(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex2dv;
        
        public static unsafe void Vertex2dv(ref double v)
        {
            _glVertex2dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, void> _glVertex2f;
        
        public static unsafe void Vertex2f(float x, float y)
        {
            _glVertex2f(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex2fv;
        
        public static unsafe void Vertex2fv(ref float v)
        {
            _glVertex2fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, void> _glVertex2i;
        
        public static unsafe void Vertex2i(int x, int y)
        {
            _glVertex2i(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex2iv;
        
        public static unsafe void Vertex2iv(ref int v)
        {
            _glVertex2iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, void> _glVertex2s;
        
        public static unsafe void Vertex2s(short x, short y)
        {
            _glVertex2s(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex2sv;
        
        public static unsafe void Vertex2sv(ref short v)
        {
            _glVertex2sv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, void> _glVertex3d;
        
        public static unsafe void Vertex3d(double x, double y, double z)
        {
            _glVertex3d(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex3dv;
        
        public static unsafe void Vertex3dv(ref double v)
        {
            _glVertex3dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glVertex3f;
        
        public static unsafe void Vertex3f(float x, float y, float z)
        {
            _glVertex3f(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex3fv;
        
        public static unsafe void Vertex3fv(ref float v)
        {
            _glVertex3fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glVertex3i;
        
        public static unsafe void Vertex3i(int x, int y, int z)
        {
            _glVertex3i(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex3iv;
        
        public static unsafe void Vertex3iv(ref int v)
        {
            _glVertex3iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glVertex3s;
        
        public static unsafe void Vertex3s(short x, short y, short z)
        {
            _glVertex3s(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex3sv;
        
        public static unsafe void Vertex3sv(ref short v)
        {
            _glVertex3sv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, double, void> _glVertex4d;
        
        public static unsafe void Vertex4d(double x, double y, double z, double w)
        {
            _glVertex4d(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex4dv;
        
        public static unsafe void Vertex4dv(ref double v)
        {
            _glVertex4dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, float, void> _glVertex4f;
        
        public static unsafe void Vertex4f(float x, float y, float z, float w)
        {
            _glVertex4f(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex4fv;
        
        public static unsafe void Vertex4fv(ref float v)
        {
            _glVertex4fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glVertex4i;
        
        public static unsafe void Vertex4i(int x, int y, int z, int w)
        {
            _glVertex4i(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex4iv;
        
        public static unsafe void Vertex4iv(ref int v)
        {
            _glVertex4iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, short, void> _glVertex4s;
        
        public static unsafe void Vertex4s(short x, short y, short z, short w)
        {
            _glVertex4s(x, y, z, w);
        }
        
        public static unsafe delegate*<IntPtr, void> _glVertex4sv;
        
        public static unsafe void Vertex4sv(ref short v)
        {
            _glVertex4sv((IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glVertexArrayAttribBinding;
        
        public static unsafe void VertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex)
        {
            _glVertexArrayAttribBinding(vaobj, attribindex, bindingindex);
        }
        
        public static unsafe delegate*<uint, uint, int, VertexAttribType, byte, uint, void> _glVertexArrayAttribFormat;
        
        public static unsafe void VertexArrayAttribFormat(uint vaobj, uint attribindex, int size, VertexAttribType type, byte normalized, uint relativeoffset)
        {
            _glVertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
        }
        
        public static unsafe delegate*<uint, uint, int, VertexAttribIType, uint, void> _glVertexArrayAttribIFormat;
        
        public static unsafe void VertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, VertexAttribIType type, uint relativeoffset)
        {
            _glVertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
        }
        
        public static unsafe delegate*<uint, uint, int, VertexAttribLType, uint, void> _glVertexArrayAttribLFormat;
        
        public static unsafe void VertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, VertexAttribLType type, uint relativeoffset)
        {
            _glVertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glVertexArrayBindingDivisor;
        
        public static unsafe void VertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor)
        {
            _glVertexArrayBindingDivisor(vaobj, bindingindex, divisor);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexArrayElementBuffer;
        
        public static unsafe void VertexArrayElementBuffer(uint vaobj, uint buffer)
        {
            _glVertexArrayElementBuffer(vaobj, buffer);
        }
        
        public static unsafe delegate*<uint, uint, uint, long, int, void> _glVertexArrayVertexBuffer;
        
        public static unsafe void VertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, long offset, int stride)
        {
            _glVertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
        }
        
        public static unsafe delegate*<uint, uint, int, IntPtr, IntPtr, IntPtr, void> _glVertexArrayVertexBuffers;
        
        public static unsafe void VertexArrayVertexBuffers(uint vaobj, uint first, int count, ref uint buffers, ref long offsets, ref int strides)
        {
            _glVertexArrayVertexBuffers(vaobj, first, count, (IntPtr)buffers, (IntPtr)offsets, (IntPtr)strides);
        }
        
        public static unsafe delegate*<uint, double, void> _glVertexAttrib1d;
        
        public static unsafe void VertexAttrib1d(uint index, double x)
        {
            _glVertexAttrib1d(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib1dv;
        
        public static unsafe void VertexAttrib1dv(uint index, ref double v)
        {
            _glVertexAttrib1dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, void> _glVertexAttrib1f;
        
        public static unsafe void VertexAttrib1f(uint index, float x)
        {
            _glVertexAttrib1f(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib1fv;
        
        public static unsafe void VertexAttrib1fv(uint index, ref float v)
        {
            _glVertexAttrib1fv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, short, void> _glVertexAttrib1s;
        
        public static unsafe void VertexAttrib1s(uint index, short x)
        {
            _glVertexAttrib1s(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib1sv;
        
        public static unsafe void VertexAttrib1sv(uint index, ref short v)
        {
            _glVertexAttrib1sv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, double, double, void> _glVertexAttrib2d;
        
        public static unsafe void VertexAttrib2d(uint index, double x, double y)
        {
            _glVertexAttrib2d(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib2dv;
        
        public static unsafe void VertexAttrib2dv(uint index, ref double v)
        {
            _glVertexAttrib2dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, float, void> _glVertexAttrib2f;
        
        public static unsafe void VertexAttrib2f(uint index, float x, float y)
        {
            _glVertexAttrib2f(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib2fv;
        
        public static unsafe void VertexAttrib2fv(uint index, ref float v)
        {
            _glVertexAttrib2fv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, short, short, void> _glVertexAttrib2s;
        
        public static unsafe void VertexAttrib2s(uint index, short x, short y)
        {
            _glVertexAttrib2s(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib2sv;
        
        public static unsafe void VertexAttrib2sv(uint index, ref short v)
        {
            _glVertexAttrib2sv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, double, double, double, void> _glVertexAttrib3d;
        
        public static unsafe void VertexAttrib3d(uint index, double x, double y, double z)
        {
            _glVertexAttrib3d(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib3dv;
        
        public static unsafe void VertexAttrib3dv(uint index, ref double v)
        {
            _glVertexAttrib3dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, float, float, void> _glVertexAttrib3f;
        
        public static unsafe void VertexAttrib3f(uint index, float x, float y, float z)
        {
            _glVertexAttrib3f(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib3fv;
        
        public static unsafe void VertexAttrib3fv(uint index, ref float v)
        {
            _glVertexAttrib3fv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, short, short, short, void> _glVertexAttrib3s;
        
        public static unsafe void VertexAttrib3s(uint index, short x, short y, short z)
        {
            _glVertexAttrib3s(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib3sv;
        
        public static unsafe void VertexAttrib3sv(uint index, ref short v)
        {
            _glVertexAttrib3sv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4Nbv;
        
        public static unsafe void VertexAttrib4Nbv(uint index, ref sbyte v)
        {
            _glVertexAttrib4Nbv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4Niv;
        
        public static unsafe void VertexAttrib4Niv(uint index, ref int v)
        {
            _glVertexAttrib4Niv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4Nsv;
        
        public static unsafe void VertexAttrib4Nsv(uint index, ref short v)
        {
            _glVertexAttrib4Nsv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, byte, byte, byte, byte, void> _glVertexAttrib4Nub;
        
        public static unsafe void VertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w)
        {
            _glVertexAttrib4Nub(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4Nubv;
        
        public static unsafe void VertexAttrib4Nubv(uint index, ref byte v)
        {
            _glVertexAttrib4Nubv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4Nuiv;
        
        public static unsafe void VertexAttrib4Nuiv(uint index, ref uint v)
        {
            _glVertexAttrib4Nuiv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4Nusv;
        
        public static unsafe void VertexAttrib4Nusv(uint index, ref ushort v)
        {
            _glVertexAttrib4Nusv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4bv;
        
        public static unsafe void VertexAttrib4bv(uint index, ref sbyte v)
        {
            _glVertexAttrib4bv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, double, double, double, double, void> _glVertexAttrib4d;
        
        public static unsafe void VertexAttrib4d(uint index, double x, double y, double z, double w)
        {
            _glVertexAttrib4d(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4dv;
        
        public static unsafe void VertexAttrib4dv(uint index, ref double v)
        {
            _glVertexAttrib4dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, float, float, float, void> _glVertexAttrib4f;
        
        public static unsafe void VertexAttrib4f(uint index, float x, float y, float z, float w)
        {
            _glVertexAttrib4f(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4fv;
        
        public static unsafe void VertexAttrib4fv(uint index, ref float v)
        {
            _glVertexAttrib4fv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4iv;
        
        public static unsafe void VertexAttrib4iv(uint index, ref int v)
        {
            _glVertexAttrib4iv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, short, short, short, short, void> _glVertexAttrib4s;
        
        public static unsafe void VertexAttrib4s(uint index, short x, short y, short z, short w)
        {
            _glVertexAttrib4s(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4sv;
        
        public static unsafe void VertexAttrib4sv(uint index, ref short v)
        {
            _glVertexAttrib4sv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4ubv;
        
        public static unsafe void VertexAttrib4ubv(uint index, ref byte v)
        {
            _glVertexAttrib4ubv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4uiv;
        
        public static unsafe void VertexAttrib4uiv(uint index, ref uint v)
        {
            _glVertexAttrib4uiv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttrib4usv;
        
        public static unsafe void VertexAttrib4usv(uint index, ref ushort v)
        {
            _glVertexAttrib4usv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexAttribBinding;
        
        public static unsafe void VertexAttribBinding(uint attribindex, uint bindingindex)
        {
            _glVertexAttribBinding(attribindex, bindingindex);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexAttribDivisor;
        
        public static unsafe void VertexAttribDivisor(uint index, uint divisor)
        {
            _glVertexAttribDivisor(index, divisor);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribType, byte, uint, void> _glVertexAttribFormat;
        
        public static unsafe void VertexAttribFormat(uint attribindex, int size, VertexAttribType type, byte normalized, uint relativeoffset)
        {
            _glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
        }
        
        public static unsafe delegate*<uint, int, void> _glVertexAttribI1i;
        
        public static unsafe void VertexAttribI1i(uint index, int x)
        {
            _glVertexAttribI1i(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI1iv;
        
        public static unsafe void VertexAttribI1iv(uint index, ref int v)
        {
            _glVertexAttribI1iv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexAttribI1ui;
        
        public static unsafe void VertexAttribI1ui(uint index, uint x)
        {
            _glVertexAttribI1ui(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI1uiv;
        
        public static unsafe void VertexAttribI1uiv(uint index, ref uint v)
        {
            _glVertexAttribI1uiv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, int, void> _glVertexAttribI2i;
        
        public static unsafe void VertexAttribI2i(uint index, int x, int y)
        {
            _glVertexAttribI2i(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI2iv;
        
        public static unsafe void VertexAttribI2iv(uint index, ref int v)
        {
            _glVertexAttribI2iv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, uint, void> _glVertexAttribI2ui;
        
        public static unsafe void VertexAttribI2ui(uint index, uint x, uint y)
        {
            _glVertexAttribI2ui(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI2uiv;
        
        public static unsafe void VertexAttribI2uiv(uint index, ref uint v)
        {
            _glVertexAttribI2uiv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, int, int, void> _glVertexAttribI3i;
        
        public static unsafe void VertexAttribI3i(uint index, int x, int y, int z)
        {
            _glVertexAttribI3i(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI3iv;
        
        public static unsafe void VertexAttribI3iv(uint index, ref int v)
        {
            _glVertexAttribI3iv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, void> _glVertexAttribI3ui;
        
        public static unsafe void VertexAttribI3ui(uint index, uint x, uint y, uint z)
        {
            _glVertexAttribI3ui(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI3uiv;
        
        public static unsafe void VertexAttribI3uiv(uint index, ref uint v)
        {
            _glVertexAttribI3uiv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4bv;
        
        public static unsafe void VertexAttribI4bv(uint index, ref sbyte v)
        {
            _glVertexAttribI4bv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, int, int, int, void> _glVertexAttribI4i;
        
        public static unsafe void VertexAttribI4i(uint index, int x, int y, int z, int w)
        {
            _glVertexAttribI4i(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4iv;
        
        public static unsafe void VertexAttribI4iv(uint index, ref int v)
        {
            _glVertexAttribI4iv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4sv;
        
        public static unsafe void VertexAttribI4sv(uint index, ref short v)
        {
            _glVertexAttribI4sv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4ubv;
        
        public static unsafe void VertexAttribI4ubv(uint index, ref byte v)
        {
            _glVertexAttribI4ubv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, uint, uint, uint, uint, void> _glVertexAttribI4ui;
        
        public static unsafe void VertexAttribI4ui(uint index, uint x, uint y, uint z, uint w)
        {
            _glVertexAttribI4ui(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4uiv;
        
        public static unsafe void VertexAttribI4uiv(uint index, ref uint v)
        {
            _glVertexAttribI4uiv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribI4usv;
        
        public static unsafe void VertexAttribI4usv(uint index, ref ushort v)
        {
            _glVertexAttribI4usv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribIType, uint, void> _glVertexAttribIFormat;
        
        public static unsafe void VertexAttribIFormat(uint attribindex, int size, VertexAttribIType type, uint relativeoffset)
        {
            _glVertexAttribIFormat(attribindex, size, type, relativeoffset);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribIType, int, IntPtr, void> _glVertexAttribIPointer;
        
        public static unsafe void VertexAttribIPointer(uint index, int size, VertexAttribIType type, int stride, IntPtr pointer)
        {
            _glVertexAttribIPointer(index, size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, double, void> _glVertexAttribL1d;
        
        public static unsafe void VertexAttribL1d(uint index, double x)
        {
            _glVertexAttribL1d(index, x);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL1dv;
        
        public static unsafe void VertexAttribL1dv(uint index, ref double v)
        {
            _glVertexAttribL1dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, double, double, void> _glVertexAttribL2d;
        
        public static unsafe void VertexAttribL2d(uint index, double x, double y)
        {
            _glVertexAttribL2d(index, x, y);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL2dv;
        
        public static unsafe void VertexAttribL2dv(uint index, ref double v)
        {
            _glVertexAttribL2dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, double, double, double, void> _glVertexAttribL3d;
        
        public static unsafe void VertexAttribL3d(uint index, double x, double y, double z)
        {
            _glVertexAttribL3d(index, x, y, z);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL3dv;
        
        public static unsafe void VertexAttribL3dv(uint index, ref double v)
        {
            _glVertexAttribL3dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, double, double, double, double, void> _glVertexAttribL4d;
        
        public static unsafe void VertexAttribL4d(uint index, double x, double y, double z, double w)
        {
            _glVertexAttribL4d(index, x, y, z, w);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glVertexAttribL4dv;
        
        public static unsafe void VertexAttribL4dv(uint index, ref double v)
        {
            _glVertexAttribL4dv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribLType, uint, void> _glVertexAttribLFormat;
        
        public static unsafe void VertexAttribLFormat(uint attribindex, int size, VertexAttribLType type, uint relativeoffset)
        {
            _glVertexAttribLFormat(attribindex, size, type, relativeoffset);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribLType, int, IntPtr, void> _glVertexAttribLPointer;
        
        public static unsafe void VertexAttribLPointer(uint index, int size, VertexAttribLType type, int stride, IntPtr pointer)
        {
            _glVertexAttribLPointer(index, size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, uint, void> _glVertexAttribP1ui;
        
        public static unsafe void VertexAttribP1ui(uint index, VertexAttribPointerType type, byte normalized, uint value)
        {
            _glVertexAttribP1ui(index, type, normalized, value);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, IntPtr, void> _glVertexAttribP1uiv;
        
        public static unsafe void VertexAttribP1uiv(uint index, VertexAttribPointerType type, byte normalized, ref uint value)
        {
            _glVertexAttribP1uiv(index, type, normalized, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, uint, void> _glVertexAttribP2ui;
        
        public static unsafe void VertexAttribP2ui(uint index, VertexAttribPointerType type, byte normalized, uint value)
        {
            _glVertexAttribP2ui(index, type, normalized, value);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, IntPtr, void> _glVertexAttribP2uiv;
        
        public static unsafe void VertexAttribP2uiv(uint index, VertexAttribPointerType type, byte normalized, ref uint value)
        {
            _glVertexAttribP2uiv(index, type, normalized, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, uint, void> _glVertexAttribP3ui;
        
        public static unsafe void VertexAttribP3ui(uint index, VertexAttribPointerType type, byte normalized, uint value)
        {
            _glVertexAttribP3ui(index, type, normalized, value);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, IntPtr, void> _glVertexAttribP3uiv;
        
        public static unsafe void VertexAttribP3uiv(uint index, VertexAttribPointerType type, byte normalized, ref uint value)
        {
            _glVertexAttribP3uiv(index, type, normalized, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, uint, void> _glVertexAttribP4ui;
        
        public static unsafe void VertexAttribP4ui(uint index, VertexAttribPointerType type, byte normalized, uint value)
        {
            _glVertexAttribP4ui(index, type, normalized, value);
        }
        
        public static unsafe delegate*<uint, VertexAttribPointerType, byte, IntPtr, void> _glVertexAttribP4uiv;
        
        public static unsafe void VertexAttribP4uiv(uint index, VertexAttribPointerType type, byte normalized, ref uint value)
        {
            _glVertexAttribP4uiv(index, type, normalized, (IntPtr)value);
        }
        
        public static unsafe delegate*<uint, int, VertexAttribPointerType, byte, int, IntPtr, void> _glVertexAttribPointer;
        
        public static unsafe void VertexAttribPointer(uint index, int size, VertexAttribPointerType type, byte normalized, int stride, IntPtr pointer)
        {
            _glVertexAttribPointer(index, size, type, normalized, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<uint, uint, void> _glVertexBindingDivisor;
        
        public static unsafe void VertexBindingDivisor(uint bindingindex, uint divisor)
        {
            _glVertexBindingDivisor(bindingindex, divisor);
        }
        
        public static unsafe delegate*<VertexPointerType, uint, void> _glVertexP2ui;
        
        public static unsafe void VertexP2ui(VertexPointerType type, uint value)
        {
            _glVertexP2ui(type, value);
        }
        
        public static unsafe delegate*<VertexPointerType, IntPtr, void> _glVertexP2uiv;
        
        public static unsafe void VertexP2uiv(VertexPointerType type, ref uint value)
        {
            _glVertexP2uiv(type, (IntPtr)value);
        }
        
        public static unsafe delegate*<VertexPointerType, uint, void> _glVertexP3ui;
        
        public static unsafe void VertexP3ui(VertexPointerType type, uint value)
        {
            _glVertexP3ui(type, value);
        }
        
        public static unsafe delegate*<VertexPointerType, IntPtr, void> _glVertexP3uiv;
        
        public static unsafe void VertexP3uiv(VertexPointerType type, ref uint value)
        {
            _glVertexP3uiv(type, (IntPtr)value);
        }
        
        public static unsafe delegate*<VertexPointerType, uint, void> _glVertexP4ui;
        
        public static unsafe void VertexP4ui(VertexPointerType type, uint value)
        {
            _glVertexP4ui(type, value);
        }
        
        public static unsafe delegate*<VertexPointerType, IntPtr, void> _glVertexP4uiv;
        
        public static unsafe void VertexP4uiv(VertexPointerType type, ref uint value)
        {
            _glVertexP4uiv(type, (IntPtr)value);
        }
        
        public static unsafe delegate*<int, VertexPointerType, int, IntPtr, void> _glVertexPointer;
        
        public static unsafe void VertexPointer(int size, VertexPointerType type, int stride, IntPtr pointer)
        {
            _glVertexPointer(size, type, stride, (IntPtr)pointer);
        }
        
        public static unsafe delegate*<int, int, int, int, void> _glViewport;
        
        public static unsafe void Viewport(int x, int y, int width, int height)
        {
            _glViewport(x, y, width, height);
        }
        
        public static unsafe delegate*<uint, int, IntPtr, void> _glViewportArrayv;
        
        public static unsafe void ViewportArrayv(uint first, int count, ref float v)
        {
            _glViewportArrayv(first, count, (IntPtr)v);
        }
        
        public static unsafe delegate*<uint, float, float, float, float, void> _glViewportIndexedf;
        
        public static unsafe void ViewportIndexedf(uint index, float x, float y, float w, float h)
        {
            _glViewportIndexedf(index, x, y, w, h);
        }
        
        public static unsafe delegate*<uint, IntPtr, void> _glViewportIndexedfv;
        
        public static unsafe void ViewportIndexedfv(uint index, ref float v)
        {
            _glViewportIndexedfv(index, (IntPtr)v);
        }
        
        public static unsafe delegate*<IntPtr, uint, ulong, void> _glWaitSync;
        
        public static unsafe void WaitSync(IntPtr sync, uint flags, ulong timeout)
        {
            _glWaitSync(sync, flags, timeout);
        }
        
        public static unsafe delegate*<double, double, void> _glWindowPos2d;
        
        public static unsafe void WindowPos2d(double x, double y)
        {
            _glWindowPos2d(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2dv;
        
        public static unsafe void WindowPos2dv(ref double v)
        {
            _glWindowPos2dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, void> _glWindowPos2f;
        
        public static unsafe void WindowPos2f(float x, float y)
        {
            _glWindowPos2f(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2fv;
        
        public static unsafe void WindowPos2fv(ref float v)
        {
            _glWindowPos2fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, void> _glWindowPos2i;
        
        public static unsafe void WindowPos2i(int x, int y)
        {
            _glWindowPos2i(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2iv;
        
        public static unsafe void WindowPos2iv(ref int v)
        {
            _glWindowPos2iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, void> _glWindowPos2s;
        
        public static unsafe void WindowPos2s(short x, short y)
        {
            _glWindowPos2s(x, y);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos2sv;
        
        public static unsafe void WindowPos2sv(ref short v)
        {
            _glWindowPos2sv((IntPtr)v);
        }
        
        public static unsafe delegate*<double, double, double, void> _glWindowPos3d;
        
        public static unsafe void WindowPos3d(double x, double y, double z)
        {
            _glWindowPos3d(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3dv;
        
        public static unsafe void WindowPos3dv(ref double v)
        {
            _glWindowPos3dv((IntPtr)v);
        }
        
        public static unsafe delegate*<float, float, float, void> _glWindowPos3f;
        
        public static unsafe void WindowPos3f(float x, float y, float z)
        {
            _glWindowPos3f(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3fv;
        
        public static unsafe void WindowPos3fv(ref float v)
        {
            _glWindowPos3fv((IntPtr)v);
        }
        
        public static unsafe delegate*<int, int, int, void> _glWindowPos3i;
        
        public static unsafe void WindowPos3i(int x, int y, int z)
        {
            _glWindowPos3i(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3iv;
        
        public static unsafe void WindowPos3iv(ref int v)
        {
            _glWindowPos3iv((IntPtr)v);
        }
        
        public static unsafe delegate*<short, short, short, void> _glWindowPos3s;
        
        public static unsafe void WindowPos3s(short x, short y, short z)
        {
            _glWindowPos3s(x, y, z);
        }
        
        public static unsafe delegate*<IntPtr, void> _glWindowPos3sv;
        
        public static unsafe void WindowPos3sv(ref short v)
        {
            _glWindowPos3sv((IntPtr)v);
        }
    }
}
