//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace Dissonance.Framework.Audio
{
    using System.Runtime.InteropServices;
    
    public static partial class ALC
    {
        /// <summary>
        /// Create and attach a context to the given device.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcCreateContext", CallingConvention = CallingConvention.Cdecl)]
        internal static unsafe extern IntPtr CreateContext(IntPtr device, int* attrlist);
        
        /// <summary>
        /// Makes the given context the active process-wide context. Passing NULL clears
        /// the active context.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcMakeContextCurrent", CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.I1)]
        public static extern bool MakeContextCurrent(IntPtr context);
        
        /// <summary>
        /// Resumes processing updates for the given context.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcProcessContext", CallingConvention = CallingConvention.Cdecl)]
        public static extern void ProcessContext(IntPtr context);
        
        /// <summary>
        /// Suspends updates for the given context.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcSuspendContext", CallingConvention = CallingConvention.Cdecl)]
        public static extern void SuspendContext(IntPtr context);
        
        /// <summary>
        /// Remove a context from its device and destroys it.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcDestroyContext", CallingConvention = CallingConvention.Cdecl)]
        public static extern void DestroyContext(IntPtr context);
        
        /// <summary>
        /// Returns the currently active context.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcGetCurrentContext", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr GetCurrentContext();
        
        /// <summary>
        /// Returns the device that a particular context is attached to.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcGetContextsDevice", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr GetContextsDevice(IntPtr context);
        
        /// <summary>
        /// Opens the named playback device.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcOpenDevice", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr OpenDevice([MarshalAs(UnmanagedType.LPStr)]
        string devicename);
        
        /// <summary>
        /// Closes the given playback device.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcCloseDevice", CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.I1)]
        public static extern bool CloseDevice(IntPtr device);
        
        /// <summary>
        /// Obtain the most recent Device error.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcGetError", CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetError(IntPtr device);
        
        /// <summary>
        /// Query for the presence of an extension on the device. Pass a NULL device to
        /// query a device-inspecific extension.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcIsExtensionPresent", CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.I1)]
        public static extern bool IsExtensionPresent(IntPtr device, [MarshalAs(UnmanagedType.LPStr)]
        string extname);
        
        /// <summary>
        /// Retrieve the address of a function. Given a non-NULL device, the returned
        /// function may be device-specific.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcGetProcAddress", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr GetProcAddress(IntPtr device, [MarshalAs(UnmanagedType.LPStr)]
        string funcname);
        
        /// <summary>
        /// Retrieve the value of an enum. Given a non-NULL device, the returned value
        /// may be device-specific.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcGetEnumValue", CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetEnumValue(IntPtr device, [MarshalAs(UnmanagedType.LPStr)]
        string enumname);
        
        /// <summary>
        /// Returns information about the device, and error strings.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcGetString", CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.LPStr)]
        public static extern string GetString(IntPtr device, int param);
        
        /// <summary>
        /// Returns information about the device and the version of OpenAL.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcGetIntegerv", CallingConvention = CallingConvention.Cdecl)]
        public static extern void GetInteger(IntPtr device, int param, int size, int[] values);
        
        /// <summary>
        /// Opens the named capture device with the given frequency, format, and buffer
        /// size.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcCaptureOpenDevice", CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr CaptureOpenDevice([MarshalAs(UnmanagedType.LPStr)]
        string devicename, uint frequency, int format, int buffersize);
        
        /// <summary>
        /// Closes the given capture device.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcCaptureCloseDevice", CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.I1)]
        public static extern bool CaptureCloseDevice(IntPtr device);
        
        /// <summary>
        /// Starts capturing samples into the device buffer.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcCaptureStart", CallingConvention = CallingConvention.Cdecl)]
        public static extern void CaptureStart(IntPtr device);
        
        /// <summary>
        /// Stops capturing samples. Samples in the device buffer remain available.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcCaptureStop", CallingConvention = CallingConvention.Cdecl)]
        public static extern void CaptureStop(IntPtr device);
        
        /// <summary>
        /// Reads samples from the device buffer.
        /// </summary>
        [DllImport(Library, EntryPoint = "alcCaptureSamples", CallingConvention = CallingConvention.Cdecl)]
        public static extern void CaptureSamples(IntPtr device, IntPtr buffer, int samples);
    }
}
