using System;
using System.Runtime.InteropServices;
using UFP = System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute;
using CC = System.Runtime.InteropServices.CallingConvention;

namespace Dissonance.Framework.OpenGL
{
	public static partial class GLDirect
	{
		#region OpenGL 1.0 + OpenGL 1.1

		[UFP(CC.StdCall)] public delegate void ArrayElementExtFunc(int i);
		[UFP(CC.StdCall)] public delegate void DrawArraysExtFunc(uint mode,int first,int count);
		[UFP(CC.StdCall)] public delegate void VertexPointerExtFunc(int size,uint type,int stride,int count,IntPtr pointer);
		[UFP(CC.StdCall)] public delegate void NormalPointerExtFunc(uint type,int stride,int count,IntPtr pointer);
		[UFP(CC.StdCall)] public delegate void ColorPointerExtFunc(int size,uint type,int stride,int count,IntPtr pointer);
		[UFP(CC.StdCall)] public delegate void IndexPointerExtFunc(uint type,int stride,int count,IntPtr pointer);
		[UFP(CC.StdCall)] public delegate void TexCoordPointerExtFunc(int size,uint type,int stride,int count,IntPtr pointer);
		[UFP(CC.StdCall)] public delegate void EdgeFlagPointerExtFunc(int stride,int count,[In] [MarshalAs(UnmanagedType.LPStr)] string pointer);
		[UFP(CC.StdCall)] public delegate void GetPointerVExtFunc(uint pname,IntPtr[] parameters);
		[UFP(CC.StdCall)] public delegate void ArrayElementArrayExtFunc(uint mode,int count,IntPtr pi);
		[UFP(CC.StdCall)] public delegate void DrawRangeElementsWinFunc(uint mode,uint start,uint end,int count,uint type,IntPtr indices);
		[UFP(CC.StdCall)] public delegate void AddSwapHintRectWinFunc(int x,int y,int width,int height);
		[UFP(CC.StdCall)] public delegate void ColorTableExtFunc(uint target,uint internalFormat,int width,uint format,uint type,IntPtr data);
		[UFP(CC.StdCall)] public delegate void ColorSubtableExtFunc(uint target,int start,int count,uint format,uint type,IntPtr data);
		[UFP(CC.StdCall)] public delegate void GetColorTableExtFunc(uint target,uint format,uint type,IntPtr data);
		[UFP(CC.StdCall)] public delegate void GetColorTableParameterIVExtFunc(uint target,uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void GetColorTableParameterFVExtFunc(uint target,uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void AccumFunc(uint op,float value);
		[UFP(CC.StdCall)] public delegate void AlphaFuncFunc(uint func,float alpha);
		[UFP(CC.StdCall)] public delegate byte AreTexturesResidentFunc(int n,uint[] textures,IntPtr residences);
		[UFP(CC.StdCall)] public delegate void ArrayElementFunc(int i);
		[UFP(CC.StdCall)] public delegate void BeginFunc(uint mode);
		[UFP(CC.StdCall)] public delegate void BindTextureFunc(uint target,uint texture);
		[UFP(CC.StdCall)] public delegate void BitmapFunc(int width,int height,float xorig,float yorig,float xmove,float ymove,[In] [MarshalAs(UnmanagedType.LPStr)] string bitmap);
		[UFP(CC.StdCall)] public delegate void BlendFuncFunc(uint sfactor,uint dfactor);
		[UFP(CC.StdCall)] public delegate void CallListFunc(uint list);
		[UFP(CC.StdCall)] public delegate void CallListsFunc(int n,uint type,IntPtr lists);
		[UFP(CC.StdCall)] public delegate void ClearFunc(uint mask);
		[UFP(CC.StdCall)] public delegate void ClearAccumFunc(float red,float green,float blue,float alpha);
		[UFP(CC.StdCall)] public delegate void ClearColorFunc(float red,float green,float blue,float alpha);
		[UFP(CC.StdCall)] public delegate void ClearDepthFunc(double depth);
		[UFP(CC.StdCall)] public delegate void ClearIndexFunc(float c);
		[UFP(CC.StdCall)] public delegate void ClearStencilFunc(int s);
		[UFP(CC.StdCall)] public delegate void ClipPlaneFunc(uint plane,double[] equation);
		[UFP(CC.StdCall)] public delegate void Color3bFunc(sbyte red,sbyte green,sbyte blue);
		[UFP(CC.StdCall)] public delegate void Color3bvFunc(sbyte[] v);
		[UFP(CC.StdCall)] public delegate void Color3dFunc(double red,double green,double blue);
		[UFP(CC.StdCall)] public delegate void Color3dvFunc(double[] v);
		[UFP(CC.StdCall)] public delegate void Color3fFunc(float red,float green,float blue);
		[UFP(CC.StdCall)] public delegate void Color3fvFunc(float[] v);
		[UFP(CC.StdCall)] public delegate void Color3iFunc(int red,int green,int blue);
		[UFP(CC.StdCall)] public delegate void Color3ivFunc(int[] v);
		[UFP(CC.StdCall)] public delegate void Color3sFunc(short red,short green,short blue);
		[UFP(CC.StdCall)] public delegate void Color3svFunc(short[] v);
		[UFP(CC.StdCall)] public delegate void Color3ubFunc(byte red,byte green,byte blue);
		[UFP(CC.StdCall)] public delegate void Color3ubvFunc(byte[] v);
		[UFP(CC.StdCall)] public delegate void Color3uiFunc(uint red,uint green,uint blue);
		[UFP(CC.StdCall)] public delegate void Color3uivFunc(uint[] v);
		[UFP(CC.StdCall)] public delegate void Color3usFunc(ushort red,ushort green,ushort blue);
		[UFP(CC.StdCall)] public delegate void Color3usvFunc(ushort[] v);
		[UFP(CC.StdCall)] public delegate void Color4bFunc(sbyte red,sbyte green,sbyte blue,sbyte alpha);
		[UFP(CC.StdCall)] public delegate void Color4bvFunc(sbyte[] v);
		[UFP(CC.StdCall)] public delegate void Color4dFunc(double red,double green,double blue,double alpha);
		[UFP(CC.StdCall)] public delegate void Color4dvFunc(double[] v);
		[UFP(CC.StdCall)] public delegate void Color4fFunc(float red,float green,float blue,float alpha);
		[UFP(CC.StdCall)] public delegate void Color4fvFunc(float[] v);
		[UFP(CC.StdCall)] public delegate void Color4iFunc(int red,int green,int blue,int alpha);
		[UFP(CC.StdCall)] public delegate void Color4ivFunc(int[] v);
		[UFP(CC.StdCall)] public delegate void Color4sFunc(short red,short green,short blue,short alpha);
		[UFP(CC.StdCall)] public delegate void Color4svFunc(short[] v);
		[UFP(CC.StdCall)] public delegate void Color4ubFunc(byte red,byte green,byte blue,byte alpha);
		[UFP(CC.StdCall)] public delegate void Color4ubvFunc(byte[] v);
		[UFP(CC.StdCall)] public delegate void Color4uiFunc(uint red,uint green,uint blue,uint alpha);
		[UFP(CC.StdCall)] public delegate void Color4uivFunc(uint[] v);
		[UFP(CC.StdCall)] public delegate void Color4usFunc(ushort red,ushort green,ushort blue,ushort alpha);
		[UFP(CC.StdCall)] public delegate void Color4usvFunc(ushort[] v);
		[UFP(CC.StdCall)] public delegate void ColorMaskFunc(byte red,byte green,byte blue,byte alpha);
		[UFP(CC.StdCall)] public delegate void ColorMaterialFunc(uint face,uint mode);
		[UFP(CC.StdCall)] public delegate void ColorPointerFunc(int size,uint type,int stride,IntPtr pointer);
		[UFP(CC.StdCall)] public delegate void CopyPixelsFunc(int x,int y,int width,int height,uint type);
		[UFP(CC.StdCall)] public delegate void CopyTexImage1DFunc(uint target,int level,uint internalFormat,int x,int y,int width,int border);
		[UFP(CC.StdCall)] public delegate void CopyTexImage2DFunc(uint target,int level,uint internalFormat,int x,int y,int width,int height,int border);
		[UFP(CC.StdCall)] public delegate void CopyTexSubImage1DFunc(uint target,int level,int xoffset,int x,int y,int width);
		[UFP(CC.StdCall)] public delegate void CopyTexSubImage2DFunc(uint target,int level,int xoffset,int yoffset,int x,int y,int width,int height);
		[UFP(CC.StdCall)] public delegate void CullFaceFunc(uint mode);
		[UFP(CC.StdCall)] public delegate void DeleteListsFunc(uint list,int range);
		[UFP(CC.StdCall)] public delegate void DeleteTexturesFunc(int n,uint[] textures);
		[UFP(CC.StdCall)] public delegate void DepthFuncFunc(uint func);
		[UFP(CC.StdCall)] public delegate void DepthMaskFunc(byte flag);
		[UFP(CC.StdCall)] public delegate void DepthRangeFunc(double zNear,double zFar);
		[UFP(CC.StdCall)] public delegate void DisableFunc(uint cap);
		[UFP(CC.StdCall)] public delegate void DisableClientStateFunc(uint array);
		[UFP(CC.StdCall)] public delegate void DrawArraysFunc(uint mode,int first,int count);
		[UFP(CC.StdCall)] public delegate void DrawBufferFunc(uint mode);
		[UFP(CC.StdCall)] public delegate void DrawElementsFunc(uint mode,int count,uint type,IntPtr indices);
		[UFP(CC.StdCall)] public delegate void DrawPixelsFunc(int width,int height,uint format,uint type,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void EdgeFlagFunc(byte flag);
		[UFP(CC.StdCall)] public delegate void EdgeFlagPointerFunc(int stride,IntPtr pointer);
		[UFP(CC.StdCall)] public delegate void EdgeFlagvFunc([In] [MarshalAs(UnmanagedType.LPStr)] string flag);
		[UFP(CC.StdCall)] public delegate void EnableFunc(uint cap);
		[UFP(CC.StdCall)] public delegate void EnableClientStateFunc(uint array);
		[UFP(CC.StdCall)] public delegate void EndFunc();
		[UFP(CC.StdCall)] public delegate void EndListFunc();
		[UFP(CC.StdCall)] public delegate void EvalCoord1dFunc(double u);
		[UFP(CC.StdCall)] public delegate void EvalCoord1dvFunc(double[] u);
		[UFP(CC.StdCall)] public delegate void EvalCoord1fFunc(float u);
		[UFP(CC.StdCall)] public delegate void EvalCoord1fvFunc(float[] u);
		[UFP(CC.StdCall)] public delegate void EvalCoord2dFunc(double u,double v);
		[UFP(CC.StdCall)] public delegate void EvalCoord2dvFunc(double[] u);
		[UFP(CC.StdCall)] public delegate void EvalCoord2fFunc(float u,float v);
		[UFP(CC.StdCall)] public delegate void EvalCoord2fvFunc(float[] u);
		[UFP(CC.StdCall)] public delegate void EvalMesh1Func(uint mode,int i1,int i2);
		[UFP(CC.StdCall)] public delegate void EvalMesh2Func(uint mode,int i1,int i2,int j1,int j2);
		[UFP(CC.StdCall)] public delegate void EvalPoint1Func(int i);
		[UFP(CC.StdCall)] public delegate void EvalPoint2Func(int i,int j);
		[UFP(CC.StdCall)] public delegate void FeedbackBufferFunc(int size,uint type,float[] buffer);
		[UFP(CC.StdCall)] public delegate void FinishFunc();
		[UFP(CC.StdCall)] public delegate void FlushFunc();
		[UFP(CC.StdCall)] public delegate void FogfFunc(uint pname,float param);
		[UFP(CC.StdCall)] public delegate void FogfvFunc(uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void FogiFunc(uint pname,int param);
		[UFP(CC.StdCall)] public delegate void FogivFunc(uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void FrontFaceFunc(uint mode);
		[UFP(CC.StdCall)] public delegate void FrustumFunc(double left,double right,double bottom,double top,double zNear,double zFar);
		[UFP(CC.StdCall)] public delegate uint GenListsFunc(int range);
		[UFP(CC.StdCall)] public delegate void GenTexturesFunc(int n,ref uint textures);
		[UFP(CC.StdCall)] public delegate void GetBooleanvFunc(uint pname,IntPtr parameters);
		[UFP(CC.StdCall)] public delegate void GetClipPlaneFunc(uint plane,double[] equation);
		[UFP(CC.StdCall)] public delegate void GetDoublevFunc(uint pname,double[] parameters);
		[UFP(CC.StdCall)] public delegate uint GetErrorFunc();
		[UFP(CC.StdCall)] public delegate void GetFloatvFunc(uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void GetIntegervFunc(uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void GetLightfvFunc(uint light,uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void GetLightivFunc(uint light,uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void GetMapdvFunc(uint target,uint query,double[] v);
		[UFP(CC.StdCall)] public delegate void GetMapfvFunc(uint target,uint query,float[] v);
		[UFP(CC.StdCall)] public delegate void GetMapivFunc(uint target,uint query,int[] v);
		[UFP(CC.StdCall)] public delegate void GetMaterialfvFunc(uint face,uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void GetMaterialivFunc(uint face,uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void GetPixelMapfvFunc(uint map,float[] values);
		[UFP(CC.StdCall)] public delegate void GetPixelMapuivFunc(uint map,uint[] values);
		[UFP(CC.StdCall)] public delegate void GetPixelMapusvFunc(uint map,ushort[] values);
		[UFP(CC.StdCall)] public delegate void GetPointervFunc(uint pname,ref IntPtr parameters);
		[UFP(CC.StdCall)] public delegate void GetPolygonStippleFunc(IntPtr mask);
		[UFP(CC.StdCall)] public delegate void GetTexEnvfvFunc(uint target,uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void GetTexEnvivFunc(uint target,uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void GetTexGendvFunc(uint coord,uint pname,double[] parameters);
		[UFP(CC.StdCall)] public delegate void GetTexGenfvFunc(uint coord,uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void GetTexGenivFunc(uint coord,uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void GetTexImageFunc(uint target,int level,uint format,uint type,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void GetTexLevelParameterfvFunc(uint target,int level,uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void GetTexLevelParameterivFunc(uint target,int level,uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void GetTexParameterfvFunc(uint target,uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void GetTexParameterivFunc(uint target,uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void HintFunc(uint target,uint mode);
		[UFP(CC.StdCall)] public delegate void IndexMaskFunc(uint mask);
		[UFP(CC.StdCall)] public delegate void IndexPointerFunc(uint type,int stride,IntPtr pointer);
		[UFP(CC.StdCall)] public delegate void IndexdFunc(double c);
		[UFP(CC.StdCall)] public delegate void IndexdvFunc(double[] c);
		[UFP(CC.StdCall)] public delegate void IndexfFunc(float c);
		[UFP(CC.StdCall)] public delegate void IndexfvFunc(float[] c);
		[UFP(CC.StdCall)] public delegate void IndexiFunc(int c);
		[UFP(CC.StdCall)] public delegate void IndexivFunc(int[] c);
		[UFP(CC.StdCall)] public delegate void IndexsFunc(short c);
		[UFP(CC.StdCall)] public delegate void IndexsvFunc(short[] c);
		[UFP(CC.StdCall)] public delegate void IndexubFunc(byte c);
		[UFP(CC.StdCall)] public delegate void IndexubvFunc([In] [MarshalAs(UnmanagedType.LPStr)] string c);
		[UFP(CC.StdCall)] public delegate void InitNamesFunc();
		[UFP(CC.StdCall)] public delegate void InterleavedArraysFunc(uint format,int stride,IntPtr pointer);
		[UFP(CC.StdCall)] public delegate byte IsEnabledFunc(uint cap);
		[UFP(CC.StdCall)] public delegate byte IsListFunc(uint list);
		[UFP(CC.StdCall)] public delegate byte IsTextureFunc(uint texture);
		[UFP(CC.StdCall)] public delegate void LightModelfFunc(uint pname,float param);
		[UFP(CC.StdCall)] public delegate void LightModelfvFunc(uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void LightModeliFunc(uint pname,int param);
		[UFP(CC.StdCall)] public delegate void LightModelivFunc(uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void LightfFunc(uint light,uint pname,float param);
		[UFP(CC.StdCall)] public delegate void LightfvFunc(uint light,uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void LightiFunc(uint light,uint pname,int param);
		[UFP(CC.StdCall)] public delegate void LightivFunc(uint light,uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void LineStippleFunc(int factor,ushort pattern);
		[UFP(CC.StdCall)] public delegate void LineWidthFunc(float width);
		[UFP(CC.StdCall)] public delegate void ListBaseFunc(uint b);
		[UFP(CC.StdCall)] public delegate void LoadIdentityFunc();
		[UFP(CC.StdCall)] public delegate void LoadMatrixdFunc(double[] m);
		[UFP(CC.StdCall)] public delegate void LoadMatrixfFunc(float[] m);
		[UFP(CC.StdCall)] public delegate void LoadNameFunc(uint name);
		[UFP(CC.StdCall)] public delegate void LogicOpFunc(uint opcode);
		[UFP(CC.StdCall)] public delegate void Map1dFunc(uint target,double u1,double u2,int stride,int order,double[] points);
		[UFP(CC.StdCall)] public delegate void Map1fFunc(uint target,float u1,float u2,int stride,int order,float[] points);
		[UFP(CC.StdCall)] public delegate void Map2dFunc(uint target,double u1,double u2,int ustride,int uorder,double v1,double v2,int vstride,int vorder,double[] points);
		[UFP(CC.StdCall)] public delegate void Map2fFunc(uint target,float u1,float u2,int ustride,int uorder,float v1,float v2,int vstride,int vorder,float[] points);
		[UFP(CC.StdCall)] public delegate void MapGrid1dFunc(int un,double u1,double u2);
		[UFP(CC.StdCall)] public delegate void MapGrid1fFunc(int un,float u1,float u2);
		[UFP(CC.StdCall)] public delegate void MapGrid2dFunc(int un,double u1,double u2,int vn,double v1,double v2);
		[UFP(CC.StdCall)] public delegate void MapGrid2fFunc(int un,float u1,float u2,int vn,float v1,float v2);
		[UFP(CC.StdCall)] public delegate void MaterialfFunc(uint face,uint pname,float param);
		[UFP(CC.StdCall)] public delegate void MaterialfvFunc(uint face,uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void MaterialiFunc(uint face,uint pname,int param);
		[UFP(CC.StdCall)] public delegate void MaterialivFunc(uint face,uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void MatrixModeFunc(uint mode);
		[UFP(CC.StdCall)] public delegate void MultMatrixdFunc(double[] m);
		[UFP(CC.StdCall)] public delegate void MultMatrixfFunc(float[] m);
		[UFP(CC.StdCall)] public delegate void NewListFunc(uint list,uint mode);
		[UFP(CC.StdCall)] public delegate void Normal3bFunc(sbyte nx,sbyte ny,sbyte nz);
		[UFP(CC.StdCall)] public delegate void Normal3bvFunc([In] [MarshalAs(UnmanagedType.LPStr)] string v);
		[UFP(CC.StdCall)] public delegate void Normal3dFunc(double nx,double ny,double nz);
		[UFP(CC.StdCall)] public delegate void Normal3dvFunc(double[] v);
		[UFP(CC.StdCall)] public delegate void Normal3fFunc(float nx,float ny,float nz);
		[UFP(CC.StdCall)] public delegate void Normal3fvFunc(float[] v);
		[UFP(CC.StdCall)] public delegate void Normal3iFunc(int nx,int ny,int nz);
		[UFP(CC.StdCall)] public delegate void Normal3ivFunc(int[] v);
		[UFP(CC.StdCall)] public delegate void Normal3sFunc(short nx,short ny,short nz);
		[UFP(CC.StdCall)] public delegate void Normal3svFunc(short[] v);
		[UFP(CC.StdCall)] public delegate void NormalPointerFunc(uint type,int stride,IntPtr pointer);
		[UFP(CC.StdCall)] public delegate void OrthoFunc(double left,double right,double bottom,double top,double zNear,double zFar);
		[UFP(CC.StdCall)] public delegate void PassThroughFunc(float token);
		[UFP(CC.StdCall)] public delegate void PixelMapfvFunc(uint map,int mapsize,float[] values);
		[UFP(CC.StdCall)] public delegate void PixelMapuivFunc(uint map,int mapsize,uint[] values);
		[UFP(CC.StdCall)] public delegate void PixelMapusvFunc(uint map,int mapsize,ushort[] values);
		[UFP(CC.StdCall)] public delegate void PixelStorefFunc(uint pname,float param);
		[UFP(CC.StdCall)] public delegate void PixelStoreiFunc(uint pname,int param);
		[UFP(CC.StdCall)] public delegate void PixelTransferfFunc(uint pname,float param);
		[UFP(CC.StdCall)] public delegate void PixelTransferiFunc(uint pname,int param);
		[UFP(CC.StdCall)] public delegate void PixelZoomFunc(float xfactor,float yfactor);
		[UFP(CC.StdCall)] public delegate void PointSizeFunc(float size);
		[UFP(CC.StdCall)] public delegate void PolygonModeFunc(uint face,uint mode);
		[UFP(CC.StdCall)] public delegate void PolygonOffsetFunc(float factor,float units);
		[UFP(CC.StdCall)] public delegate void PolygonStippleFunc([In] [MarshalAs(UnmanagedType.LPStr)] string mask);
		[UFP(CC.StdCall)] public delegate void PopAttribFunc();
		[UFP(CC.StdCall)] public delegate void PopClientAttribFunc();
		[UFP(CC.StdCall)] public delegate void PopMatrixFunc();
		[UFP(CC.StdCall)] public delegate void PopNameFunc();
		[UFP(CC.StdCall)] public delegate void PrioritizeTexturesFunc(int n,uint[] textures,float[] priorities);
		[UFP(CC.StdCall)] public delegate void PushAttribFunc(uint mask);
		[UFP(CC.StdCall)] public delegate void PushClientAttribFunc(uint mask);
		[UFP(CC.StdCall)] public delegate void PushMatrixFunc();
		[UFP(CC.StdCall)] public delegate void PushNameFunc(uint name);
		[UFP(CC.StdCall)] public delegate void RasterPos2dFunc(double x,double y);
		[UFP(CC.StdCall)] public delegate void RasterPos2dvFunc(double[] v);
		[UFP(CC.StdCall)] public delegate void RasterPos2fFunc(float x,float y);
		[UFP(CC.StdCall)] public delegate void RasterPos2fvFunc(float[] v);
		[UFP(CC.StdCall)] public delegate void RasterPos2iFunc(int x,int y);
		[UFP(CC.StdCall)] public delegate void RasterPos2ivFunc(int[] v);
		[UFP(CC.StdCall)] public delegate void RasterPos2sFunc(short x,short y);
		[UFP(CC.StdCall)] public delegate void RasterPos2svFunc(short[] v);
		[UFP(CC.StdCall)] public delegate void RasterPos3dFunc(double x,double y,double z);
		[UFP(CC.StdCall)] public delegate void RasterPos3dvFunc(double[] v);
		[UFP(CC.StdCall)] public delegate void RasterPos3fFunc(float x,float y,float z);
		[UFP(CC.StdCall)] public delegate void RasterPos3fvFunc(float[] v);
		[UFP(CC.StdCall)] public delegate void RasterPos3iFunc(int x,int y,int z);
		[UFP(CC.StdCall)] public delegate void RasterPos3ivFunc(int[] v);
		[UFP(CC.StdCall)] public delegate void RasterPos3sFunc(short x,short y,short z);
		[UFP(CC.StdCall)] public delegate void RasterPos3svFunc(short[] v);
		[UFP(CC.StdCall)] public delegate void RasterPos4dFunc(double x,double y,double z,double w);
		[UFP(CC.StdCall)] public delegate void RasterPos4dvFunc(double[] v);
		[UFP(CC.StdCall)] public delegate void RasterPos4fFunc(float x,float y,float z,float w);
		[UFP(CC.StdCall)] public delegate void RasterPos4fvFunc(float[] v);
		[UFP(CC.StdCall)] public delegate void RasterPos4iFunc(int x,int y,int z,int w);
		[UFP(CC.StdCall)] public delegate void RasterPos4ivFunc(int[] v);
		[UFP(CC.StdCall)] public delegate void RasterPos4sFunc(short x,short y,short z,short w);
		[UFP(CC.StdCall)] public delegate void RasterPos4svFunc(short[] v);
		[UFP(CC.StdCall)] public delegate void ReadBufferFunc(uint mode);
		[UFP(CC.StdCall)] public delegate void ReadPixelsFunc(int x,int y,int width,int height,uint format,uint type,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void RectdFunc(double x1,double y1,double x2,double y2);
		[UFP(CC.StdCall)] public delegate void RectdvFunc(double[] v1,double[] v2);
		[UFP(CC.StdCall)] public delegate void RectfFunc(float x1,float y1,float x2,float y2);
		[UFP(CC.StdCall)] public delegate void RectfvFunc(float[] v1,float[] v2);
		[UFP(CC.StdCall)] public delegate void RectiFunc(int x1,int y1,int x2,int y2);
		[UFP(CC.StdCall)] public delegate void RectivFunc(int[] v1,int[] v2);
		[UFP(CC.StdCall)] public delegate void RectsFunc(short x1,short y1,short x2,short y2);
		[UFP(CC.StdCall)] public delegate void RectsvFunc(short[] v1,short[] v2);
		[UFP(CC.StdCall)] public delegate int RenderModeFunc(uint mode);
		[UFP(CC.StdCall)] public delegate void RotatedFunc(double angle,double x,double y,double z);
		[UFP(CC.StdCall)] public delegate void RotatefFunc(float angle,float x,float y,float z);
		[UFP(CC.StdCall)] public delegate void ScaledFunc(double x,double y,double z);
		[UFP(CC.StdCall)] public delegate void ScalefFunc(float x,float y,float z);
		[UFP(CC.StdCall)] public delegate void ScissorFunc(int x,int y,int width,int height);
		[UFP(CC.StdCall)] public delegate void SelectBufferFunc(int size,uint[] buffer);
		[UFP(CC.StdCall)] public delegate void ShadeModelFunc(uint mode);
		[UFP(CC.StdCall)] public delegate void StencilFuncFunc(uint func,int refer,uint mask);
		[UFP(CC.StdCall)] public delegate void StencilMaskFunc(uint mask);
		[UFP(CC.StdCall)] public delegate void StencilOpFunc(uint fail,uint zfail,uint zpass);
		[UFP(CC.StdCall)] public delegate void TexCoord1dFunc(double s);
		[UFP(CC.StdCall)] public delegate void TexCoord1dvFunc(double[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord1fFunc(float s);
		[UFP(CC.StdCall)] public delegate void TexCoord1fvFunc(float[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord1iFunc(int s);
		[UFP(CC.StdCall)] public delegate void TexCoord1ivFunc(int[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord1sFunc(short s);
		[UFP(CC.StdCall)] public delegate void TexCoord1svFunc(short[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord2dFunc(double s,double t);
		[UFP(CC.StdCall)] public delegate void TexCoord2dvFunc(double[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord2fFunc(float s,float t);
		[UFP(CC.StdCall)] public delegate void TexCoord2fvFunc(float[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord2iFunc(int s,int t);
		[UFP(CC.StdCall)] public delegate void TexCoord2ivFunc(int[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord2sFunc(short s,short t);
		[UFP(CC.StdCall)] public delegate void TexCoord2svFunc(short[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord3dFunc(double s,double t,double r);
		[UFP(CC.StdCall)] public delegate void TexCoord3dvFunc(double[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord3fFunc(float s,float t,float r);
		[UFP(CC.StdCall)] public delegate void TexCoord3fvFunc(float[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord3iFunc(int s,int t,int r);
		[UFP(CC.StdCall)] public delegate void TexCoord3ivFunc(int[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord3sFunc(short s,short t,short r);
		[UFP(CC.StdCall)] public delegate void TexCoord3svFunc(short[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord4dFunc(double s,double t,double r,double q);
		[UFP(CC.StdCall)] public delegate void TexCoord4dvFunc(double[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord4fFunc(float s,float t,float r,float q);
		[UFP(CC.StdCall)] public delegate void TexCoord4fvFunc(float[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord4iFunc(int s,int t,int r,int q);
		[UFP(CC.StdCall)] public delegate void TexCoord4ivFunc(int[] v);
		[UFP(CC.StdCall)] public delegate void TexCoord4sFunc(short s,short t,short r,short q);
		[UFP(CC.StdCall)] public delegate void TexCoord4svFunc(short[] v);
		[UFP(CC.StdCall)] public delegate void TexCoordPointerFunc(int size,uint type,int stride,IntPtr pointer);
		[UFP(CC.StdCall)] public delegate void TexEnvfFunc(uint target,uint pname,float param);
		[UFP(CC.StdCall)] public delegate void TexEnvfvFunc(uint target,uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void TexEnviFunc(uint target,uint pname,int param);
		[UFP(CC.StdCall)] public delegate void TexEnvivFunc(uint target,uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void TexGendFunc(uint coord,uint pname,double param);
		[UFP(CC.StdCall)] public delegate void TexGendvFunc(uint coord,uint pname,double[] parameters);
		[UFP(CC.StdCall)] public delegate void TexGenfFunc(uint coord,uint pname,float param);
		[UFP(CC.StdCall)] public delegate void TexGenfvFunc(uint coord,uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void TexGeniFunc(uint coord,uint pname,int param);
		[UFP(CC.StdCall)] public delegate void TexGenivFunc(uint coord,uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void TexImage1DFunc(uint target,int level,int internalformat,int width,int border,uint format,uint type,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void TexImage2DFunc(uint target,int level,int internalformat,int width,int height,int border,uint format,uint type,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void TexParameterfFunc(uint target,uint pname,float param);
		[UFP(CC.StdCall)] public delegate void TexParameterfvFunc(uint target,uint pname,float[] parameters);
		[UFP(CC.StdCall)] public delegate void TexParameteriFunc(uint target,uint pname,int param);
		[UFP(CC.StdCall)] public delegate void TexParameterivFunc(uint target,uint pname,int[] parameters);
		[UFP(CC.StdCall)] public delegate void TexSubImage1DFunc(uint target,int level,int xoffset,int width,uint format,uint type,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void TexSubImage2DFunc(uint target,int level,int xoffset,int yoffset,int width,int height,uint format,uint type,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void TranslatedFunc(double x,double y,double z);
		[UFP(CC.StdCall)] public delegate void TranslatefFunc(float x,float y,float z);
		[UFP(CC.StdCall)] public delegate void Vertex2dFunc(double x,double y);
		[UFP(CC.StdCall)] public delegate void Vertex2dvFunc(double[] v);
		[UFP(CC.StdCall)] public delegate void Vertex2fFunc(float x,float y);
		[UFP(CC.StdCall)] public delegate void Vertex2fvFunc(float[] v);
		[UFP(CC.StdCall)] public delegate void Vertex2iFunc(int x,int y);
		[UFP(CC.StdCall)] public delegate void Vertex2ivFunc(int[] v);
		[UFP(CC.StdCall)] public delegate void Vertex2sFunc(short x,short y);
		[UFP(CC.StdCall)] public delegate void Vertex2svFunc(short[] v);
		[UFP(CC.StdCall)] public delegate void Vertex3dFunc(double x,double y,double z);
		[UFP(CC.StdCall)] public delegate void Vertex3dvFunc(double[] v);
		[UFP(CC.StdCall)] public delegate void Vertex3fFunc(float x,float y,float z);
		[UFP(CC.StdCall)] public delegate void Vertex3fvFunc(float[] v);
		[UFP(CC.StdCall)] public delegate void Vertex3iFunc(int x,int y,int z);
		[UFP(CC.StdCall)] public delegate void Vertex3ivFunc(int[] v);
		[UFP(CC.StdCall)] public delegate void Vertex3sFunc(short x,short y,short z);
		[UFP(CC.StdCall)] public delegate void Vertex3svFunc(short[] v);
		[UFP(CC.StdCall)] public delegate void Vertex4dFunc(double x,double y,double z,double w);
		[UFP(CC.StdCall)] public delegate void Vertex4dvFunc(double[] v);
		[UFP(CC.StdCall)] public delegate void Vertex4fFunc(float x,float y,float z,float w);
		[UFP(CC.StdCall)] public delegate void Vertex4fvFunc(float[] v);
		[UFP(CC.StdCall)] public delegate void Vertex4iFunc(int x,int y,int z,int w);
		[UFP(CC.StdCall)] public delegate void Vertex4ivFunc(int[] v);
		[UFP(CC.StdCall)] public delegate void Vertex4sFunc(short x,short y,short z,short w);
		[UFP(CC.StdCall)] public delegate void Vertex4svFunc(short[] v);
		[UFP(CC.StdCall)] public delegate void VertexPointerFunc(int size,uint type,int stride,IntPtr pointer);
		[UFP(CC.StdCall)] public delegate void ViewportFunc(int x,int y,int width,int height);
		[UFP(CC.StdCall)] public delegate IntPtr GetStringFunc(uint name);

		#endregion

		#region OpenGL 1.2

		[UFP(CC.StdCall)] public delegate void DrawRangeElementsFunc(uint mode,uint start,uint end,int count,uint type,IntPtr indices);
		[UFP(CC.StdCall)] public delegate void TexImage3DFunc(uint target,int level,int internalformat,int width,int height,int depth,int border,uint format,uint type,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void TexSubImage3DFunc(uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,uint type,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void CopyTexSubImage3DFunc(uint target,int level,int xoffset,int yoffset,int zoffset,int x,int y,int width,int height);

		#endregion

		#region OpenGL 1.3

		[UFP(CC.StdCall)] public delegate void ActiveTextureFunc(uint texture);
		[UFP(CC.StdCall)] public delegate void SampleCoverageFunc(float value,byte invert);
		[UFP(CC.StdCall)] public delegate void CompressedTexImage3DFunc(uint target,int level,uint internalformat,int width,int height,int depth,int border,int imageSize,IntPtr data);
		[UFP(CC.StdCall)] public delegate void CompressedTexImage2DFunc(uint target,int level,uint internalformat,int width,int height,int border,int imageSize,IntPtr data);
		[UFP(CC.StdCall)] public delegate void CompressedTexImage1DFunc(uint target,int level,uint internalformat,int width,int border,int imageSize,IntPtr data);
		[UFP(CC.StdCall)] public delegate void CompressedTexSubImage3DFunc(uint target,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,int imageSize,IntPtr data);
		[UFP(CC.StdCall)] public delegate void CompressedTexSubImage2DFunc(uint target,int level,int xoffset,int yoffset,int width,int height,uint format,int imageSize,IntPtr data);
		[UFP(CC.StdCall)] public delegate void CompressedTexSubImage1DFunc(uint target,int level,int xoffset,int width,uint format,int imageSize,IntPtr data);
		[UFP(CC.StdCall)] public delegate void GetCompressedTexImageFunc(uint target,int level,IntPtr img);

		#endregion

		#region OpenGL 1.4

		[UFP(CC.StdCall)] public delegate void BlendFuncSeparateFunc(uint sfactorRGB,uint dfactorRGB,uint sfactorAlpha,uint dfactorAlpha);
		[UFP(CC.StdCall)] public delegate void MultiDrawArraysFunc(uint mode,ref int first,ref int count,int drawcount);
		[UFP(CC.StdCall)] public delegate void MultiDrawElementsFunc(uint mode,ref int count,uint type,IntPtr indices,int drawcount);
		[UFP(CC.StdCall)] public delegate void PointParameterfFunc(uint pname,float param);
		[UFP(CC.StdCall)] public delegate void PointParameterfvFunc(uint pname,ref float parameters);
		[UFP(CC.StdCall)] public delegate void PointParameteriFunc(uint pname,int param);
		[UFP(CC.StdCall)] public delegate void PointParameterivFunc(uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void BlendColorFunc(float red,float green,float blue,float alpha);
		[UFP(CC.StdCall)] public delegate void BlendEquationFunc(uint mode);

		#endregion

		#region OpenGL 1.5

		[UFP(CC.StdCall)] public delegate void GenQueriesFunc(int n,ref uint ids);
		[UFP(CC.StdCall)] public delegate void DeleteQueriesFunc(int n,ref uint ids);
		[UFP(CC.StdCall)] public delegate byte IsQueryFunc(uint id);
		[UFP(CC.StdCall)] public delegate void BeginQueryFunc(uint target,uint id);
		[UFP(CC.StdCall)] public delegate void EndQueryFunc(uint target);
		[UFP(CC.StdCall)] public delegate void GetQueryivFunc(uint target,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetQueryObjectivFunc(uint id,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetQueryObjectuivFunc(uint id,uint pname,ref uint parameters);
		[UFP(CC.StdCall)] public delegate void BindBufferFunc(uint target,uint buffer);
		[UFP(CC.StdCall)] public delegate void DeleteBuffersFunc(int n,ref uint buffers);
		[UFP(CC.StdCall)] public delegate void GenBuffersFunc(int n,ref uint buffers);
		[UFP(CC.StdCall)] public delegate byte IsBufferFunc(uint buffer);
		[UFP(CC.StdCall)] public delegate void BufferDataFunc(uint target,int size,IntPtr data,uint usage);
		[UFP(CC.StdCall)] public delegate void BufferSubDataFunc(uint target,int offset,int size,IntPtr data);
		[UFP(CC.StdCall)] public delegate void GetBufferSubDataFunc(uint target,int offset,int size,IntPtr data);
		[UFP(CC.StdCall)] public delegate IntPtr MapBufferFunc(uint target,uint access);
		[UFP(CC.StdCall)] public delegate byte UnmapBufferFunc(uint target);
		[UFP(CC.StdCall)] public delegate void GetBufferParameterivFunc(uint target,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetBufferPointervFunc(uint target,uint pname,ref IntPtr parameters);

		#endregion

		#region OpenGL 2.0

		[UFP(CC.StdCall)] public delegate void BlendEquationSeparateFunc(uint modeRGB,uint modeAlpha);
		[UFP(CC.StdCall)] public delegate void DrawBuffersFunc(int n,ref uint bufs);
		[UFP(CC.StdCall)] public delegate void StencilOpSeparateFunc(uint face,uint sfail,uint dpfail,uint dppass);
		[UFP(CC.StdCall)] public delegate void StencilFuncSeparateFunc(uint face,uint func,int refer,uint mask);
		[UFP(CC.StdCall)] public delegate void StencilMaskSeparateFunc(uint face,uint mask);
		[UFP(CC.StdCall)] public delegate void AttachShaderFunc(uint program,uint shader);
		[UFP(CC.StdCall)] public delegate void BindAttribLocationFunc(uint program,uint index,[In] [MarshalAs(UnmanagedType.LPStr)] string name);
		[UFP(CC.StdCall)] public delegate void CompileShaderFunc(uint shader);
		[UFP(CC.StdCall)] public delegate uint CreateProgramFunc();
		[UFP(CC.StdCall)] public delegate uint CreateShaderFunc(uint type);
		[UFP(CC.StdCall)] public delegate void DeleteProgramFunc(uint program);
		[UFP(CC.StdCall)] public delegate void DeleteShaderFunc(uint shader);
		[UFP(CC.StdCall)] public delegate void DetachShaderFunc(uint program,uint shader);
		[UFP(CC.StdCall)] public delegate void DisableVertexAttribArrayFunc(uint index);
		[UFP(CC.StdCall)] public delegate void EnableVertexAttribArrayFunc(uint index);
		[UFP(CC.StdCall)] public delegate void GetActiveAttribFunc(uint program,uint index,int bufSize,ref int length,ref int size,ref uint type,IntPtr name);
		[UFP(CC.StdCall)] public delegate void GetActiveUniformFunc(uint program,uint index,int bufSize,ref int length,ref int size,ref uint type,IntPtr name);
		[UFP(CC.StdCall)] public delegate void GetAttachedShadersFunc(uint program,int maxCount,ref int count,ref uint shaders);
		[UFP(CC.StdCall)] public delegate int GetAttribLocationFunc(uint program,[In] [MarshalAs(UnmanagedType.LPStr)] string name);
		[UFP(CC.StdCall)] public delegate void GetProgramivFunc(uint program,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetProgramInfoLogFunc(uint program,int bufSize,ref int length,IntPtr infoLog);
		[UFP(CC.StdCall)] public delegate void GetShaderivFunc(uint shader,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetShaderInfoLogFunc(uint shader,int bufSize,ref int length,IntPtr infoLog);
		[UFP(CC.StdCall)] public delegate void GetShaderSourceFunc(uint shader,int bufSize,ref int length,IntPtr source);
		[UFP(CC.StdCall)] public delegate int GetUniformLocationFunc(uint program,[In] [MarshalAs(UnmanagedType.LPStr)] string name);
		[UFP(CC.StdCall)] public delegate void GetUniformfvFunc(uint program,int location,ref float parameters);
		[UFP(CC.StdCall)] public delegate void GetUniformivFunc(uint program,int location,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetVertexAttribdvFunc(uint index,uint pname,ref double parameters);
		[UFP(CC.StdCall)] public delegate void GetVertexAttribfvFunc(uint index,uint pname,ref float parameters);
		[UFP(CC.StdCall)] public delegate void GetVertexAttribivFunc(uint index,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetVertexAttribPointervFunc(uint index,uint pname,ref IntPtr pointer);
		[UFP(CC.StdCall)] public delegate byte IsProgramFunc(uint program);
		[UFP(CC.StdCall)] public delegate byte IsShaderFunc(uint shader);
		[UFP(CC.StdCall)] public delegate void LinkProgramFunc(uint program);
		[UFP(CC.StdCall)] public delegate void ShaderSourceFunc(uint shader,int count,ref IntPtr str,ref int length);
		[UFP(CC.StdCall)] public delegate void UseProgramFunc(uint program);
		[UFP(CC.StdCall)] public delegate void Uniform1fFunc(int location,float v0);
		[UFP(CC.StdCall)] public delegate void Uniform2fFunc(int location,float v0,float v1);
		[UFP(CC.StdCall)] public delegate void Uniform3fFunc(int location,float v0,float v1,float v2);
		[UFP(CC.StdCall)] public delegate void Uniform4fFunc(int location,float v0,float v1,float v2,float v3);
		[UFP(CC.StdCall)] public delegate void Uniform1iFunc(int location,int v0);
		[UFP(CC.StdCall)] public delegate void Uniform2iFunc(int location,int v0,int v1);
		[UFP(CC.StdCall)] public delegate void Uniform3iFunc(int location,int v0,int v1,int v2);
		[UFP(CC.StdCall)] public delegate void Uniform4iFunc(int location,int v0,int v1,int v2,int v3);
		[UFP(CC.StdCall)] public delegate void Uniform1fvFunc(int location,int count,ref float value);
		[UFP(CC.StdCall)] public delegate void Uniform2fvFunc(int location,int count,ref float value);
		[UFP(CC.StdCall)] public delegate void Uniform3fvFunc(int location,int count,ref float value);
		[UFP(CC.StdCall)] public delegate void Uniform4fvFunc(int location,int count,ref float value);
		[UFP(CC.StdCall)] public delegate void Uniform1ivFunc(int location,int count,ref int value);
		[UFP(CC.StdCall)] public delegate void Uniform2ivFunc(int location,int count,ref int value);
		[UFP(CC.StdCall)] public delegate void Uniform3ivFunc(int location,int count,ref int value);
		[UFP(CC.StdCall)] public delegate void Uniform4ivFunc(int location,int count,ref int value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix2fvFunc(int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix3fvFunc(int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix4fvFunc(int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void ValidateProgramFunc(uint program);
		[UFP(CC.StdCall)] public delegate void VertexAttrib1dFunc(uint index,double x);
		[UFP(CC.StdCall)] public delegate void VertexAttrib1dvFunc(uint index,ref double v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib1fFunc(uint index,float x);
		[UFP(CC.StdCall)] public delegate void VertexAttrib1fvFunc(uint index,ref float v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib1sFunc(uint index,short x);
		[UFP(CC.StdCall)] public delegate void VertexAttrib1svFunc(uint index,ref short v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib2dFunc(uint index,double x,double y);
		[UFP(CC.StdCall)] public delegate void VertexAttrib2dvFunc(uint index,ref double v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib2fFunc(uint index,float x,float y);
		[UFP(CC.StdCall)] public delegate void VertexAttrib2fvFunc(uint index,ref float v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib2sFunc(uint index,short x,short y);
		[UFP(CC.StdCall)] public delegate void VertexAttrib2svFunc(uint index,ref short v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib3dFunc(uint index,double x,double y,double z);
		[UFP(CC.StdCall)] public delegate void VertexAttrib3dvFunc(uint index,ref double v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib3fFunc(uint index,float x,float y,float z);
		[UFP(CC.StdCall)] public delegate void VertexAttrib3fvFunc(uint index,ref float v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib3sFunc(uint index,short x,short y,short z);
		[UFP(CC.StdCall)] public delegate void VertexAttrib3svFunc(uint index,ref short v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4NbvFunc(uint index,sbyte[] v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4NivFunc(uint index,ref int v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4NsvFunc(uint index,ref short v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4NubFunc(uint index,byte x,byte y,byte z,byte w);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4NubvFunc(uint index,byte[] v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4NuivFunc(uint index,ref uint v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4NusvFunc(uint index,ref ushort v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4bvFunc(uint index,sbyte[] v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4dFunc(uint index,double x,double y,double z,double w);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4dvFunc(uint index,ref double v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4fFunc(uint index,float x,float y,float z,float w);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4fvFunc(uint index,ref float v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4ivFunc(uint index,ref int v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4sFunc(uint index,short x,short y,short z,short w);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4svFunc(uint index,ref short v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4ubvFunc(uint index,byte[] v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4uivFunc(uint index,ref uint v);
		[UFP(CC.StdCall)] public delegate void VertexAttrib4usvFunc(uint index,ref ushort v);
		[UFP(CC.StdCall)] public delegate void VertexAttribPointerFunc(uint index,int size,uint type,byte normalized,int stride,IntPtr pointer);

		#endregion

		#region OpenGL 2.1

		[UFP(CC.StdCall)] public delegate void UniformMatrix2x3fvFunc(int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix3x2fvFunc(int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix2x4fvFunc(int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix4x2fvFunc(int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix3x4fvFunc(int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix4x3fvFunc(int location,int count,byte transpose,ref float value);

		#endregion

		#region OpenGL 3.0

		[UFP(CC.StdCall)] public delegate void ColorMaskiFunc(uint index,byte r,byte g,byte b,byte a);
		[UFP(CC.StdCall)] public delegate void GetBooleani_vFunc(uint target,uint index,IntPtr data);
		[UFP(CC.StdCall)] public delegate void GetIntegeri_vFunc(uint target,uint index,ref int data);
		[UFP(CC.StdCall)] public delegate void EnableiFunc(uint target,uint index);
		[UFP(CC.StdCall)] public delegate void DisableiFunc(uint target,uint index);
		[UFP(CC.StdCall)] public delegate byte IsEnablediFunc(uint target,uint index);
		[UFP(CC.StdCall)] public delegate void BeginTransformFeedbackFunc(uint primitiveMode);
		[UFP(CC.StdCall)] public delegate void EndTransformFeedbackFunc();
		[UFP(CC.StdCall)] public delegate void BindBufferRangeFunc(uint target,uint index,uint buffer,int offset,int size);
		[UFP(CC.StdCall)] public delegate void BindBufferBaseFunc(uint target,uint index,uint buffer);
		[UFP(CC.StdCall)] public delegate void TransformFeedbackVaryingsFunc(uint program,int count,IntPtr varyings,uint bufferMode);
		[UFP(CC.StdCall)] public delegate void GetTransformFeedbackVaryingFunc(uint program,uint index,int bufSize,ref int length,ref int size,ref uint type,IntPtr name);
		[UFP(CC.StdCall)] public delegate void ClampColorFunc(uint target,uint clamp);
		[UFP(CC.StdCall)] public delegate void BeginConditionalRenderFunc(uint id,uint mode);
		[UFP(CC.StdCall)] public delegate void EndConditionalRenderFunc();
		[UFP(CC.StdCall)] public delegate void VertexAttribIPointerFunc(uint index,int size,uint type,int stride,IntPtr pointer);
		[UFP(CC.StdCall)] public delegate void GetVertexAttribIivFunc(uint index,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetVertexAttribIuivFunc(uint index,uint pname,ref uint parameters);
		[UFP(CC.StdCall)] public delegate void VertexAttribI1iFunc(uint index,int x);
		[UFP(CC.StdCall)] public delegate void VertexAttribI2iFunc(uint index,int x,int y);
		[UFP(CC.StdCall)] public delegate void VertexAttribI3iFunc(uint index,int x,int y,int z);
		[UFP(CC.StdCall)] public delegate void VertexAttribI4iFunc(uint index,int x,int y,int z,int w);
		[UFP(CC.StdCall)] public delegate void VertexAttribI1uiFunc(uint index,uint x);
		[UFP(CC.StdCall)] public delegate void VertexAttribI2uiFunc(uint index,uint x,uint y);
		[UFP(CC.StdCall)] public delegate void VertexAttribI3uiFunc(uint index,uint x,uint y,uint z);
		[UFP(CC.StdCall)] public delegate void VertexAttribI4uiFunc(uint index,uint x,uint y,uint z,uint w);
		[UFP(CC.StdCall)] public delegate void VertexAttribI1ivFunc(uint index,ref int v);
		[UFP(CC.StdCall)] public delegate void VertexAttribI2ivFunc(uint index,ref int v);
		[UFP(CC.StdCall)] public delegate void VertexAttribI3ivFunc(uint index,ref int v);
		[UFP(CC.StdCall)] public delegate void VertexAttribI4ivFunc(uint index,ref int v);
		[UFP(CC.StdCall)] public delegate void VertexAttribI1uivFunc(uint index,ref uint v);
		[UFP(CC.StdCall)] public delegate void VertexAttribI2uivFunc(uint index,ref uint v);
		[UFP(CC.StdCall)] public delegate void VertexAttribI3uivFunc(uint index,ref uint v);
		[UFP(CC.StdCall)] public delegate void VertexAttribI4uivFunc(uint index,ref uint v);
		[UFP(CC.StdCall)] public delegate void VertexAttribI4bvFunc(uint index,sbyte[] v);
		[UFP(CC.StdCall)] public delegate void VertexAttribI4svFunc(uint index,ref short v);
		[UFP(CC.StdCall)] public delegate void VertexAttribI4ubvFunc(uint index,byte[] v);
		[UFP(CC.StdCall)] public delegate void VertexAttribI4usvFunc(uint index,ref ushort v);
		[UFP(CC.StdCall)] public delegate void GetUniformuivFunc(uint program,int location,ref uint parameters);
		[UFP(CC.StdCall)] public delegate void BindFragDataLocationFunc(uint program,uint color,[In] [MarshalAs(UnmanagedType.LPStr)] string name);
		[UFP(CC.StdCall)] public delegate int GetFragDataLocationFunc(uint program,[In] [MarshalAs(UnmanagedType.LPStr)] string name);
		[UFP(CC.StdCall)] public delegate void Uniform1uiFunc(int location,uint v0);
		[UFP(CC.StdCall)] public delegate void Uniform2uiFunc(int location,uint v0,uint v1);
		[UFP(CC.StdCall)] public delegate void Uniform3uiFunc(int location,uint v0,uint v1,uint v2);
		[UFP(CC.StdCall)] public delegate void Uniform4uiFunc(int location,uint v0,uint v1,uint v2,uint v3);
		[UFP(CC.StdCall)] public delegate void Uniform1uivFunc(int location,int count,ref uint value);
		[UFP(CC.StdCall)] public delegate void Uniform2uivFunc(int location,int count,ref uint value);
		[UFP(CC.StdCall)] public delegate void Uniform3uivFunc(int location,int count,ref uint value);
		[UFP(CC.StdCall)] public delegate void Uniform4uivFunc(int location,int count,ref uint value);
		[UFP(CC.StdCall)] public delegate void TexParameterIivFunc(uint target,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void TexParameterIuivFunc(uint target,uint pname,ref uint parameters);
		[UFP(CC.StdCall)] public delegate void GetTexParameterIivFunc(uint target,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetTexParameterIuivFunc(uint target,uint pname,ref uint parameters);
		[UFP(CC.StdCall)] public delegate void ClearBufferivFunc(uint buffer,int drawbuffer,ref int value);
		[UFP(CC.StdCall)] public delegate void ClearBufferuivFunc(uint buffer,int drawbuffer,ref uint value);
		[UFP(CC.StdCall)] public delegate void ClearBufferfvFunc(uint buffer,int drawbuffer,ref float value);
		[UFP(CC.StdCall)] public delegate void ClearBufferfiFunc(uint buffer,int drawbuffer,float depth,int stencil);
		[UFP(CC.StdCall)] public delegate IntPtr GetStringiFunc(uint name,uint index);
		[UFP(CC.StdCall)] public delegate byte IsRenderbufferFunc(uint renderbuffer);
		[UFP(CC.StdCall)] public delegate void BindRenderbufferFunc(uint target,uint renderbuffer);
		[UFP(CC.StdCall)] public delegate void DeleteRenderbuffersFunc(int n,ref uint renderbuffers);
		[UFP(CC.StdCall)] public delegate void GenRenderbuffersFunc(int n,ref uint renderbuffers);
		[UFP(CC.StdCall)] public delegate void RenderbufferStorageFunc(uint target,uint internalformat,int width,int height);
		[UFP(CC.StdCall)] public delegate void GetRenderbufferParameterivFunc(uint target,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate byte IsFramebufferFunc(uint framebuffer);
		[UFP(CC.StdCall)] public delegate void BindFramebufferFunc(uint target,uint framebuffer);
		[UFP(CC.StdCall)] public delegate void DeleteFramebuffersFunc(int n,ref uint framebuffers);
		[UFP(CC.StdCall)] public delegate void GenFramebuffersFunc(int n,ref uint framebuffers);
		[UFP(CC.StdCall)] public delegate uint CheckFramebufferStatusFunc(uint target);
		[UFP(CC.StdCall)] public delegate void FramebufferTexture1DFunc(uint target,uint attachment,uint texTarget,uint texture,int level);
		[UFP(CC.StdCall)] public delegate void FramebufferTexture2DFunc(uint target,uint attachment,uint texTarget,uint texture,int level);
		[UFP(CC.StdCall)] public delegate void FramebufferTexture3DFunc(uint target,uint attachment,uint texTarget,uint texture,int level,int zoffset);
		[UFP(CC.StdCall)] public delegate void FramebufferRenderbufferFunc(uint target,uint attachment,uint renderbuffertarget,uint renderbuffer);
		[UFP(CC.StdCall)] public delegate void GetFramebufferAttachmentParameterivFunc(uint target,uint attachment,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GenerateMipmapFunc(uint target);
		[UFP(CC.StdCall)] public delegate void BlitFramebufferFunc(int srcX0,int srcY0,int srcX1,int srcY1,int dstX0,int dstY0,int dstX1,int dstY1,uint mask,uint filter);
		[UFP(CC.StdCall)] public delegate void RenderbufferStorageMultisampleFunc(uint target,int samples,uint internalformat,int width,int height);
		[UFP(CC.StdCall)] public delegate void FramebufferTextureLayerFunc(uint target,uint attachment,uint texture,int level,int layer);
		[UFP(CC.StdCall)] public delegate IntPtr MapBufferRangeFunc(uint target,int offset,int length,uint access);
		[UFP(CC.StdCall)] public delegate void FlushMappedBufferRangeFunc(uint target,int offset,int length);
		[UFP(CC.StdCall)] public delegate void BindVertexArrayFunc(uint array);
		[UFP(CC.StdCall)] public delegate void DeleteVertexArraysFunc(int n,ref uint arrays);
		[UFP(CC.StdCall)] public delegate void GenVertexArraysFunc(int n,ref uint arrays);
		[UFP(CC.StdCall)] public delegate byte IsVertexArrayFunc(uint array);

		#endregion

		#region OpenGL 3.1

		[UFP(CC.StdCall)] public delegate void DrawArraysInstancedFunc(uint mode,int first,int count,int instancecount);
		[UFP(CC.StdCall)] public delegate void DrawElementsInstancedFunc(uint mode,int count,uint type,IntPtr indices,int instancecount);
		[UFP(CC.StdCall)] public delegate void TexBufferFunc(uint target,uint internalformat,uint buffer);
		[UFP(CC.StdCall)] public delegate void PrimitiveRestartIndexFunc(uint index);
		[UFP(CC.StdCall)] public delegate void CopyBufferSubDataFunc(uint readTarget,uint writeTarget,int readOffset,int writeOffset,int size);
		[UFP(CC.StdCall)] public delegate void GetUniformIndicesFunc(uint program,int uniformCount,IntPtr uniformNames,ref uint uniformIndices);
		[UFP(CC.StdCall)] public delegate void GetActiveUniformsivFunc(uint program,int uniformCount,ref uint uniformIndices,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetActiveUniformNameFunc(uint program,uint uniformIndex,int bufSize,ref int length,IntPtr uniformName);
		[UFP(CC.StdCall)] public delegate uint GetUniformBlockIndexFunc(uint program,[In] [MarshalAs(UnmanagedType.LPStr)] string uniformBlockName);
		[UFP(CC.StdCall)] public delegate void GetActiveUniformBlockivFunc(uint program,uint uniformBlockIndex,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetActiveUniformBlockNameFunc(uint program,uint uniformBlockIndex,int bufSize,ref int length,IntPtr uniformBlockName);
		[UFP(CC.StdCall)] public delegate void UniformBlockBindingFunc(uint program,uint uniformBlockIndex,uint uniformBlockBinding);

		#endregion

		#region OpenGL 3.2

		[UFP(CC.StdCall)] public delegate void DrawElementsBaseVertexFunc(uint mode,int count,uint type,IntPtr indices,int basevertex);
		[UFP(CC.StdCall)] public delegate void DrawRangeElementsBaseVertexFunc(uint mode,uint start,uint end,int count,uint type,IntPtr indices,int basevertex);
		[UFP(CC.StdCall)] public delegate void DrawElementsInstancedBaseVertexFunc(uint mode,int count,uint type,IntPtr indices,int instancecount,int basevertex);
		[UFP(CC.StdCall)] public delegate void MultiDrawElementsBaseVertexFunc(uint mode,ref int count,uint type,IntPtr indices,int drawcount,ref int basevertex);
		[UFP(CC.StdCall)] public delegate void ProvokingVertexFunc(uint mode);
		[UFP(CC.StdCall)] public delegate IntPtr FenceSyncFunc(uint condition,uint flags);
		[UFP(CC.StdCall)] public delegate byte IsSyncFunc(IntPtr sync);
		[UFP(CC.StdCall)] public delegate void DeleteSyncFunc(IntPtr sync);
		[UFP(CC.StdCall)] public delegate uint ClientWaitSyncFunc(IntPtr sync,uint flags,uint timeout);
		[UFP(CC.StdCall)] public delegate void WaitSyncFunc(IntPtr sync,uint flags,uint timeout);
		[UFP(CC.StdCall)] public delegate void GetInteger64vFunc(uint pname,ref int data);
		[UFP(CC.StdCall)] public delegate void GetSyncivFunc(IntPtr sync,uint pname,int bufSize,ref int length,ref int values);
		[UFP(CC.StdCall)] public delegate void GetInteger64i_vFunc(uint target,uint index,ref long data);
		[UFP(CC.StdCall)] public delegate void GetBufferParameteri64vFunc(uint target,uint pname,ref long parameters);
		[UFP(CC.StdCall)] public delegate void FramebufferTextureFunc(uint target,uint attachment,uint texture,int level);
		[UFP(CC.StdCall)] public delegate void TexImage2DMultisampleFunc(uint target,int samples,uint internalformat,int width,int height,byte fixedsamplelocations);
		[UFP(CC.StdCall)] public delegate void TexImage3DMultisampleFunc(uint target,int samples,uint internalformat,int width,int height,int depth,byte fixedsamplelocations);
		[UFP(CC.StdCall)] public delegate void GetMultisamplefvFunc(uint pname,uint index,ref float val);
		[UFP(CC.StdCall)] public delegate void SampleMaskiFunc(uint maskNumber,uint mask);

		#endregion

		#region OpenGL 3.3

		[UFP(CC.StdCall)] public delegate void BindFragDataLocationIndexedFunc(uint program,uint colorNumber,uint index,[In] [MarshalAs(UnmanagedType.LPStr)] string name);
		[UFP(CC.StdCall)] public delegate int GetFragDataIndexFunc(uint program,[In] [MarshalAs(UnmanagedType.LPStr)] string name);
		[UFP(CC.StdCall)] public delegate void GenSamplersFunc(int count,ref uint samplers);
		[UFP(CC.StdCall)] public delegate void DeleteSamplersFunc(int count,ref uint samplers);
		[UFP(CC.StdCall)] public delegate byte IsSamplerFunc(uint sampler);
		[UFP(CC.StdCall)] public delegate void BindSamplerFunc(uint unit,uint sampler);
		[UFP(CC.StdCall)] public delegate void SamplerParameteriFunc(uint sampler,uint pname,int param);
		[UFP(CC.StdCall)] public delegate void SamplerParameterivFunc(uint sampler,uint pname,ref int param);
		[UFP(CC.StdCall)] public delegate void SamplerParameterfFunc(uint sampler,uint pname,float param);
		[UFP(CC.StdCall)] public delegate void SamplerParameterfvFunc(uint sampler,uint pname,ref float param);
		[UFP(CC.StdCall)] public delegate void SamplerParameterIivFunc(uint sampler,uint pname,ref int param);
		[UFP(CC.StdCall)] public delegate void SamplerParameterIuivFunc(uint sampler,uint pname,ref uint param);
		[UFP(CC.StdCall)] public delegate void GetSamplerParameterivFunc(uint sampler,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetSamplerParameterIivFunc(uint sampler,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetSamplerParameterfvFunc(uint sampler,uint pname,ref float parameters);
		[UFP(CC.StdCall)] public delegate void GetSamplerParameterIuivFunc(uint sampler,uint pname,ref uint parameters);
		[UFP(CC.StdCall)] public delegate void QueryCounterFunc(uint id,uint target);
		[UFP(CC.StdCall)] public delegate void GetQueryObjecti64vFunc(uint id,uint pname,ref long parameters);
		[UFP(CC.StdCall)] public delegate void GetQueryObjectui64vFunc(uint id,uint pname,ref ulong parameters);
		[UFP(CC.StdCall)] public delegate void VertexAttribDivisorFunc(uint index,uint divisor);
		[UFP(CC.StdCall)] public delegate void VertexAttribP1uiFunc(uint index,uint type,byte normalized,uint value);
		[UFP(CC.StdCall)] public delegate void VertexAttribP1uivFunc(uint index,uint type,byte normalized,ref uint value);
		[UFP(CC.StdCall)] public delegate void VertexAttribP2uiFunc(uint index,uint type,byte normalized,uint value);
		[UFP(CC.StdCall)] public delegate void VertexAttribP2uivFunc(uint index,uint type,byte normalized,ref uint value);
		[UFP(CC.StdCall)] public delegate void VertexAttribP3uiFunc(uint index,uint type,byte normalized,uint value);
		[UFP(CC.StdCall)] public delegate void VertexAttribP3uivFunc(uint index,uint type,byte normalized,ref uint value);
		[UFP(CC.StdCall)] public delegate void VertexAttribP4uiFunc(uint index,uint type,byte normalized,uint value);
		[UFP(CC.StdCall)] public delegate void VertexAttribP4uivFunc(uint index,uint type,byte normalized,ref uint value);

		#endregion

		#region OpenGL 4.0

		[UFP(CC.StdCall)] public delegate void MinSampleShadingFunc(float value);
		[UFP(CC.StdCall)] public delegate void BlendEquationiFunc(uint buf,uint mode);
		[UFP(CC.StdCall)] public delegate void BlendEquationSeparateiFunc(uint buf,uint modeRGB,uint modeAlpha);
		[UFP(CC.StdCall)] public delegate void BlendFunciFunc(uint buf,BlendingFactor src,BlendingFactor dst);
		[UFP(CC.StdCall)] public delegate void BlendFuncSeparateiFunc(uint buf,uint srcRGB,uint dstRGB,uint srcAlpha,uint dstAlpha);
		[UFP(CC.StdCall)] public delegate void DrawArraysIndirectFunc(uint mode,IntPtr indirect);
		[UFP(CC.StdCall)] public delegate void DrawElementsIndirectFunc(uint mode,uint type,IntPtr indirect);
		[UFP(CC.StdCall)] public delegate void Uniform1dFunc(int location,double x);
		[UFP(CC.StdCall)] public delegate void Uniform2dFunc(int location,double x,double y);
		[UFP(CC.StdCall)] public delegate void Uniform3dFunc(int location,double x,double y,double z);
		[UFP(CC.StdCall)] public delegate void Uniform4dFunc(int location,double x,double y,double z,double w);
		[UFP(CC.StdCall)] public delegate void Uniform1dvFunc(int location,int count,ref double value);
		[UFP(CC.StdCall)] public delegate void Uniform2dvFunc(int location,int count,ref double value);
		[UFP(CC.StdCall)] public delegate void Uniform3dvFunc(int location,int count,ref double value);
		[UFP(CC.StdCall)] public delegate void Uniform4dvFunc(int location,int count,ref double value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix2dvFunc(int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix3dvFunc(int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix4dvFunc(int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix2x3dvFunc(int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix2x4dvFunc(int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix3x2dvFunc(int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix3x4dvFunc(int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix4x2dvFunc(int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void UniformMatrix4x3dvFunc(int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void GetUniformdvFunc(uint program,int location,ref double parameters);
		[UFP(CC.StdCall)] public delegate int GetSubroutineUniformLocationFunc(uint program,uint shadertype,[In] [MarshalAs(UnmanagedType.LPStr)] string name);
		[UFP(CC.StdCall)] public delegate uint GetSubroutineIndexFunc(uint program,uint shadertype,[In] [MarshalAs(UnmanagedType.LPStr)] string name);
		[UFP(CC.StdCall)] public delegate void GetActiveSubroutineUniformivFunc(uint program,uint shadertype,uint index,uint pname,ref int values);
		[UFP(CC.StdCall)] public delegate void GetActiveSubroutineUniformNameFunc(uint program,uint shadertype,uint index,int bufsize,ref int length,IntPtr name);
		[UFP(CC.StdCall)] public delegate void GetActiveSubroutineNameFunc(uint program,uint shadertype,uint index,int bufsize,ref int length,IntPtr name);
		[UFP(CC.StdCall)] public delegate void UniformSubroutinesuivFunc(uint shadertype,int count,ref uint indices);
		[UFP(CC.StdCall)] public delegate void GetUniformSubroutineuivFunc(uint shadertype,int location,ref uint parameters);
		[UFP(CC.StdCall)] public delegate void GetProgramStageivFunc(uint program,uint shadertype,uint pname,ref int values);
		[UFP(CC.StdCall)] public delegate void PatchParameteriFunc(uint pname,int value);
		[UFP(CC.StdCall)] public delegate void PatchParameterfvFunc(uint pname,ref float values);
		[UFP(CC.StdCall)] public delegate void BindTransformFeedbackFunc(uint target,uint id);
		[UFP(CC.StdCall)] public delegate void DeleteTransformFeedbacksFunc(int n,ref uint ids);
		[UFP(CC.StdCall)] public delegate void GenTransformFeedbacksFunc(int n,ref uint ids);
		[UFP(CC.StdCall)] public delegate byte IsTransformFeedbackFunc(uint id);
		[UFP(CC.StdCall)] public delegate void PauseTransformFeedbackFunc();
		[UFP(CC.StdCall)] public delegate void ResumeTransformFeedbackFunc();
		[UFP(CC.StdCall)] public delegate void DrawTransformFeedbackFunc(uint mode,uint id);
		[UFP(CC.StdCall)] public delegate void DrawTransformFeedbackStreamFunc(uint mode,uint id,uint stream);
		[UFP(CC.StdCall)] public delegate void BeginQueryIndexedFunc(uint target,uint index,uint id);
		[UFP(CC.StdCall)] public delegate void EndQueryIndexedFunc(uint target,uint index);
		[UFP(CC.StdCall)] public delegate void GetQueryIndexedivFunc(uint target,uint index,uint pname,ref int parameters);

		#endregion

		#region OpenGL 4.1

		[UFP(CC.StdCall)] public delegate void ReleaseShaderCompilerFunc();
		[UFP(CC.StdCall)] public delegate void ShaderBinaryFunc(int count,ref uint shaders,uint binaryformat,IntPtr binary,int length);
		[UFP(CC.StdCall)] public delegate void GetShaderPrecisionFormatFunc(uint shadertype,uint precisiontype,ref int range,ref int precision);
		[UFP(CC.StdCall)] public delegate void DepthRangefFunc(float n,float f);
		[UFP(CC.StdCall)] public delegate void ClearDepthfFunc(float d);
		[UFP(CC.StdCall)] public delegate void GetProgramBinaryFunc(uint program,int bufSize,ref int length,ref uint binaryFormat,IntPtr binary);
		[UFP(CC.StdCall)] public delegate void ProgramBinaryFunc(uint program,uint binaryFormat,IntPtr binary,int length);
		[UFP(CC.StdCall)] public delegate void ProgramParameteriFunc(uint program,uint pname,int value);
		[UFP(CC.StdCall)] public delegate void UseProgramStagesFunc(uint pipeline,uint stages,uint program);
		[UFP(CC.StdCall)] public delegate void ActiveShaderProgramFunc(uint pipeline,uint program);
		[UFP(CC.StdCall)] public delegate uint CreateShaderProgramvFunc(uint type,int count,IntPtr strings);
		[UFP(CC.StdCall)] public delegate void BindProgramPipelineFunc(uint pipeline);
		[UFP(CC.StdCall)] public delegate void DeleteProgramPipelinesFunc(int n,ref uint pipelines);
		[UFP(CC.StdCall)] public delegate void GenProgramPipelinesFunc(int n,ref uint pipelines);
		[UFP(CC.StdCall)] public delegate byte IsProgramPipelineFunc(uint pipeline);
		[UFP(CC.StdCall)] public delegate void GetProgramPipelineivFunc(uint pipeline,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void ProgramUniform1iFunc(uint program,int location,int v0);
		[UFP(CC.StdCall)] public delegate void ProgramUniform1ivFunc(uint program,int location,int count,ref int value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform1fFunc(uint program,int location,float v0);
		[UFP(CC.StdCall)] public delegate void ProgramUniform1fvFunc(uint program,int location,int count,ref float value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform1dFunc(uint program,int location,double v0);
		[UFP(CC.StdCall)] public delegate void ProgramUniform1dvFunc(uint program,int location,int count,ref double value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform1uiFunc(uint program,int location,uint v0);
		[UFP(CC.StdCall)] public delegate void ProgramUniform1uivFunc(uint program,int location,int count,ref uint value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform2iFunc(uint program,int location,int v0,int v1);
		[UFP(CC.StdCall)] public delegate void ProgramUniform2ivFunc(uint program,int location,int count,ref int value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform2fFunc(uint program,int location,float v0,float v1);
		[UFP(CC.StdCall)] public delegate void ProgramUniform2fvFunc(uint program,int location,int count,ref float value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform2dFunc(uint program,int location,double v0,double v1);
		[UFP(CC.StdCall)] public delegate void ProgramUniform2dvFunc(uint program,int location,int count,ref double value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform2uiFunc(uint program,int location,uint v0,uint v1);
		[UFP(CC.StdCall)] public delegate void ProgramUniform2uivFunc(uint program,int location,int count,ref uint value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform3iFunc(uint program,int location,int v0,int v1,int v2);
		[UFP(CC.StdCall)] public delegate void ProgramUniform3ivFunc(uint program,int location,int count,ref int value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform3fFunc(uint program,int location,float v0,float v1,float v2);
		[UFP(CC.StdCall)] public delegate void ProgramUniform3fvFunc(uint program,int location,int count,ref float value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform3dFunc(uint program,int location,double v0,double v1,double v2);
		[UFP(CC.StdCall)] public delegate void ProgramUniform3dvFunc(uint program,int location,int count,ref double value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform3uiFunc(uint program,int location,uint v0,uint v1,uint v2);
		[UFP(CC.StdCall)] public delegate void ProgramUniform3uivFunc(uint program,int location,int count,ref uint value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform4iFunc(uint program,int location,int v0,int v1,int v2,int v3);
		[UFP(CC.StdCall)] public delegate void ProgramUniform4ivFunc(uint program,int location,int count,ref int value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform4fFunc(uint program,int location,float v0,float v1,float v2,float v3);
		[UFP(CC.StdCall)] public delegate void ProgramUniform4fvFunc(uint program,int location,int count,ref float value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform4dFunc(uint program,int location,double v0,double v1,double v2,double v3);
		[UFP(CC.StdCall)] public delegate void ProgramUniform4dvFunc(uint program,int location,int count,ref double value);
		[UFP(CC.StdCall)] public delegate void ProgramUniform4uiFunc(uint program,int location,uint v0,uint v1,uint v2,uint v3);
		[UFP(CC.StdCall)] public delegate void ProgramUniform4uivFunc(uint program,int location,int count,ref uint value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix2fvFunc(uint program,int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix3fvFunc(uint program,int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix4fvFunc(uint program,int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix2dvFunc(uint program,int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix3dvFunc(uint program,int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix4dvFunc(uint program,int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix2x3fvFunc(uint program,int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix3x2fvFunc(uint program,int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix2x4fvFunc(uint program,int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix4x2fvFunc(uint program,int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix3x4fvFunc(uint program,int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix4x3fvFunc(uint program,int location,int count,byte transpose,ref float value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix2x3dvFunc(uint program,int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix3x2dvFunc(uint program,int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix2x4dvFunc(uint program,int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix4x2dvFunc(uint program,int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix3x4dvFunc(uint program,int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void ProgramUniformMatrix4x3dvFunc(uint program,int location,int count,byte transpose,ref double value);
		[UFP(CC.StdCall)] public delegate void ValidateProgramPipelineFunc(uint pipeline);
		[UFP(CC.StdCall)] public delegate void GetProgramPipelineInfoLogFunc(uint pipeline,int bufSize,ref int length,IntPtr infoLog);
		[UFP(CC.StdCall)] public delegate void VertexAttribL1dFunc(uint index,double x);
		[UFP(CC.StdCall)] public delegate void VertexAttribL2dFunc(uint index,double x,double y);
		[UFP(CC.StdCall)] public delegate void VertexAttribL3dFunc(uint index,double x,double y,double z);
		[UFP(CC.StdCall)] public delegate void VertexAttribL4dFunc(uint index,double x,double y,double z,double w);
		[UFP(CC.StdCall)] public delegate void VertexAttribL1dvFunc(uint index,ref double v);
		[UFP(CC.StdCall)] public delegate void VertexAttribL2dvFunc(uint index,ref double v);
		[UFP(CC.StdCall)] public delegate void VertexAttribL3dvFunc(uint index,ref double v);
		[UFP(CC.StdCall)] public delegate void VertexAttribL4dvFunc(uint index,ref double v);
		[UFP(CC.StdCall)] public delegate void VertexAttribLPointerFunc(uint index,int size,uint type,int stride,IntPtr pointer);
		[UFP(CC.StdCall)] public delegate void GetVertexAttribLdvFunc(uint index,uint pname,ref double parameters);
		[UFP(CC.StdCall)] public delegate void ViewportArrayvFunc(uint first,int count,ref float v);
		[UFP(CC.StdCall)] public delegate void ViewportIndexedfFunc(uint index,float x,float y,float w,float h);
		[UFP(CC.StdCall)] public delegate void ViewportIndexedfvFunc(uint index,ref float v);
		[UFP(CC.StdCall)] public delegate void ScissorArrayvFunc(uint first,int count,ref int v);
		[UFP(CC.StdCall)] public delegate void ScissorIndexedFunc(uint index,int left,int bottom,int width,int height);
		[UFP(CC.StdCall)] public delegate void ScissorIndexedvFunc(uint index,ref int v);
		[UFP(CC.StdCall)] public delegate void DepthRangeArrayvFunc(uint first,int count,ref double v);
		[UFP(CC.StdCall)] public delegate void DepthRangeIndexedFunc(uint index,double n,double f);
		[UFP(CC.StdCall)] public delegate void GetFloati_vFunc(uint target,uint index,ref float data);
		[UFP(CC.StdCall)] public delegate void GetDoublei_vFunc(uint target,uint index,ref double data);

		#endregion

		#region OpenGL 4.2

		[UFP(CC.StdCall)] public delegate void DrawArraysInstancedBaseInstanceFunc(uint mode,int first,int count,int instancecount,uint baseinstance);
		[UFP(CC.StdCall)] public delegate void DrawElementsInstancedBaseInstanceFunc(uint mode,int count,uint type,IntPtr indices,int instancecount,uint baseinstance);
		[UFP(CC.StdCall)] public delegate void DrawElementsInstancedBaseVertexBaseInstanceFunc(uint mode,int count,uint type,IntPtr indices,int instancecount,int basevertex,uint baseinstance);
		[UFP(CC.StdCall)] public delegate void GetInternalformativFunc(uint target,uint internalformat,uint pname,int bufSize,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetActiveAtomicCounterBufferivFunc(uint program,uint bufferIndex,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void BindImageTextureFunc(uint unit,uint texture,int level,byte layered,int layer,uint access,uint format);
		[UFP(CC.StdCall)] public delegate void MemoryBarrierFunc(uint barriers);
		[UFP(CC.StdCall)] public delegate void TexStorage1DFunc(uint target,int levels,uint internalformat,int width);
		[UFP(CC.StdCall)] public delegate void TexStorage2DFunc(uint target,int levels,uint internalformat,int width,int height);
		[UFP(CC.StdCall)] public delegate void TexStorage3DFunc(uint target,int levels,uint internalformat,int width,int height,int depth);
		[UFP(CC.StdCall)] public delegate void DrawTransformFeedbackInstancedFunc(uint mode,uint id,int instancecount);
		[UFP(CC.StdCall)] public delegate void DrawTransformFeedbackStreamInstancedFunc(uint mode,uint id,uint stream,int instancecount);

		#endregion

		#region OpenGL 4.3

		[UFP(CC.Cdecl)] public delegate void DebugFunc(uint source,uint type,uint id,uint severity,int length,[In] [MarshalAs(UnmanagedType.LPStr)] string message,IntPtr userParam);
		[UFP(CC.StdCall)] public delegate void ClearBufferDataFunc(uint target,uint internalformat,uint format,uint type,IntPtr data);
		[UFP(CC.StdCall)] public delegate void ClearBufferSubDataFunc(uint target,uint internalformat,int offset,int size,uint format,uint type,IntPtr data);
		[UFP(CC.StdCall)] public delegate void DispatchComputeFunc(uint num_groups_x,uint num_groups_y,uint num_groups_z);
		[UFP(CC.StdCall)] public delegate void DispatchComputeIndirectFunc(int indirect);
		[UFP(CC.StdCall)] public delegate void CopyImageSubDataFunc(uint srcName,uint srcTarget,int srcLevel,int srcX,int srcY,int srcZ,uint dstName,uint dstTarget,int dstLevel,int dstX,int dstY,int dstZ,int srcWidth,int srcHeight,int srcDepth);
		[UFP(CC.StdCall)] public delegate void FramebufferParameteriFunc(uint target,uint pname,int param);
		[UFP(CC.StdCall)] public delegate void GetFramebufferParameterivFunc(uint target,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetInternalformati64vFunc(uint target,uint internalformat,uint pname,int bufSize,ref long parameters);
		[UFP(CC.StdCall)] public delegate void InvalidateTexSubImageFunc(uint texture,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth);
		[UFP(CC.StdCall)] public delegate void InvalidateTexImageFunc(uint texture,int level);
		[UFP(CC.StdCall)] public delegate void InvalidateBufferSubDataFunc(uint buffer,int offset,int length);
		[UFP(CC.StdCall)] public delegate void InvalidateBufferDataFunc(uint buffer);
		[UFP(CC.StdCall)] public delegate void InvalidateFramebufferFunc(uint target,int numAttachments,ref uint attachments);
		[UFP(CC.StdCall)] public delegate void InvalidateSubFramebufferFunc(uint target,int numAttachments,ref uint attachments,int x,int y,int width,int height);
		[UFP(CC.StdCall)] public delegate void MultiDrawArraysIndirectFunc(uint mode,IntPtr indirect,int drawcount,int stride);
		[UFP(CC.StdCall)] public delegate void MultiDrawElementsIndirectFunc(uint mode,uint type,IntPtr indirect,int drawcount,int stride);
		[UFP(CC.StdCall)] public delegate void GetProgramInterfaceivFunc(uint program,uint programInterface,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate uint GetProgramResourceIndexFunc(uint program,uint programInterface,[In] [MarshalAs(UnmanagedType.LPStr)] string name);
		[UFP(CC.StdCall)] public delegate void GetProgramResourceNameFunc(uint program,uint programInterface,uint index,int bufSize,ref int length,IntPtr name);
		[UFP(CC.StdCall)] public delegate void GetProgramResourceivFunc(uint program,uint programInterface,uint index,int propCount,ref uint props,int bufSize,ref int length,ref int parameters);
		[UFP(CC.StdCall)] public delegate int GetProgramResourceLocationFunc(uint program,uint programInterface,[In] [MarshalAs(UnmanagedType.LPStr)] string name);
		[UFP(CC.StdCall)] public delegate int GetProgramResourceLocationIndexFunc(uint program,uint programInterface,[In] [MarshalAs(UnmanagedType.LPStr)] string name);
		[UFP(CC.StdCall)] public delegate void ShaderStorageBlockBindingFunc(uint program,uint storageBlockIndex,uint storageBlockBinding);
		[UFP(CC.StdCall)] public delegate void TexBufferRangeFunc(uint target,uint internalformat,uint buffer,int offset,int size);
		[UFP(CC.StdCall)] public delegate void TexStorage2DMultisampleFunc(uint target,int samples,uint internalformat,int width,int height,byte fixedsamplelocations);
		[UFP(CC.StdCall)] public delegate void TexStorage3DMultisampleFunc(uint target,int samples,uint internalformat,int width,int height,int depth,byte fixedsamplelocations);
		[UFP(CC.StdCall)] public delegate void TextureViewFunc(uint texture,uint target,uint origtexture,uint internalformat,uint minlevel,uint numlevels,uint minlayer,uint numlayers);
		[UFP(CC.StdCall)] public delegate void BindVertexBufferFunc(uint bindingindex,uint buffer,int offset,int stride);
		[UFP(CC.StdCall)] public delegate void VertexAttribFormatFunc(uint attribindex,int size,uint type,byte normalized,uint relativeoffset);
		[UFP(CC.StdCall)] public delegate void VertexAttribIFormatFunc(uint attribindex,int size,uint type,uint relativeoffset);
		[UFP(CC.StdCall)] public delegate void VertexAttribLFormatFunc(uint attribindex,int size,uint type,uint relativeoffset);
		[UFP(CC.StdCall)] public delegate void VertexAttribBindingFunc(uint attribindex,uint bindingindex);
		[UFP(CC.StdCall)] public delegate void VertexBindingDivisorFunc(uint bindingindex,uint divisor);
		[UFP(CC.StdCall)] public delegate void DebugMessageControlFunc(uint source,uint type,uint severity,int count,ref uint ids,byte enabled);
		[UFP(CC.StdCall)] public delegate void DebugMessageInsertFunc(uint source,uint type,uint id,uint severity,int length,[In] [MarshalAs(UnmanagedType.LPStr)] string buf);
		[UFP(CC.StdCall)] public delegate void DebugMessageCallbackFunc(DebugFunc callback,IntPtr userParam);
		[UFP(CC.StdCall)] public delegate uint GetDebugMessageLogFunc(uint count,int bufSize,ref uint sources,ref uint types,ref uint ids,ref uint severities,ref int lengths,IntPtr messageLog);
		[UFP(CC.StdCall)] public delegate void PushDebugGroupFunc(uint source,uint id,int length,[In] [MarshalAs(UnmanagedType.LPStr)] string message);
		[UFP(CC.StdCall)] public delegate void PopDebugGroupFunc();
		[UFP(CC.StdCall)] public delegate void ObjectLabelFunc(uint identifier,uint name,int length,[In] [MarshalAs(UnmanagedType.LPStr)] string label);
		[UFP(CC.StdCall)] public delegate void GetObjectLabelFunc(uint identifier,uint name,int bufSize,ref int length,IntPtr label);
		[UFP(CC.StdCall)] public delegate void ObjectPtrLabelFunc(IntPtr ptr,int length,[In] [MarshalAs(UnmanagedType.LPStr)] string label);
		[UFP(CC.StdCall)] public delegate void GetObjectPtrLabelFunc(IntPtr ptr,int bufSize,ref int length,IntPtr label);

		#endregion

		#region OpenGL 4.4

		[UFP(CC.StdCall)] public delegate void BufferStorageFunc(uint target,int size,IntPtr data,uint flags);
		[UFP(CC.StdCall)] public delegate void ClearTexImageFunc(uint texture,int level,uint format,uint type,IntPtr data);
		[UFP(CC.StdCall)] public delegate void ClearTexSubImageFunc(uint texture,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,uint type,IntPtr data);
		[UFP(CC.StdCall)] public delegate void BindBuffersBaseFunc(uint target,uint first,int count,ref uint buffers);
		[UFP(CC.StdCall)] public delegate void BindBuffersRangeFunc(uint target,uint first,int count,ref uint buffers,ref int offsets,ref int sizes);
		[UFP(CC.StdCall)] public delegate void BindTexturesFunc(uint first,int count,ref uint textures);
		[UFP(CC.StdCall)] public delegate void BindSamplersFunc(uint first,int count,ref uint samplers);
		[UFP(CC.StdCall)] public delegate void BindImageTexturesFunc(uint first,int count,ref uint textures);
		[UFP(CC.StdCall)] public delegate void BindVertexBuffersFunc(uint first,int count,ref uint buffers,ref int offsets,ref int strides);

		#endregion

		#region OpenGL 4.5

		[UFP(CC.StdCall)] public delegate void ClipControlFunc(uint origin,uint depth);
		[UFP(CC.StdCall)] public delegate void CreateTransformFeedbacksFunc(int n,ref uint ids);
		[UFP(CC.StdCall)] public delegate void TransformFeedbackBufferBaseFunc(uint xfb,uint index,uint buffer);
		[UFP(CC.StdCall)] public delegate void TransformFeedbackBufferRangeFunc(uint xfb,uint index,uint buffer,int offset,int size);
		[UFP(CC.StdCall)] public delegate void GetTransformFeedbackivFunc(uint xfb,uint pname,ref int param);
		[UFP(CC.StdCall)] public delegate void GetTransformFeedbacki_vFunc(uint xfb,uint pname,uint index,ref int param);
		[UFP(CC.StdCall)] public delegate void GetTransformFeedbacki64_vFunc(uint xfb,uint pname,uint index,ref long param);
		[UFP(CC.StdCall)] public delegate void CreateBuffersFunc(int n,ref uint buffers);
		[UFP(CC.StdCall)] public delegate void NamedBufferStorageFunc(uint buffer,int size,IntPtr data,uint flags);
		[UFP(CC.StdCall)] public delegate void NamedBufferDataFunc(uint buffer,int size,IntPtr data,uint usage);
		[UFP(CC.StdCall)] public delegate void NamedBufferSubDataFunc(uint buffer,int offset,int size,IntPtr data);
		[UFP(CC.StdCall)] public delegate void CopyNamedBufferSubDataFunc(uint readBuffer,uint writeBuffer,int readOffset,int writeOffset,int size);
		[UFP(CC.StdCall)] public delegate void ClearNamedBufferDataFunc(uint buffer,uint internalformat,uint format,uint type,IntPtr data);
		[UFP(CC.StdCall)] public delegate void ClearNamedBufferSubDataFunc(uint buffer,uint internalformat,int offset,int size,uint format,uint type,IntPtr data);
		[UFP(CC.StdCall)] public delegate IntPtr MapNamedBufferFunc(uint buffer,uint access);
		[UFP(CC.StdCall)] public delegate IntPtr MapNamedBufferRangeFunc(uint buffer,int offset,int length,uint access);
		[UFP(CC.StdCall)] public delegate byte UnmapNamedBufferFunc(uint buffer);
		[UFP(CC.StdCall)] public delegate void FlushMappedNamedBufferRangeFunc(uint buffer,int offset,int length);
		[UFP(CC.StdCall)] public delegate void GetNamedBufferParameterivFunc(uint buffer,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetNamedBufferParameteri64vFunc(uint buffer,uint pname,ref long parameters);
		[UFP(CC.StdCall)] public delegate void GetNamedBufferPointervFunc(uint buffer,uint pname,ref IntPtr parameters);
		[UFP(CC.StdCall)] public delegate void GetNamedBufferSubDataFunc(uint buffer,int offset,int size,IntPtr data);
		[UFP(CC.StdCall)] public delegate void CreateFramebuffersFunc(int n,ref uint framebuffers);
		[UFP(CC.StdCall)] public delegate void NamedFramebufferRenderbufferFunc(uint framebuffer,uint attachment,uint renderbuffertarget,uint renderbuffer);
		[UFP(CC.StdCall)] public delegate void NamedFramebufferParameteriFunc(uint framebuffer,uint pname,int param);
		[UFP(CC.StdCall)] public delegate void NamedFramebufferTextureFunc(uint framebuffer,uint attachment,uint texture,int level);
		[UFP(CC.StdCall)] public delegate void NamedFramebufferTextureLayerFunc(uint framebuffer,uint attachment,uint texture,int level,int layer);
		[UFP(CC.StdCall)] public delegate void NamedFramebufferDrawBufferFunc(uint framebuffer,uint buf);
		[UFP(CC.StdCall)] public delegate void NamedFramebufferDrawBuffersFunc(uint framebuffer,int n,ref uint bufs);
		[UFP(CC.StdCall)] public delegate void NamedFramebufferReadBufferFunc(uint framebuffer,uint src);
		[UFP(CC.StdCall)] public delegate void InvalidateNamedFramebufferDataFunc(uint framebuffer,int numAttachments,ref uint attachments);
		[UFP(CC.StdCall)] public delegate void InvalidateNamedFramebufferSubDataFunc(uint framebuffer,int numAttachments,ref uint attachments,int x,int y,int width,int height);
		[UFP(CC.StdCall)] public delegate void ClearNamedFramebufferivFunc(uint framebuffer,uint buffer,int drawbuffer,ref int value);
		[UFP(CC.StdCall)] public delegate void ClearNamedFramebufferuivFunc(uint framebuffer,uint buffer,int drawbuffer,ref uint value);
		[UFP(CC.StdCall)] public delegate void ClearNamedFramebufferfvFunc(uint framebuffer,uint buffer,int drawbuffer,ref float value);
		[UFP(CC.StdCall)] public delegate void ClearNamedFramebufferfiFunc(uint framebuffer,uint buffer,int drawbuffer,float depth,int stencil);
		[UFP(CC.StdCall)] public delegate void BlitNamedFramebufferFunc(uint readFramebuffer,uint drawFramebuffer,int srcX0,int srcY0,int srcX1,int srcY1,int dstX0,int dstY0,int dstX1,int dstY1,uint mask,uint filter);
		[UFP(CC.StdCall)] public delegate uint CheckNamedFramebufferStatusFunc(uint framebuffer,uint target);
		[UFP(CC.StdCall)] public delegate void GetNamedFramebufferParameterivFunc(uint framebuffer,uint pname,ref int param);
		[UFP(CC.StdCall)] public delegate void GetNamedFramebufferAttachmentParameterivFunc(uint framebuffer,uint attachment,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void CreateRenderbuffersFunc(int n,ref uint renderbuffers);
		[UFP(CC.StdCall)] public delegate void NamedRenderbufferStorageFunc(uint renderbuffer,uint internalformat,int width,int height);
		[UFP(CC.StdCall)] public delegate void NamedRenderbufferStorageMultisampleFunc(uint renderbuffer,int samples,uint internalformat,int width,int height);
		[UFP(CC.StdCall)] public delegate void GetNamedRenderbufferParameterivFunc(uint renderbuffer,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void CreateTexturesFunc(uint target,int n,ref uint textures);
		[UFP(CC.StdCall)] public delegate void TextureBufferFunc(uint texture,uint internalformat,uint buffer);
		[UFP(CC.StdCall)] public delegate void TextureBufferRangeFunc(uint texture,uint internalformat,uint buffer,int offset,int size);
		[UFP(CC.StdCall)] public delegate void TextureStorage1DFunc(uint texture,int levels,uint internalformat,int width);
		[UFP(CC.StdCall)] public delegate void TextureStorage2DFunc(uint texture,int levels,uint internalformat,int width,int height);
		[UFP(CC.StdCall)] public delegate void TextureStorage3DFunc(uint texture,int levels,uint internalformat,int width,int height,int depth);
		[UFP(CC.StdCall)] public delegate void TextureStorage2DMultisampleFunc(uint texture,int samples,uint internalformat,int width,int height,byte fixedsamplelocations);
		[UFP(CC.StdCall)] public delegate void TextureStorage3DMultisampleFunc(uint texture,int samples,uint internalformat,int width,int height,int depth,byte fixedsamplelocations);
		[UFP(CC.StdCall)] public delegate void TextureSubImage1DFunc(uint texture,int level,int xoffset,int width,uint format,uint type,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void TextureSubImage2DFunc(uint texture,int level,int xoffset,int yoffset,int width,int height,uint format,uint type,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void TextureSubImage3DFunc(uint texture,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,uint type,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void CompressedTextureSubImage1DFunc(uint texture,int level,int xoffset,int width,uint format,int imageSize,IntPtr data);
		[UFP(CC.StdCall)] public delegate void CompressedTextureSubImage2DFunc(uint texture,int level,int xoffset,int yoffset,int width,int height,uint format,int imageSize,IntPtr data);
		[UFP(CC.StdCall)] public delegate void CompressedTextureSubImage3DFunc(uint texture,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,int imageSize,IntPtr data);
		[UFP(CC.StdCall)] public delegate void CopyTextureSubImage1DFunc(uint texture,int level,int xoffset,int x,int y,int width);
		[UFP(CC.StdCall)] public delegate void CopyTextureSubImage2DFunc(uint texture,int level,int xoffset,int yoffset,int x,int y,int width,int height);
		[UFP(CC.StdCall)] public delegate void CopyTextureSubImage3DFunc(uint texture,int level,int xoffset,int yoffset,int zoffset,int x,int y,int width,int height);
		[UFP(CC.StdCall)] public delegate void TextureParameterfFunc(uint texture,uint pname,float param);
		[UFP(CC.StdCall)] public delegate void TextureParameterfvFunc(uint texture,uint pname,ref float param);
		[UFP(CC.StdCall)] public delegate void TextureParameteriFunc(uint texture,uint pname,int param);
		[UFP(CC.StdCall)] public delegate void TextureParameterIivFunc(uint texture,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void TextureParameterIuivFunc(uint texture,uint pname,ref uint parameters);
		[UFP(CC.StdCall)] public delegate void TextureParameterivFunc(uint texture,uint pname,ref int param);
		[UFP(CC.StdCall)] public delegate void GenerateTextureMipmapFunc(uint texture);
		[UFP(CC.StdCall)] public delegate void BindTextureUnitFunc(uint unit,uint texture);
		[UFP(CC.StdCall)] public delegate void GetTextureImageFunc(uint texture,int level,uint format,uint type,int bufSize,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void GetCompressedTextureImageFunc(uint texture,int level,int bufSize,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void GetTextureLevelParameterfvFunc(uint texture,int level,uint pname,ref float parameters);
		[UFP(CC.StdCall)] public delegate void GetTextureLevelParameterivFunc(uint texture,int level,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetTextureParameterfvFunc(uint texture,uint pname,ref float parameters);
		[UFP(CC.StdCall)] public delegate void GetTextureParameterIivFunc(uint texture,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetTextureParameterIuivFunc(uint texture,uint pname,ref uint parameters);
		[UFP(CC.StdCall)] public delegate void GetTextureParameterivFunc(uint texture,uint pname,ref int parameters);
		[UFP(CC.StdCall)] public delegate void CreateVertexArraysFunc(int n,ref uint arrays);
		[UFP(CC.StdCall)] public delegate void DisableVertexArrayAttribFunc(uint vaobj,uint index);
		[UFP(CC.StdCall)] public delegate void EnableVertexArrayAttribFunc(uint vaobj,uint index);
		[UFP(CC.StdCall)] public delegate void VertexArrayElementBufferFunc(uint vaobj,uint buffer);
		[UFP(CC.StdCall)] public delegate void VertexArrayVertexBufferFunc(uint vaobj,uint bindingindex,uint buffer,int offset,int stride);
		[UFP(CC.StdCall)] public delegate void VertexArrayVertexBuffersFunc(uint vaobj,uint first,int count,ref uint buffers,ref int offsets,ref int strides);
		[UFP(CC.StdCall)] public delegate void VertexArrayAttribBindingFunc(uint vaobj,uint attribindex,uint bindingindex);
		[UFP(CC.StdCall)] public delegate void VertexArrayAttribFormatFunc(uint vaobj,uint attribindex,int size,uint type,byte normalized,uint relativeoffset);
		[UFP(CC.StdCall)] public delegate void VertexArrayAttribIFormatFunc(uint vaobj,uint attribindex,int size,uint type,uint relativeoffset);
		[UFP(CC.StdCall)] public delegate void VertexArrayAttribLFormatFunc(uint vaobj,uint attribindex,int size,uint type,uint relativeoffset);
		[UFP(CC.StdCall)] public delegate void VertexArrayBindingDivisorFunc(uint vaobj,uint bindingindex,uint divisor);
		[UFP(CC.StdCall)] public delegate void GetVertexArrayivFunc(uint vaobj,uint pname,ref int param);
		[UFP(CC.StdCall)] public delegate void GetVertexArrayIndexedivFunc(uint vaobj,uint index,uint pname,ref int param);
		[UFP(CC.StdCall)] public delegate void GetVertexArrayIndexed64ivFunc(uint vaobj,uint index,uint pname,ref long param);
		[UFP(CC.StdCall)] public delegate void CreateSamplersFunc(int n,ref uint samplers);
		[UFP(CC.StdCall)] public delegate void CreateProgramPipelinesFunc(int n,ref uint pipelines);
		[UFP(CC.StdCall)] public delegate void CreateQueriesFunc(uint target,int n,ref uint ids);
		[UFP(CC.StdCall)] public delegate void GetQueryBufferObjecti64vFunc(uint id,uint buffer,uint pname,int offset);
		[UFP(CC.StdCall)] public delegate void GetQueryBufferObjectui64vFunc(uint id,uint buffer,uint pname,int offset);
		[UFP(CC.StdCall)] public delegate void GetQueryBufferObjectivFunc(uint id,uint buffer,uint pname,int offset);
		[UFP(CC.StdCall)] public delegate void GetQueryBufferObjectuivFunc(uint id,uint buffer,uint pname,int offset);
		[UFP(CC.StdCall)] public delegate void MemoryBarrierByRegionFunc(uint barriers);
		[UFP(CC.StdCall)] public delegate void GetTextureSubImageFunc(uint texture,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,uint format,uint type,int bufSize,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void GetCompressedTextureSubImageFunc(uint texture,int level,int xoffset,int yoffset,int zoffset,int width,int height,int depth,int bufSize,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate uint GetGraphicsResetStatusFunc();
		[UFP(CC.StdCall)] public delegate void GetnCompressedTexImageFunc(uint target,int lod,int bufSize,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void GetnTexImageFunc(uint target,int level,uint format,uint type,int bufSize,IntPtr pixels);
		[UFP(CC.StdCall)] public delegate void GetnUniformdvFunc(uint program,int location,int bufSize,ref double parameters);
		[UFP(CC.StdCall)] public delegate void GetnUniformfvFunc(uint program,int location,int bufSize,ref float parameters);
		[UFP(CC.StdCall)] public delegate void GetnUniformivFunc(uint program,int location,int bufSize,ref int parameters);
		[UFP(CC.StdCall)] public delegate void GetnUniformuivFunc(uint program,int location,int bufSize,ref uint parameters);
		[UFP(CC.StdCall)] public delegate void ReadnPixelsFunc(int x,int y,int width,int height,uint format,uint type,int bufSize,IntPtr data);
		[UFP(CC.StdCall)] public delegate void TextureBarrierFunc();

		#endregion
	}
}